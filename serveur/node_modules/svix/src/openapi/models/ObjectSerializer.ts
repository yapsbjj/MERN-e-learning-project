export * from '../models/AggregateEventTypesOut';
export * from '../models/AppPortalAccessIn';
export * from '../models/AppPortalAccessOut';
export * from '../models/AppUsageStatsIn';
export * from '../models/AppUsageStatsOut';
export * from '../models/ApplicationIn';
export * from '../models/ApplicationOut';
export * from '../models/ApplicationPatch';
export * from '../models/ApplicationStats';
export * from '../models/ApplicationTokenExpireIn';
export * from '../models/AttemptStatisticsData';
export * from '../models/AttemptStatisticsResponse';
export * from '../models/AuthTokenOut';
export * from '../models/AzureBlobStorageConfig';
export * from '../models/BackgroundTaskOut';
export * from '../models/BackgroundTaskStatus';
export * from '../models/BackgroundTaskType';
export * from '../models/BigQueryConfig';
export * from '../models/BorderRadiusConfig';
export * from '../models/BorderRadiusEnum';
export * from '../models/ClientSecretJwtParamsIn';
export * from '../models/CompletionChoice';
export * from '../models/CompletionMessage';
export * from '../models/CreateMessageTokenIn';
export * from '../models/CreateStreamIn';
export * from '../models/CustomColorPalette';
export * from '../models/CustomStringsOverride';
export * from '../models/CustomThemeOverride';
export * from '../models/DashboardAccessOut';
export * from '../models/Duration';
export * from '../models/EndpointCreatedEvent';
export * from '../models/EndpointCreatedEventData';
export * from '../models/EndpointDeletedEvent';
export * from '../models/EndpointDeletedEventData';
export * from '../models/EndpointDisabledEvent';
export * from '../models/EndpointDisabledEventData';
export * from '../models/EndpointHeadersIn';
export * from '../models/EndpointHeadersOut';
export * from '../models/EndpointHeadersPatchIn';
export * from '../models/EndpointIn';
export * from '../models/EndpointMessageOut';
export * from '../models/EndpointMtlsConfigIn';
export * from '../models/EndpointOauthConfigIn';
export * from '../models/EndpointOut';
export * from '../models/EndpointPatch';
export * from '../models/EndpointSecretOut';
export * from '../models/EndpointSecretRotateIn';
export * from '../models/EndpointStats';
export * from '../models/EndpointTransformationIn';
export * from '../models/EndpointTransformationOut';
export * from '../models/EndpointTransformationSimulateIn';
export * from '../models/EndpointTransformationSimulateOut';
export * from '../models/EndpointUpdate';
export * from '../models/EndpointUpdatedEvent';
export * from '../models/EndpointUpdatedEventData';
export * from '../models/EnvironmentIn';
export * from '../models/EnvironmentOut';
export * from '../models/EnvironmentSettingsOut';
export * from '../models/EventExampleIn';
export * from '../models/EventIn';
export * from '../models/EventOut';
export * from '../models/EventStreamOut';
export * from '../models/EventTypeExampleOut';
export * from '../models/EventTypeFromOpenApi';
export * from '../models/EventTypeImportOpenApiIn';
export * from '../models/EventTypeImportOpenApiOut';
export * from '../models/EventTypeImportOpenApiOutData';
export * from '../models/EventTypeIn';
export * from '../models/EventTypeOut';
export * from '../models/EventTypePatch';
export * from '../models/EventTypeSchemaIn';
export * from '../models/EventTypeUpdate';
export * from '../models/ExportEventTypeOut';
export * from '../models/FontSizeConfig';
export * from '../models/GenerateIn';
export * from '../models/GenerateOut';
export * from '../models/GoogleCloudStorageConfig';
export * from '../models/HTTPValidationError';
export * from '../models/HttpErrorOut';
export * from '../models/HubspotOauthConfigIn';
export * from '../models/InboundPathParams';
export * from '../models/IncomingWebhookPayloadOut';
export * from '../models/IntegrationIn';
export * from '../models/IntegrationKeyOut';
export * from '../models/IntegrationOut';
export * from '../models/IntegrationUpdate';
export * from '../models/KafkaSecurityProtocolType';
export * from '../models/ListResponseApplicationOut';
export * from '../models/ListResponseApplicationStats';
export * from '../models/ListResponseBackgroundTaskOut';
export * from '../models/ListResponseEndpointMessageOut';
export * from '../models/ListResponseEndpointOut';
export * from '../models/ListResponseEventTypeOut';
export * from '../models/ListResponseIntegrationOut';
export * from '../models/ListResponseMessageAttemptEndpointOut';
export * from '../models/ListResponseMessageAttemptOut';
export * from '../models/ListResponseMessageEndpointOut';
export * from '../models/ListResponseMessageOut';
export * from '../models/ListResponseOperationalWebhookEndpointOut';
export * from '../models/ListResponseSinkOut';
export * from '../models/ListResponseStreamEventTypeOut';
export * from '../models/ListResponseStreamOut';
export * from '../models/ListResponseStreamSinkOut';
export * from '../models/ListResponseTemplateOut';
export * from '../models/MessageAttemptEndpointOut';
export * from '../models/MessageAttemptExhaustedEvent';
export * from '../models/MessageAttemptExhaustedEventData';
export * from '../models/MessageAttemptFailedData';
export * from '../models/MessageAttemptFailingEvent';
export * from '../models/MessageAttemptFailingEventData';
export * from '../models/MessageAttemptHeadersOut';
export * from '../models/MessageAttemptOut';
export * from '../models/MessageAttemptRecoveredEvent';
export * from '../models/MessageAttemptRecoveredEventData';
export * from '../models/MessageAttemptTriggerType';
export * from '../models/MessageBroadcastIn';
export * from '../models/MessageBroadcastOut';
export * from '../models/MessageEndpointOut';
export * from '../models/MessageEventsOut';
export * from '../models/MessageIn';
export * from '../models/MessageOut';
export * from '../models/MessageRawPayloadOut';
export * from '../models/MessageStatus';
export * from '../models/MessageSubscriberAuthTokenOut';
export * from '../models/OAuthPayloadIn';
export * from '../models/OAuthPayloadOut';
export * from '../models/Oauth2AuthMethodIn';
export * from '../models/Oauth2GrantTypeIn';
export * from '../models/OauthJwsSigningAlgorithm';
export * from '../models/OneTimeTokenIn';
export * from '../models/OneTimeTokenOut';
export * from '../models/OperationalWebhookEndpointIn';
export * from '../models/OperationalWebhookEndpointOut';
export * from '../models/OperationalWebhookEndpointSecretIn';
export * from '../models/OperationalWebhookEndpointSecretOut';
export * from '../models/OperationalWebhookEndpointUpdate';
export * from '../models/Ordering';
export * from '../models/RecoverIn';
export * from '../models/RecoverOut';
export * from '../models/RedshiftConfig';
export * from '../models/ReplayIn';
export * from '../models/ReplayOut';
export * from '../models/RetryScheduleInOut';
export * from '../models/RotatedUrlOut';
export * from '../models/S3Config';
export * from '../models/SettingsIn';
export * from '../models/SettingsOut';
export * from '../models/SinkHttpConfig';
export * from '../models/SinkIn';
export * from '../models/SinkInOneOf';
export * from '../models/SinkInOneOf1';
export * from '../models/SinkInOneOf2';
export * from '../models/SinkInOneOf3';
export * from '../models/SinkOtelV1Config';
export * from '../models/SinkOut';
export * from '../models/SinkPayloadFormat';
export * from '../models/SinkStatus';
export * from '../models/SinkStatusIn';
export * from '../models/SinkTransformIn';
export * from '../models/SinkTransformationOut';
export * from '../models/SnowflakeConfig';
export * from '../models/StatisticsPeriod';
export * from '../models/StatusCodeClass';
export * from '../models/StreamEventTypeIn';
export * from '../models/StreamEventTypeOut';
export * from '../models/StreamEventTypePatch';
export * from '../models/StreamIn';
export * from '../models/StreamOut';
export * from '../models/StreamPatch';
export * from '../models/StreamSinkIn';
export * from '../models/StreamSinkInOneOf';
export * from '../models/StreamSinkInOneOf1';
export * from '../models/StreamSinkInOneOf2';
export * from '../models/StreamSinkInOneOf3';
export * from '../models/StreamSinkInOneOf4';
export * from '../models/StreamSinkInOneOf5';
export * from '../models/StreamSinkInOneOf6';
export * from '../models/StreamSinkInOneOf7';
export * from '../models/StreamSinkOut';
export * from '../models/StreamSinkPatch';
export * from '../models/TemplateIn';
export * from '../models/TemplateOut';
export * from '../models/TemplatePatch';
export * from '../models/TemplateUpdate';
export * from '../models/TransformationHttpMethod';
export * from '../models/TransformationSimulateIn';
export * from '../models/TransformationSimulateOut';
export * from '../models/TransformationTemplateKind';
export * from '../models/ValidationError';

import { AggregateEventTypesOut    } from '../models/AggregateEventTypesOut';
import { AppPortalAccessIn } from '../models/AppPortalAccessIn';
import { AppPortalAccessOut } from '../models/AppPortalAccessOut';
import { AppUsageStatsIn } from '../models/AppUsageStatsIn';
import { AppUsageStatsOut     } from '../models/AppUsageStatsOut';
import { ApplicationIn } from '../models/ApplicationIn';
import { ApplicationOut } from '../models/ApplicationOut';
import { ApplicationPatch } from '../models/ApplicationPatch';
import { ApplicationStats } from '../models/ApplicationStats';
import { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';
import { AttemptStatisticsData } from '../models/AttemptStatisticsData';
import { AttemptStatisticsResponse     } from '../models/AttemptStatisticsResponse';
import { AuthTokenOut } from '../models/AuthTokenOut';
import { AzureBlobStorageConfig } from '../models/AzureBlobStorageConfig';
import { BackgroundTaskOut     } from '../models/BackgroundTaskOut';
import { BackgroundTaskStatus } from '../models/BackgroundTaskStatus';
import { BackgroundTaskType } from '../models/BackgroundTaskType';
import { BigQueryConfig } from '../models/BigQueryConfig';
import { BorderRadiusConfig    } from '../models/BorderRadiusConfig';
import { BorderRadiusEnum } from '../models/BorderRadiusEnum';
import { ClientSecretJwtParamsIn     } from '../models/ClientSecretJwtParamsIn';
import { CompletionChoice } from '../models/CompletionChoice';
import { CompletionMessage } from '../models/CompletionMessage';
import { CreateMessageTokenIn } from '../models/CreateMessageTokenIn';
import { CreateStreamIn } from '../models/CreateStreamIn';
import { CustomColorPalette } from '../models/CustomColorPalette';
import { CustomStringsOverride } from '../models/CustomStringsOverride';
import { CustomThemeOverride } from '../models/CustomThemeOverride';
import { DashboardAccessOut } from '../models/DashboardAccessOut';
import { Duration } from '../models/Duration';
import { EndpointCreatedEvent , EndpointCreatedEventTypeEnum   } from '../models/EndpointCreatedEvent';
import { EndpointCreatedEventData } from '../models/EndpointCreatedEventData';
import { EndpointDeletedEvent , EndpointDeletedEventTypeEnum   } from '../models/EndpointDeletedEvent';
import { EndpointDeletedEventData } from '../models/EndpointDeletedEventData';
import { EndpointDisabledEvent , EndpointDisabledEventTypeEnum   } from '../models/EndpointDisabledEvent';
import { EndpointDisabledEventData } from '../models/EndpointDisabledEventData';
import { EndpointHeadersIn } from '../models/EndpointHeadersIn';
import { EndpointHeadersOut } from '../models/EndpointHeadersOut';
import { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';
import { EndpointIn } from '../models/EndpointIn';
import { EndpointMessageOut          } from '../models/EndpointMessageOut';
import { EndpointMtlsConfigIn } from '../models/EndpointMtlsConfigIn';
import { EndpointOauthConfigIn          } from '../models/EndpointOauthConfigIn';
import { EndpointOut } from '../models/EndpointOut';
import { EndpointPatch } from '../models/EndpointPatch';
import { EndpointSecretOut } from '../models/EndpointSecretOut';
import { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';
import { EndpointStats } from '../models/EndpointStats';
import { EndpointTransformationIn } from '../models/EndpointTransformationIn';
import { EndpointTransformationOut } from '../models/EndpointTransformationOut';
import { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';
import { EndpointTransformationSimulateOut    } from '../models/EndpointTransformationSimulateOut';
import { EndpointUpdate } from '../models/EndpointUpdate';
import { EndpointUpdatedEvent , EndpointUpdatedEventTypeEnum   } from '../models/EndpointUpdatedEvent';
import { EndpointUpdatedEventData } from '../models/EndpointUpdatedEventData';
import { EnvironmentIn } from '../models/EnvironmentIn';
import { EnvironmentOut } from '../models/EnvironmentOut';
import { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';
import { EventExampleIn } from '../models/EventExampleIn';
import { EventIn } from '../models/EventIn';
import { EventOut } from '../models/EventOut';
import { EventStreamOut } from '../models/EventStreamOut';
import { EventTypeExampleOut } from '../models/EventTypeExampleOut';
import { EventTypeFromOpenApi } from '../models/EventTypeFromOpenApi';
import { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';
import { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';
import { EventTypeImportOpenApiOutData } from '../models/EventTypeImportOpenApiOutData';
import { EventTypeIn } from '../models/EventTypeIn';
import { EventTypeOut } from '../models/EventTypeOut';
import { EventTypePatch } from '../models/EventTypePatch';
import { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';
import { EventTypeUpdate } from '../models/EventTypeUpdate';
import { ExportEventTypeOut    } from '../models/ExportEventTypeOut';
import { FontSizeConfig } from '../models/FontSizeConfig';
import { GenerateIn } from '../models/GenerateIn';
import { GenerateOut } from '../models/GenerateOut';
import { GoogleCloudStorageConfig } from '../models/GoogleCloudStorageConfig';
import { HTTPValidationError } from '../models/HTTPValidationError';
import { HttpErrorOut } from '../models/HttpErrorOut';
import { HubspotOauthConfigIn } from '../models/HubspotOauthConfigIn';
import { InboundPathParams } from '../models/InboundPathParams';
import { IncomingWebhookPayloadOut } from '../models/IncomingWebhookPayloadOut';
import { IntegrationIn } from '../models/IntegrationIn';
import { IntegrationKeyOut } from '../models/IntegrationKeyOut';
import { IntegrationOut } from '../models/IntegrationOut';
import { IntegrationUpdate } from '../models/IntegrationUpdate';
import { KafkaSecurityProtocolType } from '../models/KafkaSecurityProtocolType';
import { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';
import { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';
import { ListResponseBackgroundTaskOut } from '../models/ListResponseBackgroundTaskOut';
import { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';
import { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';
import { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';
import { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';
import { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';
import { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';
import { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';
import { ListResponseMessageOut } from '../models/ListResponseMessageOut';
import { ListResponseOperationalWebhookEndpointOut } from '../models/ListResponseOperationalWebhookEndpointOut';
import { ListResponseSinkOut } from '../models/ListResponseSinkOut';
import { ListResponseStreamEventTypeOut } from '../models/ListResponseStreamEventTypeOut';
import { ListResponseStreamOut } from '../models/ListResponseStreamOut';
import { ListResponseStreamSinkOut } from '../models/ListResponseStreamSinkOut';
import { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';
import { MessageAttemptEndpointOut            } from '../models/MessageAttemptEndpointOut';
import { MessageAttemptExhaustedEvent , MessageAttemptExhaustedEventTypeEnum   } from '../models/MessageAttemptExhaustedEvent';
import { MessageAttemptExhaustedEventData } from '../models/MessageAttemptExhaustedEventData';
import { MessageAttemptFailedData } from '../models/MessageAttemptFailedData';
import { MessageAttemptFailingEvent , MessageAttemptFailingEventTypeEnum   } from '../models/MessageAttemptFailingEvent';
import { MessageAttemptFailingEventData } from '../models/MessageAttemptFailingEventData';
import { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';
import { MessageAttemptOut            } from '../models/MessageAttemptOut';
import { MessageAttemptRecoveredEvent , MessageAttemptRecoveredEventTypeEnum   } from '../models/MessageAttemptRecoveredEvent';
import { MessageAttemptRecoveredEventData } from '../models/MessageAttemptRecoveredEventData';
import { MessageAttemptTriggerType } from '../models/MessageAttemptTriggerType';
import { MessageBroadcastIn } from '../models/MessageBroadcastIn';
import { MessageBroadcastOut    } from '../models/MessageBroadcastOut';
import { MessageEndpointOut              } from '../models/MessageEndpointOut';
import { MessageEventsOut } from '../models/MessageEventsOut';
import { MessageIn } from '../models/MessageIn';
import { MessageOut } from '../models/MessageOut';
import { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';
import { MessageStatus } from '../models/MessageStatus';
import { MessageSubscriberAuthTokenOut } from '../models/MessageSubscriberAuthTokenOut';
import { OAuthPayloadIn } from '../models/OAuthPayloadIn';
import { OAuthPayloadOut } from '../models/OAuthPayloadOut';
import { Oauth2AuthMethodIn } from '../models/Oauth2AuthMethodIn';
import { Oauth2GrantTypeIn } from '../models/Oauth2GrantTypeIn';
import { OauthJwsSigningAlgorithm } from '../models/OauthJwsSigningAlgorithm';
import { OneTimeTokenIn } from '../models/OneTimeTokenIn';
import { OneTimeTokenOut } from '../models/OneTimeTokenOut';
import { OperationalWebhookEndpointIn } from '../models/OperationalWebhookEndpointIn';
import { OperationalWebhookEndpointOut } from '../models/OperationalWebhookEndpointOut';
import { OperationalWebhookEndpointSecretIn } from '../models/OperationalWebhookEndpointSecretIn';
import { OperationalWebhookEndpointSecretOut } from '../models/OperationalWebhookEndpointSecretOut';
import { OperationalWebhookEndpointUpdate } from '../models/OperationalWebhookEndpointUpdate';
import { Ordering } from '../models/Ordering';
import { RecoverIn } from '../models/RecoverIn';
import { RecoverOut    } from '../models/RecoverOut';
import { RedshiftConfig } from '../models/RedshiftConfig';
import { ReplayIn } from '../models/ReplayIn';
import { ReplayOut    } from '../models/ReplayOut';
import { RetryScheduleInOut } from '../models/RetryScheduleInOut';
import { RotatedUrlOut } from '../models/RotatedUrlOut';
import { S3Config } from '../models/S3Config';
import { SettingsIn } from '../models/SettingsIn';
import { SettingsOut } from '../models/SettingsOut';
import { SinkHttpConfig } from '../models/SinkHttpConfig';
import { SinkInClass } from '../models/SinkIn';
import { SinkInOneOf , SinkInOneOfTypeEnum    } from '../models/SinkInOneOf';
import { SinkInOneOf1    , SinkInOneOf1TypeEnum   } from '../models/SinkInOneOf1';
import { SinkInOneOf2     , SinkInOneOf2TypeEnum   } from '../models/SinkInOneOf2';
import { SinkInOneOf3, SinkInOneOf3TypeEnum    } from '../models/SinkInOneOf3';
import { SinkOtelV1Config } from '../models/SinkOtelV1Config';
import { SinkOutClass } from '../models/SinkOut';
import { SinkPayloadFormat } from '../models/SinkPayloadFormat';
import { SinkStatus } from '../models/SinkStatus';
import { SinkStatusIn } from '../models/SinkStatusIn';
import { SinkTransformIn } from '../models/SinkTransformIn';
import { SinkTransformationOut } from '../models/SinkTransformationOut';
import { SnowflakeConfig } from '../models/SnowflakeConfig';
import { StatisticsPeriod } from '../models/StatisticsPeriod';
import { StatusCodeClass } from '../models/StatusCodeClass';
import { StreamEventTypeIn } from '../models/StreamEventTypeIn';
import { StreamEventTypeOut } from '../models/StreamEventTypeOut';
import { StreamEventTypePatch } from '../models/StreamEventTypePatch';
import { StreamIn } from '../models/StreamIn';
import { StreamOut } from '../models/StreamOut';
import { StreamPatch } from '../models/StreamPatch';
import { StreamSinkInClass } from '../models/StreamSinkIn';
import { StreamSinkInOneOf , StreamSinkInOneOfTypeEnum   } from '../models/StreamSinkInOneOf';
import { StreamSinkInOneOf1 , StreamSinkInOneOf1TypeEnum   } from '../models/StreamSinkInOneOf1';
import { StreamSinkInOneOf2 , StreamSinkInOneOf2TypeEnum   } from '../models/StreamSinkInOneOf2';
import { StreamSinkInOneOf3 , StreamSinkInOneOf3TypeEnum   } from '../models/StreamSinkInOneOf3';
import { StreamSinkInOneOf4 , StreamSinkInOneOf4TypeEnum   } from '../models/StreamSinkInOneOf4';
import { StreamSinkInOneOf5 , StreamSinkInOneOf5TypeEnum   } from '../models/StreamSinkInOneOf5';
import { StreamSinkInOneOf6 , StreamSinkInOneOf6TypeEnum   } from '../models/StreamSinkInOneOf6';
import { StreamSinkInOneOf7 , StreamSinkInOneOf7TypeEnum   } from '../models/StreamSinkInOneOf7';
import { StreamSinkOutClass } from '../models/StreamSinkOut';
import { StreamSinkPatchClass } from '../models/StreamSinkPatch';
import { TemplateIn          } from '../models/TemplateIn';
import { TemplateOut              } from '../models/TemplateOut';
import { TemplatePatch          } from '../models/TemplatePatch';
import { TemplateUpdate          } from '../models/TemplateUpdate';
import { TransformationHttpMethod } from '../models/TransformationHttpMethod';
import { TransformationSimulateIn } from '../models/TransformationSimulateIn';
import { TransformationSimulateOut    } from '../models/TransformationSimulateOut';
import { TransformationTemplateKind } from '../models/TransformationTemplateKind';
import { ValidationError } from '../models/ValidationError';

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

let enumsMap: Set<string> = new Set<string>([
    "BackgroundTaskStatus",
    "BackgroundTaskType",
    "BorderRadiusEnum",
    "EndpointCreatedEventTypeEnum",
    "EndpointDeletedEventTypeEnum",
    "EndpointDisabledEventTypeEnum",
    "EndpointUpdatedEventTypeEnum",
    "KafkaSecurityProtocolType",
    "MessageAttemptExhaustedEventTypeEnum",
    "MessageAttemptFailingEventTypeEnum",
    "MessageAttemptRecoveredEventTypeEnum",
    "MessageAttemptTriggerType",
    "MessageStatus",
    "Oauth2AuthMethodIn",
    "Oauth2GrantTypeIn",
    "OauthJwsSigningAlgorithm",
    "Ordering",
    "SinkInTypeEnum",
    "SinkInOneOfTypeEnum",
    "SinkInOneOf1TypeEnum",
    "SinkInOneOf2TypeEnum",
    "SinkInOneOf3TypeEnum",
    "SinkOutTypeEnum",
    "SinkPayloadFormat",
    "SinkStatus",
    "SinkStatusIn",
    "StatisticsPeriod",
    "StatusCodeClass",
    "StreamSinkInTypeEnum",
    "StreamSinkInOneOfTypeEnum",
    "StreamSinkInOneOf1TypeEnum",
    "StreamSinkInOneOf2TypeEnum",
    "StreamSinkInOneOf3TypeEnum",
    "StreamSinkInOneOf4TypeEnum",
    "StreamSinkInOneOf5TypeEnum",
    "StreamSinkInOneOf6TypeEnum",
    "StreamSinkInOneOf7TypeEnum",
    "StreamSinkOutTypeEnum",
    "StreamSinkPatchTypeEnum",
    "TransformationHttpMethod",
    "TransformationTemplateKind",
]);

let typeMap: {[index: string]: any} = {
    "AggregateEventTypesOut": AggregateEventTypesOut,
    "AppPortalAccessIn": AppPortalAccessIn,
    "AppPortalAccessOut": AppPortalAccessOut,
    "AppUsageStatsIn": AppUsageStatsIn,
    "AppUsageStatsOut": AppUsageStatsOut,
    "ApplicationIn": ApplicationIn,
    "ApplicationOut": ApplicationOut,
    "ApplicationPatch": ApplicationPatch,
    "ApplicationStats": ApplicationStats,
    "ApplicationTokenExpireIn": ApplicationTokenExpireIn,
    "AttemptStatisticsData": AttemptStatisticsData,
    "AttemptStatisticsResponse": AttemptStatisticsResponse,
    "AuthTokenOut": AuthTokenOut,
    "AzureBlobStorageConfig": AzureBlobStorageConfig,
    "BackgroundTaskOut": BackgroundTaskOut,
    "BigQueryConfig": BigQueryConfig,
    "BorderRadiusConfig": BorderRadiusConfig,
    "ClientSecretJwtParamsIn": ClientSecretJwtParamsIn,
    "CompletionChoice": CompletionChoice,
    "CompletionMessage": CompletionMessage,
    "CreateMessageTokenIn": CreateMessageTokenIn,
    "CreateStreamIn": CreateStreamIn,
    "CustomColorPalette": CustomColorPalette,
    "CustomStringsOverride": CustomStringsOverride,
    "CustomThemeOverride": CustomThemeOverride,
    "DashboardAccessOut": DashboardAccessOut,
    "Duration": Duration,
    "EndpointCreatedEvent": EndpointCreatedEvent,
    "EndpointCreatedEventData": EndpointCreatedEventData,
    "EndpointDeletedEvent": EndpointDeletedEvent,
    "EndpointDeletedEventData": EndpointDeletedEventData,
    "EndpointDisabledEvent": EndpointDisabledEvent,
    "EndpointDisabledEventData": EndpointDisabledEventData,
    "EndpointHeadersIn": EndpointHeadersIn,
    "EndpointHeadersOut": EndpointHeadersOut,
    "EndpointHeadersPatchIn": EndpointHeadersPatchIn,
    "EndpointIn": EndpointIn,
    "EndpointMessageOut": EndpointMessageOut,
    "EndpointMtlsConfigIn": EndpointMtlsConfigIn,
    "EndpointOauthConfigIn": EndpointOauthConfigIn,
    "EndpointOut": EndpointOut,
    "EndpointPatch": EndpointPatch,
    "EndpointSecretOut": EndpointSecretOut,
    "EndpointSecretRotateIn": EndpointSecretRotateIn,
    "EndpointStats": EndpointStats,
    "EndpointTransformationIn": EndpointTransformationIn,
    "EndpointTransformationOut": EndpointTransformationOut,
    "EndpointTransformationSimulateIn": EndpointTransformationSimulateIn,
    "EndpointTransformationSimulateOut": EndpointTransformationSimulateOut,
    "EndpointUpdate": EndpointUpdate,
    "EndpointUpdatedEvent": EndpointUpdatedEvent,
    "EndpointUpdatedEventData": EndpointUpdatedEventData,
    "EnvironmentIn": EnvironmentIn,
    "EnvironmentOut": EnvironmentOut,
    "EnvironmentSettingsOut": EnvironmentSettingsOut,
    "EventExampleIn": EventExampleIn,
    "EventIn": EventIn,
    "EventOut": EventOut,
    "EventStreamOut": EventStreamOut,
    "EventTypeExampleOut": EventTypeExampleOut,
    "EventTypeFromOpenApi": EventTypeFromOpenApi,
    "EventTypeImportOpenApiIn": EventTypeImportOpenApiIn,
    "EventTypeImportOpenApiOut": EventTypeImportOpenApiOut,
    "EventTypeImportOpenApiOutData": EventTypeImportOpenApiOutData,
    "EventTypeIn": EventTypeIn,
    "EventTypeOut": EventTypeOut,
    "EventTypePatch": EventTypePatch,
    "EventTypeSchemaIn": EventTypeSchemaIn,
    "EventTypeUpdate": EventTypeUpdate,
    "ExportEventTypeOut": ExportEventTypeOut,
    "FontSizeConfig": FontSizeConfig,
    "GenerateIn": GenerateIn,
    "GenerateOut": GenerateOut,
    "GoogleCloudStorageConfig": GoogleCloudStorageConfig,
    "HTTPValidationError": HTTPValidationError,
    "HttpErrorOut": HttpErrorOut,
    "HubspotOauthConfigIn": HubspotOauthConfigIn,
    "InboundPathParams": InboundPathParams,
    "IncomingWebhookPayloadOut": IncomingWebhookPayloadOut,
    "IntegrationIn": IntegrationIn,
    "IntegrationKeyOut": IntegrationKeyOut,
    "IntegrationOut": IntegrationOut,
    "IntegrationUpdate": IntegrationUpdate,
    "ListResponseApplicationOut": ListResponseApplicationOut,
    "ListResponseApplicationStats": ListResponseApplicationStats,
    "ListResponseBackgroundTaskOut": ListResponseBackgroundTaskOut,
    "ListResponseEndpointMessageOut": ListResponseEndpointMessageOut,
    "ListResponseEndpointOut": ListResponseEndpointOut,
    "ListResponseEventTypeOut": ListResponseEventTypeOut,
    "ListResponseIntegrationOut": ListResponseIntegrationOut,
    "ListResponseMessageAttemptEndpointOut": ListResponseMessageAttemptEndpointOut,
    "ListResponseMessageAttemptOut": ListResponseMessageAttemptOut,
    "ListResponseMessageEndpointOut": ListResponseMessageEndpointOut,
    "ListResponseMessageOut": ListResponseMessageOut,
    "ListResponseOperationalWebhookEndpointOut": ListResponseOperationalWebhookEndpointOut,
    "ListResponseSinkOut": ListResponseSinkOut,
    "ListResponseStreamEventTypeOut": ListResponseStreamEventTypeOut,
    "ListResponseStreamOut": ListResponseStreamOut,
    "ListResponseStreamSinkOut": ListResponseStreamSinkOut,
    "ListResponseTemplateOut": ListResponseTemplateOut,
    "MessageAttemptEndpointOut": MessageAttemptEndpointOut,
    "MessageAttemptExhaustedEvent": MessageAttemptExhaustedEvent,
    "MessageAttemptExhaustedEventData": MessageAttemptExhaustedEventData,
    "MessageAttemptFailedData": MessageAttemptFailedData,
    "MessageAttemptFailingEvent": MessageAttemptFailingEvent,
    "MessageAttemptFailingEventData": MessageAttemptFailingEventData,
    "MessageAttemptHeadersOut": MessageAttemptHeadersOut,
    "MessageAttemptOut": MessageAttemptOut,
    "MessageAttemptRecoveredEvent": MessageAttemptRecoveredEvent,
    "MessageAttemptRecoveredEventData": MessageAttemptRecoveredEventData,
    "MessageBroadcastIn": MessageBroadcastIn,
    "MessageBroadcastOut": MessageBroadcastOut,
    "MessageEndpointOut": MessageEndpointOut,
    "MessageEventsOut": MessageEventsOut,
    "MessageIn": MessageIn,
    "MessageOut": MessageOut,
    "MessageRawPayloadOut": MessageRawPayloadOut,
    "MessageSubscriberAuthTokenOut": MessageSubscriberAuthTokenOut,
    "OAuthPayloadIn": OAuthPayloadIn,
    "OAuthPayloadOut": OAuthPayloadOut,
    "OneTimeTokenIn": OneTimeTokenIn,
    "OneTimeTokenOut": OneTimeTokenOut,
    "OperationalWebhookEndpointIn": OperationalWebhookEndpointIn,
    "OperationalWebhookEndpointOut": OperationalWebhookEndpointOut,
    "OperationalWebhookEndpointSecretIn": OperationalWebhookEndpointSecretIn,
    "OperationalWebhookEndpointSecretOut": OperationalWebhookEndpointSecretOut,
    "OperationalWebhookEndpointUpdate": OperationalWebhookEndpointUpdate,
    "RecoverIn": RecoverIn,
    "RecoverOut": RecoverOut,
    "RedshiftConfig": RedshiftConfig,
    "ReplayIn": ReplayIn,
    "ReplayOut": ReplayOut,
    "RetryScheduleInOut": RetryScheduleInOut,
    "RotatedUrlOut": RotatedUrlOut,
    "S3Config": S3Config,
    "SettingsIn": SettingsIn,
    "SettingsOut": SettingsOut,
    "SinkHttpConfig": SinkHttpConfig,
    "SinkIn": SinkInClass,
    "SinkInOneOf": SinkInOneOf,
    "SinkInOneOf1": SinkInOneOf1,
    "SinkInOneOf2": SinkInOneOf2,
    "SinkInOneOf3": SinkInOneOf3,
    "SinkOtelV1Config": SinkOtelV1Config,
    "SinkOut": SinkOutClass,
    "SinkTransformIn": SinkTransformIn,
    "SinkTransformationOut": SinkTransformationOut,
    "SnowflakeConfig": SnowflakeConfig,
    "StreamEventTypeIn": StreamEventTypeIn,
    "StreamEventTypeOut": StreamEventTypeOut,
    "StreamEventTypePatch": StreamEventTypePatch,
    "StreamIn": StreamIn,
    "StreamOut": StreamOut,
    "StreamPatch": StreamPatch,
    "StreamSinkIn": StreamSinkInClass,
    "StreamSinkInOneOf": StreamSinkInOneOf,
    "StreamSinkInOneOf1": StreamSinkInOneOf1,
    "StreamSinkInOneOf2": StreamSinkInOneOf2,
    "StreamSinkInOneOf3": StreamSinkInOneOf3,
    "StreamSinkInOneOf4": StreamSinkInOneOf4,
    "StreamSinkInOneOf5": StreamSinkInOneOf5,
    "StreamSinkInOneOf6": StreamSinkInOneOf6,
    "StreamSinkInOneOf7": StreamSinkInOneOf7,
    "StreamSinkOut": StreamSinkOutClass,
    "StreamSinkPatch": StreamSinkPatchClass,
    "TemplateIn": TemplateIn,
    "TemplateOut": TemplateOut,
    "TemplatePatch": TemplatePatch,
    "TemplateUpdate": TemplateUpdate,
    "TransformationSimulateIn": TransformationSimulateIn,
    "TransformationSimulateOut": TransformationSimulateOut,
    "ValidationError": ValidationError,
}

type MimeTypeDescriptor = {
    type: string;
    subtype: string;
    subtypeTokens: string[];
};

/**
 * Every mime-type consists of a type, subtype, and optional parameters.
 * The subtype can be composite, including information about the content format.
 * For example: `application/json-patch+json`, `application/merge-patch+json`.
 *
 * This helper transforms a string mime-type into an internal representation.
 * This simplifies the implementation of predicates that in turn define common rules for parsing or stringifying
 * the payload.
 */
const parseMimeType = (mimeType: string): MimeTypeDescriptor => {
    const [type, subtype] = mimeType.split('/');
    return {
        type,
        subtype,
        subtypeTokens: subtype.split('+'),
    };
};

type MimeTypePredicate = (mimeType: string) => boolean;

// This factory creates a predicate function that checks a string mime-type against defined rules.
const mimeTypePredicateFactory = (predicate: (descriptor: MimeTypeDescriptor) => boolean): MimeTypePredicate => (mimeType) => predicate(parseMimeType(mimeType));

// Use this factory when you need to define a simple predicate based only on type and, if applicable, subtype.
const mimeTypeSimplePredicateFactory = (type: string, subtype?: string): MimeTypePredicate => mimeTypePredicateFactory((descriptor) => {
    if (descriptor.type !== type) return false;
    if (subtype != null && descriptor.subtype !== subtype) return false;
    return true;
});

// Creating a set of named predicates that will help us determine how to handle different mime-types
const isTextLikeMimeType = mimeTypeSimplePredicateFactory('text');
const isJsonMimeType = mimeTypeSimplePredicateFactory('application', 'json');
const isJsonLikeMimeType = mimeTypePredicateFactory((descriptor) => descriptor.type === 'application' && descriptor.subtypeTokens.some((item) => item === 'json'));
const isOctetStreamMimeType = mimeTypeSimplePredicateFactory('application', 'octet-stream');
const isFormUrlencodedMimeType = mimeTypeSimplePredicateFactory('application', 'x-www-form-urlencoded');

// Defining a list of mime-types in the order of prioritization for handling.
const supportedMimeTypePredicatesWithPriority: MimeTypePredicate[] = [
    isJsonMimeType,
    isJsonLikeMimeType,
    isTextLikeMimeType,
    isOctetStreamMimeType,
    isFormUrlencodedMimeType,
];

const nullableSuffix = " | null";
const optionalSuffix = " | undefined";
const arrayPrefix = "Array<";
const arraySuffix = ">";
const mapPrefix = "{ [key: string]: ";
const mapSuffix = "; }";

export class ObjectSerializer {
    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap.has(expectedType)) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    let mapping = typeMap[expectedType].mapping;
                    if (mapping != undefined && mapping[discriminatorType]) {
                        return mapping[discriminatorType]; // use the type given in the discriminator
                    } else if(typeMap[discriminatorType]) {
                        return discriminatorType;
                    } else {
                        return expectedType; // discriminator did not map to a type
                    }
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string, format: string): any {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.endsWith(nullableSuffix)) {
            let subType: string = type.slice(0, -nullableSuffix.length); // Type | null => Type
            return ObjectSerializer.serialize(data, subType, format);
        } else if (type.endsWith(optionalSuffix)) {
            let subType: string = type.slice(0, -optionalSuffix.length); // Type | undefined => Type
            return ObjectSerializer.serialize(data, subType, format);
        } else if (type.startsWith(arrayPrefix)) {
            let subType: string = type.slice(arrayPrefix.length, -arraySuffix.length); // Array<Type> => Type
            let transformedData: any[] = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.serialize(date, subType, format));
            }
            return transformedData;
        } else if (type.startsWith(mapPrefix)) {
            let subType: string = type.slice(mapPrefix.length, -mapSuffix.length); // { [key: string]: Type; } => Type
            let transformedData: { [key: string]: any } = {};
            for (let key in data) {
                transformedData[key] = ObjectSerializer.serialize(
                    data[key],
                    subType,
                    format,
                );
            }
            return transformedData;
        } else if (type === "Date") {
            if (format == "date") {
                let month = data.getMonth()+1
                month = month < 10 ? "0" + month.toString() : month.toString()
                let day = data.getDate();
                day = day < 10 ? "0" + day.toString() : day.toString();

                return data.getFullYear() + "-" + month + "-" + day;
            } else {
                return data.toISOString();
            }
        } else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // Get the actual type of this object
            type = this.findCorrectType(data, type);

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let attributeType of attributeTypes) {
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string, format: string): any {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.endsWith(nullableSuffix)) {
            let subType: string = type.slice(0, -nullableSuffix.length); // Type | null => Type
            return ObjectSerializer.deserialize(data, subType, format);
        } else if (type.endsWith(optionalSuffix)) {
            let subType: string = type.slice(0, -optionalSuffix.length); // Type | undefined => Type
            return ObjectSerializer.deserialize(data, subType, format);
        } else if (type.startsWith(arrayPrefix)) {
            let subType: string = type.slice(arrayPrefix.length, -arraySuffix.length); // Array<Type> => Type
            let transformedData: any[] = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.deserialize(date, subType, format));
            }
            return transformedData;
        } else if (type.startsWith(mapPrefix)) {
            let subType: string = type.slice(mapPrefix.length, -mapSuffix.length); // { [key: string]: Type; } => Type
            let transformedData: { [key: string]: any } = {};
            for (let key in data) {
                transformedData[key] = ObjectSerializer.deserialize(
                    data[key],
                    subType,
                    format,
                );
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap.has(type)) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let attributeType of attributeTypes) {
                let value = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
                if (value !== undefined) {
                    instance[attributeType.name] = value;
                }
            }
            return instance;
        }
    }


    /**
     * Normalize media type
     *
     * We currently do not handle any media types attributes, i.e. anything
     * after a semicolon. All content is assumed to be UTF-8 compatible.
     */
    public static normalizeMediaType(mediaType: string | undefined): string | undefined {
        if (mediaType === undefined) {
            return undefined;
        }
        return mediaType.split(";")[0].trim().toLowerCase();
    }

    /**
     * From a list of possible media types, choose the one we can handle best.
     *
     * The order of the given media types does not have any impact on the choice
     * made.
     */
    public static getPreferredMediaType(mediaTypes: Array<string>): string {
        /** According to OAS 3 we should default to json */
        if (mediaTypes.length === 0) {
            return "application/json";
        }

        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);

        for (const predicate of supportedMimeTypePredicatesWithPriority) {
            for (const mediaType of normalMediaTypes) {
                if (mediaType != null && predicate(mediaType)) {
                    return mediaType;
                }
            }
        }

        throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
    }

    /**
     * Convert data to a string according the given media type
     */
    public static stringify(data: any, mediaType: string): string {
        if (isTextLikeMimeType(mediaType)) {
            return String(data);
        }

        if (isJsonLikeMimeType(mediaType)) {
            return JSON.stringify(data);
        }

        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
    }

    /**
     * Parse data from a string according to the given media type
     */
    public static parse(rawData: string, mediaType: string | undefined) {
        if (mediaType === undefined) {
            throw new Error("Cannot parse content. No Content-Type defined.");
        }

        if (isTextLikeMimeType(mediaType)) {
            return rawData;
        }

        if (isJsonLikeMimeType(mediaType)) {
            return JSON.parse(rawData);
        }

        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
    }
}

/**
 * Svix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CustomColorPalette } from '../models/CustomColorPalette';
import { CustomStringsOverride } from '../models/CustomStringsOverride';
import { CustomThemeOverride } from '../models/CustomThemeOverride';
import { HttpFile } from '../http/http';

export class EnvironmentSettingsOut {
    'colorPaletteDark'?: CustomColorPalette;
    'colorPaletteLight'?: CustomColorPalette;
    'customColor'?: string | null;
    'customFontFamily'?: string | null;
    'customFontFamilyUrl'?: string | null;
    'customLogoUrl'?: string | null;
    'customStringsOverride'?: CustomStringsOverride;
    'customThemeOverride'?: CustomThemeOverride;
    'displayName'?: string | null;
    'enableChannels'?: boolean;
    'enableIntegrationManagement'?: boolean;
    'enableMessageTags'?: boolean;
    'enableTransformations'?: boolean;
    'showUseSvixPlay'?: boolean;
    'wipeSuccessfulPayload'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "colorPaletteDark",
            "baseName": "colorPaletteDark",
            "type": "CustomColorPalette",
            "format": ""
        },
        {
            "name": "colorPaletteLight",
            "baseName": "colorPaletteLight",
            "type": "CustomColorPalette",
            "format": ""
        },
        {
            "name": "customColor",
            "baseName": "customColor",
            "type": "string",
            "format": "color"
        },
        {
            "name": "customFontFamily",
            "baseName": "customFontFamily",
            "type": "string",
            "format": ""
        },
        {
            "name": "customFontFamilyUrl",
            "baseName": "customFontFamilyUrl",
            "type": "string",
            "format": "uri"
        },
        {
            "name": "customLogoUrl",
            "baseName": "customLogoUrl",
            "type": "string",
            "format": "uri"
        },
        {
            "name": "customStringsOverride",
            "baseName": "customStringsOverride",
            "type": "CustomStringsOverride",
            "format": ""
        },
        {
            "name": "customThemeOverride",
            "baseName": "customThemeOverride",
            "type": "CustomThemeOverride",
            "format": ""
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string",
            "format": ""
        },
        {
            "name": "enableChannels",
            "baseName": "enableChannels",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "enableIntegrationManagement",
            "baseName": "enableIntegrationManagement",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "enableMessageTags",
            "baseName": "enableMessageTags",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "enableTransformations",
            "baseName": "enableTransformations",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "showUseSvixPlay",
            "baseName": "showUseSvixPlay",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "wipeSuccessfulPayload",
            "baseName": "wipeSuccessfulPayload",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return EnvironmentSettingsOut.attributeTypeMap;
    }

    public constructor() {
    }
}

import { ResponseContext, RequestContext, HttpFile, HttpInfo } from '../http/http';
import { Configuration} from '../configuration'

import { AggregateEventTypesOut } from '../models/AggregateEventTypesOut';
import { AppPortalAccessIn } from '../models/AppPortalAccessIn';
import { AppPortalAccessOut } from '../models/AppPortalAccessOut';
import { AppUsageStatsIn } from '../models/AppUsageStatsIn';
import { AppUsageStatsOut } from '../models/AppUsageStatsOut';
import { ApplicationIn } from '../models/ApplicationIn';
import { ApplicationOut } from '../models/ApplicationOut';
import { ApplicationPatch } from '../models/ApplicationPatch';
import { ApplicationStats } from '../models/ApplicationStats';
import { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';
import { AttemptStatisticsData } from '../models/AttemptStatisticsData';
import { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';
import { AuthTokenOut } from '../models/AuthTokenOut';
import { AzureBlobStorageConfig } from '../models/AzureBlobStorageConfig';
import { BackgroundTaskOut } from '../models/BackgroundTaskOut';
import { BackgroundTaskStatus } from '../models/BackgroundTaskStatus';
import { BackgroundTaskType } from '../models/BackgroundTaskType';
import { BigQueryConfig } from '../models/BigQueryConfig';
import { BorderRadiusConfig } from '../models/BorderRadiusConfig';
import { BorderRadiusEnum } from '../models/BorderRadiusEnum';
import { ClientSecretJwtParamsIn } from '../models/ClientSecretJwtParamsIn';
import { CompletionChoice } from '../models/CompletionChoice';
import { CompletionMessage } from '../models/CompletionMessage';
import { CreateMessageTokenIn } from '../models/CreateMessageTokenIn';
import { CreateStreamIn } from '../models/CreateStreamIn';
import { CustomColorPalette } from '../models/CustomColorPalette';
import { CustomStringsOverride } from '../models/CustomStringsOverride';
import { CustomThemeOverride } from '../models/CustomThemeOverride';
import { DashboardAccessOut } from '../models/DashboardAccessOut';
import { Duration } from '../models/Duration';
import { EndpointCreatedEvent } from '../models/EndpointCreatedEvent';
import { EndpointCreatedEventData } from '../models/EndpointCreatedEventData';
import { EndpointDeletedEvent } from '../models/EndpointDeletedEvent';
import { EndpointDeletedEventData } from '../models/EndpointDeletedEventData';
import { EndpointDisabledEvent } from '../models/EndpointDisabledEvent';
import { EndpointDisabledEventData } from '../models/EndpointDisabledEventData';
import { EndpointHeadersIn } from '../models/EndpointHeadersIn';
import { EndpointHeadersOut } from '../models/EndpointHeadersOut';
import { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';
import { EndpointIn } from '../models/EndpointIn';
import { EndpointMessageOut } from '../models/EndpointMessageOut';
import { EndpointMtlsConfigIn } from '../models/EndpointMtlsConfigIn';
import { EndpointOauthConfigIn } from '../models/EndpointOauthConfigIn';
import { EndpointOut } from '../models/EndpointOut';
import { EndpointPatch } from '../models/EndpointPatch';
import { EndpointSecretOut } from '../models/EndpointSecretOut';
import { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';
import { EndpointStats } from '../models/EndpointStats';
import { EndpointTransformationIn } from '../models/EndpointTransformationIn';
import { EndpointTransformationOut } from '../models/EndpointTransformationOut';
import { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';
import { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';
import { EndpointUpdate } from '../models/EndpointUpdate';
import { EndpointUpdatedEvent } from '../models/EndpointUpdatedEvent';
import { EndpointUpdatedEventData } from '../models/EndpointUpdatedEventData';
import { EnvironmentIn } from '../models/EnvironmentIn';
import { EnvironmentOut } from '../models/EnvironmentOut';
import { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';
import { EventExampleIn } from '../models/EventExampleIn';
import { EventIn } from '../models/EventIn';
import { EventOut } from '../models/EventOut';
import { EventStreamOut } from '../models/EventStreamOut';
import { EventTypeExampleOut } from '../models/EventTypeExampleOut';
import { EventTypeFromOpenApi } from '../models/EventTypeFromOpenApi';
import { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';
import { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';
import { EventTypeImportOpenApiOutData } from '../models/EventTypeImportOpenApiOutData';
import { EventTypeIn } from '../models/EventTypeIn';
import { EventTypeOut } from '../models/EventTypeOut';
import { EventTypePatch } from '../models/EventTypePatch';
import { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';
import { EventTypeUpdate } from '../models/EventTypeUpdate';
import { ExportEventTypeOut } from '../models/ExportEventTypeOut';
import { FontSizeConfig } from '../models/FontSizeConfig';
import { GenerateIn } from '../models/GenerateIn';
import { GenerateOut } from '../models/GenerateOut';
import { GoogleCloudStorageConfig } from '../models/GoogleCloudStorageConfig';
import { HTTPValidationError } from '../models/HTTPValidationError';
import { HttpErrorOut } from '../models/HttpErrorOut';
import { HubspotOauthConfigIn } from '../models/HubspotOauthConfigIn';
import { InboundPathParams } from '../models/InboundPathParams';
import { IncomingWebhookPayloadOut } from '../models/IncomingWebhookPayloadOut';
import { IntegrationIn } from '../models/IntegrationIn';
import { IntegrationKeyOut } from '../models/IntegrationKeyOut';
import { IntegrationOut } from '../models/IntegrationOut';
import { IntegrationUpdate } from '../models/IntegrationUpdate';
import { KafkaSecurityProtocolType } from '../models/KafkaSecurityProtocolType';
import { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';
import { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';
import { ListResponseBackgroundTaskOut } from '../models/ListResponseBackgroundTaskOut';
import { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';
import { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';
import { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';
import { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';
import { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';
import { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';
import { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';
import { ListResponseMessageOut } from '../models/ListResponseMessageOut';
import { ListResponseOperationalWebhookEndpointOut } from '../models/ListResponseOperationalWebhookEndpointOut';
import { ListResponseSinkOut } from '../models/ListResponseSinkOut';
import { ListResponseStreamEventTypeOut } from '../models/ListResponseStreamEventTypeOut';
import { ListResponseStreamOut } from '../models/ListResponseStreamOut';
import { ListResponseStreamSinkOut } from '../models/ListResponseStreamSinkOut';
import { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';
import { MessageAttemptEndpointOut } from '../models/MessageAttemptEndpointOut';
import { MessageAttemptExhaustedEvent } from '../models/MessageAttemptExhaustedEvent';
import { MessageAttemptExhaustedEventData } from '../models/MessageAttemptExhaustedEventData';
import { MessageAttemptFailedData } from '../models/MessageAttemptFailedData';
import { MessageAttemptFailingEvent } from '../models/MessageAttemptFailingEvent';
import { MessageAttemptFailingEventData } from '../models/MessageAttemptFailingEventData';
import { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';
import { MessageAttemptOut } from '../models/MessageAttemptOut';
import { MessageAttemptRecoveredEvent } from '../models/MessageAttemptRecoveredEvent';
import { MessageAttemptRecoveredEventData } from '../models/MessageAttemptRecoveredEventData';
import { MessageAttemptTriggerType } from '../models/MessageAttemptTriggerType';
import { MessageBroadcastIn } from '../models/MessageBroadcastIn';
import { MessageBroadcastOut } from '../models/MessageBroadcastOut';
import { MessageEndpointOut } from '../models/MessageEndpointOut';
import { MessageEventsOut } from '../models/MessageEventsOut';
import { MessageIn } from '../models/MessageIn';
import { MessageOut } from '../models/MessageOut';
import { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';
import { MessageStatus } from '../models/MessageStatus';
import { MessageSubscriberAuthTokenOut } from '../models/MessageSubscriberAuthTokenOut';
import { OAuthPayloadIn } from '../models/OAuthPayloadIn';
import { OAuthPayloadOut } from '../models/OAuthPayloadOut';
import { Oauth2AuthMethodIn } from '../models/Oauth2AuthMethodIn';
import { Oauth2GrantTypeIn } from '../models/Oauth2GrantTypeIn';
import { OauthJwsSigningAlgorithm } from '../models/OauthJwsSigningAlgorithm';
import { OneTimeTokenIn } from '../models/OneTimeTokenIn';
import { OneTimeTokenOut } from '../models/OneTimeTokenOut';
import { OperationalWebhookEndpointIn } from '../models/OperationalWebhookEndpointIn';
import { OperationalWebhookEndpointOut } from '../models/OperationalWebhookEndpointOut';
import { OperationalWebhookEndpointSecretIn } from '../models/OperationalWebhookEndpointSecretIn';
import { OperationalWebhookEndpointSecretOut } from '../models/OperationalWebhookEndpointSecretOut';
import { OperationalWebhookEndpointUpdate } from '../models/OperationalWebhookEndpointUpdate';
import { Ordering } from '../models/Ordering';
import { RecoverIn } from '../models/RecoverIn';
import { RecoverOut } from '../models/RecoverOut';
import { RedshiftConfig } from '../models/RedshiftConfig';
import { ReplayIn } from '../models/ReplayIn';
import { ReplayOut } from '../models/ReplayOut';
import { RetryScheduleInOut } from '../models/RetryScheduleInOut';
import { RotatedUrlOut } from '../models/RotatedUrlOut';
import { S3Config } from '../models/S3Config';
import { SettingsIn } from '../models/SettingsIn';
import { SettingsOut } from '../models/SettingsOut';
import { SinkHttpConfig } from '../models/SinkHttpConfig';
import { SinkIn } from '../models/SinkIn';
import { SinkInOneOf } from '../models/SinkInOneOf';
import { SinkInOneOf1 } from '../models/SinkInOneOf1';
import { SinkInOneOf2 } from '../models/SinkInOneOf2';
import { SinkInOneOf3 } from '../models/SinkInOneOf3';
import { SinkOtelV1Config } from '../models/SinkOtelV1Config';
import { SinkOut } from '../models/SinkOut';
import { SinkPayloadFormat } from '../models/SinkPayloadFormat';
import { SinkStatus } from '../models/SinkStatus';
import { SinkStatusIn } from '../models/SinkStatusIn';
import { SinkTransformIn } from '../models/SinkTransformIn';
import { SinkTransformationOut } from '../models/SinkTransformationOut';
import { SnowflakeConfig } from '../models/SnowflakeConfig';
import { StatisticsPeriod } from '../models/StatisticsPeriod';
import { StatusCodeClass } from '../models/StatusCodeClass';
import { StreamEventTypeIn } from '../models/StreamEventTypeIn';
import { StreamEventTypeOut } from '../models/StreamEventTypeOut';
import { StreamEventTypePatch } from '../models/StreamEventTypePatch';
import { StreamIn } from '../models/StreamIn';
import { StreamOut } from '../models/StreamOut';
import { StreamPatch } from '../models/StreamPatch';
import { StreamSinkIn } from '../models/StreamSinkIn';
import { StreamSinkInOneOf } from '../models/StreamSinkInOneOf';
import { StreamSinkInOneOf1 } from '../models/StreamSinkInOneOf1';
import { StreamSinkInOneOf2 } from '../models/StreamSinkInOneOf2';
import { StreamSinkInOneOf3 } from '../models/StreamSinkInOneOf3';
import { StreamSinkInOneOf4 } from '../models/StreamSinkInOneOf4';
import { StreamSinkInOneOf5 } from '../models/StreamSinkInOneOf5';
import { StreamSinkInOneOf6 } from '../models/StreamSinkInOneOf6';
import { StreamSinkInOneOf7 } from '../models/StreamSinkInOneOf7';
import { StreamSinkOut } from '../models/StreamSinkOut';
import { StreamSinkPatch } from '../models/StreamSinkPatch';
import { TemplateIn } from '../models/TemplateIn';
import { TemplateOut } from '../models/TemplateOut';
import { TemplatePatch } from '../models/TemplatePatch';
import { TemplateUpdate } from '../models/TemplateUpdate';
import { TransformationHttpMethod } from '../models/TransformationHttpMethod';
import { TransformationSimulateIn } from '../models/TransformationSimulateIn';
import { TransformationSimulateOut } from '../models/TransformationSimulateOut';
import { TransformationTemplateKind } from '../models/TransformationTemplateKind';
import { ValidationError } from '../models/ValidationError';

import { ObservableApplicationApi } from "./ObservableAPI";
import { ApplicationApiRequestFactory, ApplicationApiResponseProcessor} from "../apis/ApplicationApi";

export interface ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest {
    /**
     * Filter the range to data after this date
     * Defaults to: undefined
     * @type Date
     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet
     */
    since: Date
    /**
     * Filter the range to data before this date
     * Defaults to: undefined
     * @type Date
     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet
     */
    until: Date
    /**
     * Limit the number of returned items
     * Maximum: 250
     * Defaults to: 50
     * @type number
     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet
     */
    limit?: number
    /**
     * The iterator to use (depends on the chosen ordering)
     * Defaults to: undefined
     * @type string
     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet
     */
    iterator?: string
}

export interface ApplicationApiV1ApplicationCreateRequest {
    /**
     * 
     * @type ApplicationIn
     * @memberof ApplicationApiv1ApplicationCreate
     */
    applicationIn: ApplicationIn
    /**
     * Get an existing application, or create a new one if doesn\&#39;t exist. It\&#39;s two separate functions in the libs.
     * Defaults to: false
     * @type boolean
     * @memberof ApplicationApiv1ApplicationCreate
     */
    getIfExists?: boolean
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof ApplicationApiv1ApplicationCreate
     */
    idempotencyKey?: string
}

export interface ApplicationApiV1ApplicationDeleteRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof ApplicationApiv1ApplicationDelete
     */
    appId: string
}

export interface ApplicationApiV1ApplicationGetRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof ApplicationApiv1ApplicationGet
     */
    appId: string
}

export interface ApplicationApiV1ApplicationGetStatsRequest {
    /**
     * Filter the range to data starting from this date
     * Defaults to: undefined
     * @type Date
     * @memberof ApplicationApiv1ApplicationGetStats
     */
    since: Date
    /**
     * Filter the range to data ending by this date
     * Defaults to: undefined
     * @type Date
     * @memberof ApplicationApiv1ApplicationGetStats
     */
    until: Date
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof ApplicationApiv1ApplicationGetStats
     */
    appId: string
}

export interface ApplicationApiV1ApplicationListRequest {
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof ApplicationApiv1ApplicationList
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof ApplicationApiv1ApplicationList
     */
    iterator?: string
    /**
     * The sorting order of the returned items
     * Defaults to: undefined
     * @type Ordering
     * @memberof ApplicationApiv1ApplicationList
     */
    order?: Ordering
}

export interface ApplicationApiV1ApplicationPatchRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof ApplicationApiv1ApplicationPatch
     */
    appId: string
    /**
     * 
     * @type ApplicationPatch
     * @memberof ApplicationApiv1ApplicationPatch
     */
    applicationPatch: ApplicationPatch
}

export interface ApplicationApiV1ApplicationUpdateRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof ApplicationApiv1ApplicationUpdate
     */
    appId: string
    /**
     * 
     * @type ApplicationIn
     * @memberof ApplicationApiv1ApplicationUpdate
     */
    applicationIn: ApplicationIn
}

export class ObjectApplicationApi {
    private api: ObservableApplicationApi

    public constructor(configuration: Configuration, requestFactory?: ApplicationApiRequestFactory, responseProcessor?: ApplicationApiResponseProcessor) {
        this.api = new ObservableApplicationApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Get basic statistics for all applications.
     * Get App Usage Stats
     * @param param the request object
     */
    public getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(param: ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest, options?: Configuration): Promise<HttpInfo<ListResponseApplicationStats>> {
        return this.api.getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(param.since, param.until, param.limit, param.iterator,  options).toPromise();
    }

    /**
     * Get basic statistics for all applications.
     * Get App Usage Stats
     * @param param the request object
     */
    public getAppUsageStatsApiV1AppStatsUsageGet(param: ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest, options?: Configuration): Promise<ListResponseApplicationStats> {
        return this.api.getAppUsageStatsApiV1AppStatsUsageGet(param.since, param.until, param.limit, param.iterator,  options).toPromise();
    }

    /**
     * Create a new application.
     * Create Application
     * @param param the request object
     */
    public v1ApplicationCreateWithHttpInfo(param: ApplicationApiV1ApplicationCreateRequest, options?: Configuration): Promise<HttpInfo<ApplicationOut>> {
        return this.api.v1ApplicationCreateWithHttpInfo(param.applicationIn, param.getIfExists, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Create a new application.
     * Create Application
     * @param param the request object
     */
    public v1ApplicationCreate(param: ApplicationApiV1ApplicationCreateRequest, options?: Configuration): Promise<ApplicationOut> {
        return this.api.v1ApplicationCreate(param.applicationIn, param.getIfExists, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Delete an application.
     * Delete Application
     * @param param the request object
     */
    public v1ApplicationDeleteWithHttpInfo(param: ApplicationApiV1ApplicationDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1ApplicationDeleteWithHttpInfo(param.appId,  options).toPromise();
    }

    /**
     * Delete an application.
     * Delete Application
     * @param param the request object
     */
    public v1ApplicationDelete(param: ApplicationApiV1ApplicationDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.v1ApplicationDelete(param.appId,  options).toPromise();
    }

    /**
     * Get an application.
     * Get Application
     * @param param the request object
     */
    public v1ApplicationGetWithHttpInfo(param: ApplicationApiV1ApplicationGetRequest, options?: Configuration): Promise<HttpInfo<ApplicationOut>> {
        return this.api.v1ApplicationGetWithHttpInfo(param.appId,  options).toPromise();
    }

    /**
     * Get an application.
     * Get Application
     * @param param the request object
     */
    public v1ApplicationGet(param: ApplicationApiV1ApplicationGetRequest, options?: Configuration): Promise<ApplicationOut> {
        return this.api.v1ApplicationGet(param.appId,  options).toPromise();
    }

    /**
     * Get basic statistics for the application
     * Get App Stats
     * @param param the request object
     */
    public v1ApplicationGetStatsWithHttpInfo(param: ApplicationApiV1ApplicationGetStatsRequest, options?: Configuration): Promise<HttpInfo<ApplicationStats>> {
        return this.api.v1ApplicationGetStatsWithHttpInfo(param.since, param.until, param.appId,  options).toPromise();
    }

    /**
     * Get basic statistics for the application
     * Get App Stats
     * @param param the request object
     */
    public v1ApplicationGetStats(param: ApplicationApiV1ApplicationGetStatsRequest, options?: Configuration): Promise<ApplicationStats> {
        return this.api.v1ApplicationGetStats(param.since, param.until, param.appId,  options).toPromise();
    }

    /**
     * List of all the organization\'s applications.
     * List Applications
     * @param param the request object
     */
    public v1ApplicationListWithHttpInfo(param: ApplicationApiV1ApplicationListRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseApplicationOut>> {
        return this.api.v1ApplicationListWithHttpInfo(param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * List of all the organization\'s applications.
     * List Applications
     * @param param the request object
     */
    public v1ApplicationList(param: ApplicationApiV1ApplicationListRequest = {}, options?: Configuration): Promise<ListResponseApplicationOut> {
        return this.api.v1ApplicationList(param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * Partially update an application.
     * Patch Application
     * @param param the request object
     */
    public v1ApplicationPatchWithHttpInfo(param: ApplicationApiV1ApplicationPatchRequest, options?: Configuration): Promise<HttpInfo<ApplicationOut>> {
        return this.api.v1ApplicationPatchWithHttpInfo(param.appId, param.applicationPatch,  options).toPromise();
    }

    /**
     * Partially update an application.
     * Patch Application
     * @param param the request object
     */
    public v1ApplicationPatch(param: ApplicationApiV1ApplicationPatchRequest, options?: Configuration): Promise<ApplicationOut> {
        return this.api.v1ApplicationPatch(param.appId, param.applicationPatch,  options).toPromise();
    }

    /**
     * Update an application.
     * Update Application
     * @param param the request object
     */
    public v1ApplicationUpdateWithHttpInfo(param: ApplicationApiV1ApplicationUpdateRequest, options?: Configuration): Promise<HttpInfo<ApplicationOut>> {
        return this.api.v1ApplicationUpdateWithHttpInfo(param.appId, param.applicationIn,  options).toPromise();
    }

    /**
     * Update an application.
     * Update Application
     * @param param the request object
     */
    public v1ApplicationUpdate(param: ApplicationApiV1ApplicationUpdateRequest, options?: Configuration): Promise<ApplicationOut> {
        return this.api.v1ApplicationUpdate(param.appId, param.applicationIn,  options).toPromise();
    }

}

import { ObservableAuthenticationApi } from "./ObservableAPI";
import { AuthenticationApiRequestFactory, AuthenticationApiResponseProcessor} from "../apis/AuthenticationApi";

export interface AuthenticationApiV1AuthenticationAppPortalAccessRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof AuthenticationApiv1AuthenticationAppPortalAccess
     */
    appId: string
    /**
     * 
     * @type AppPortalAccessIn
     * @memberof AuthenticationApiv1AuthenticationAppPortalAccess
     */
    appPortalAccessIn: AppPortalAccessIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof AuthenticationApiv1AuthenticationAppPortalAccess
     */
    idempotencyKey?: string
}

export interface AuthenticationApiV1AuthenticationCreateMessageTokenRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof AuthenticationApiv1AuthenticationCreateMessageToken
     */
    appId: string
    /**
     * 
     * @type CreateMessageTokenIn
     * @memberof AuthenticationApiv1AuthenticationCreateMessageToken
     */
    createMessageTokenIn: CreateMessageTokenIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof AuthenticationApiv1AuthenticationCreateMessageToken
     */
    idempotencyKey?: string
}

export interface AuthenticationApiV1AuthenticationDashboardAccessRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof AuthenticationApiv1AuthenticationDashboardAccess
     */
    appId: string
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof AuthenticationApiv1AuthenticationDashboardAccess
     */
    idempotencyKey?: string
}

export interface AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest {
    /**
     * 
     * @type OneTimeTokenIn
     * @memberof AuthenticationApiv1AuthenticationExchangeOneTimeToken
     */
    oneTimeTokenIn: OneTimeTokenIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof AuthenticationApiv1AuthenticationExchangeOneTimeToken
     */
    idempotencyKey?: string
}

export interface AuthenticationApiV1AuthenticationExpireAllRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof AuthenticationApiv1AuthenticationExpireAll
     */
    appId: string
    /**
     * 
     * @type ApplicationTokenExpireIn
     * @memberof AuthenticationApiv1AuthenticationExpireAll
     */
    applicationTokenExpireIn: ApplicationTokenExpireIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof AuthenticationApiv1AuthenticationExpireAll
     */
    idempotencyKey?: string
}

export interface AuthenticationApiV1AuthenticationLogoutRequest {
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof AuthenticationApiv1AuthenticationLogout
     */
    idempotencyKey?: string
}

export class ObjectAuthenticationApi {
    private api: ObservableAuthenticationApi

    public constructor(configuration: Configuration, requestFactory?: AuthenticationApiRequestFactory, responseProcessor?: AuthenticationApiResponseProcessor) {
        this.api = new ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * Get Consumer App Portal Access
     * @param param the request object
     */
    public v1AuthenticationAppPortalAccessWithHttpInfo(param: AuthenticationApiV1AuthenticationAppPortalAccessRequest, options?: Configuration): Promise<HttpInfo<AppPortalAccessOut>> {
        return this.api.v1AuthenticationAppPortalAccessWithHttpInfo(param.appId, param.appPortalAccessIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * Get Consumer App Portal Access
     * @param param the request object
     */
    public v1AuthenticationAppPortalAccess(param: AuthenticationApiV1AuthenticationAppPortalAccessRequest, options?: Configuration): Promise<AppPortalAccessOut> {
        return this.api.v1AuthenticationAppPortalAccess(param.appId, param.appPortalAccessIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Create a new access token that only allows creating messages inside this application.
     * Create Cmg Token
     * @param param the request object
     */
    public v1AuthenticationCreateMessageTokenWithHttpInfo(param: AuthenticationApiV1AuthenticationCreateMessageTokenRequest, options?: Configuration): Promise<HttpInfo<AuthTokenOut>> {
        return this.api.v1AuthenticationCreateMessageTokenWithHttpInfo(param.appId, param.createMessageTokenIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Create a new access token that only allows creating messages inside this application.
     * Create Cmg Token
     * @param param the request object
     */
    public v1AuthenticationCreateMessageToken(param: AuthenticationApiV1AuthenticationCreateMessageTokenRequest, options?: Configuration): Promise<AuthTokenOut> {
        return this.api.v1AuthenticationCreateMessageToken(param.appId, param.createMessageTokenIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * DEPRECATED: Please use `app-portal-access` instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * Dashboard Access
     * @param param the request object
     */
    public v1AuthenticationDashboardAccessWithHttpInfo(param: AuthenticationApiV1AuthenticationDashboardAccessRequest, options?: Configuration): Promise<HttpInfo<DashboardAccessOut>> {
        return this.api.v1AuthenticationDashboardAccessWithHttpInfo(param.appId, param.idempotencyKey,  options).toPromise();
    }

    /**
     * DEPRECATED: Please use `app-portal-access` instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * Dashboard Access
     * @param param the request object
     */
    public v1AuthenticationDashboardAccess(param: AuthenticationApiV1AuthenticationDashboardAccessRequest, options?: Configuration): Promise<DashboardAccessOut> {
        return this.api.v1AuthenticationDashboardAccess(param.appId, param.idempotencyKey,  options).toPromise();
    }

    /**
     * This is a one time token
     * Exchange One Time Token
     * @param param the request object
     */
    public v1AuthenticationExchangeOneTimeTokenWithHttpInfo(param: AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest, options?: Configuration): Promise<HttpInfo<OneTimeTokenOut>> {
        return this.api.v1AuthenticationExchangeOneTimeTokenWithHttpInfo(param.oneTimeTokenIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * This is a one time token
     * Exchange One Time Token
     * @param param the request object
     */
    public v1AuthenticationExchangeOneTimeToken(param: AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest, options?: Configuration): Promise<OneTimeTokenOut> {
        return this.api.v1AuthenticationExchangeOneTimeToken(param.oneTimeTokenIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Expire all of the tokens associated with a specific Application
     * Expire All
     * @param param the request object
     */
    public v1AuthenticationExpireAllWithHttpInfo(param: AuthenticationApiV1AuthenticationExpireAllRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1AuthenticationExpireAllWithHttpInfo(param.appId, param.applicationTokenExpireIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Expire all of the tokens associated with a specific Application
     * Expire All
     * @param param the request object
     */
    public v1AuthenticationExpireAll(param: AuthenticationApiV1AuthenticationExpireAllRequest, options?: Configuration): Promise<void> {
        return this.api.v1AuthenticationExpireAll(param.appId, param.applicationTokenExpireIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Logout an app token.  Trying to log out other tokens will fail.
     * Logout
     * @param param the request object
     */
    public v1AuthenticationLogoutWithHttpInfo(param: AuthenticationApiV1AuthenticationLogoutRequest = {}, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1AuthenticationLogoutWithHttpInfo(param.idempotencyKey,  options).toPromise();
    }

    /**
     * Logout an app token.  Trying to log out other tokens will fail.
     * Logout
     * @param param the request object
     */
    public v1AuthenticationLogout(param: AuthenticationApiV1AuthenticationLogoutRequest = {}, options?: Configuration): Promise<void> {
        return this.api.v1AuthenticationLogout(param.idempotencyKey,  options).toPromise();
    }

}

import { ObservableBackgroundTasksApi } from "./ObservableAPI";
import { BackgroundTasksApiRequestFactory, BackgroundTasksApiResponseProcessor} from "../apis/BackgroundTasksApi";

export interface BackgroundTasksApiGetBackgroundTaskRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof BackgroundTasksApigetBackgroundTask
     */
    taskId: string
}

export interface BackgroundTasksApiListBackgroundTasksRequest {
    /**
     * Filter the response based on the status
     * Defaults to: undefined
     * @type BackgroundTaskStatus
     * @memberof BackgroundTasksApilistBackgroundTasks
     */
    status?: BackgroundTaskStatus
    /**
     * Filter the response based on the type
     * Defaults to: undefined
     * @type BackgroundTaskType
     * @memberof BackgroundTasksApilistBackgroundTasks
     */
    task?: BackgroundTaskType
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof BackgroundTasksApilistBackgroundTasks
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof BackgroundTasksApilistBackgroundTasks
     */
    iterator?: string
    /**
     * The sorting order of the returned items
     * Defaults to: undefined
     * @type Ordering
     * @memberof BackgroundTasksApilistBackgroundTasks
     */
    order?: Ordering
}

export class ObjectBackgroundTasksApi {
    private api: ObservableBackgroundTasksApi

    public constructor(configuration: Configuration, requestFactory?: BackgroundTasksApiRequestFactory, responseProcessor?: BackgroundTasksApiResponseProcessor) {
        this.api = new ObservableBackgroundTasksApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Get a background task by ID.
     * Get Background Task
     * @param param the request object
     */
    public getBackgroundTaskWithHttpInfo(param: BackgroundTasksApiGetBackgroundTaskRequest, options?: Configuration): Promise<HttpInfo<BackgroundTaskOut>> {
        return this.api.getBackgroundTaskWithHttpInfo(param.taskId,  options).toPromise();
    }

    /**
     * Get a background task by ID.
     * Get Background Task
     * @param param the request object
     */
    public getBackgroundTask(param: BackgroundTasksApiGetBackgroundTaskRequest, options?: Configuration): Promise<BackgroundTaskOut> {
        return this.api.getBackgroundTask(param.taskId,  options).toPromise();
    }

    /**
     * List background tasks executed in the past 90 days.
     * List Background Tasks
     * @param param the request object
     */
    public listBackgroundTasksWithHttpInfo(param: BackgroundTasksApiListBackgroundTasksRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseBackgroundTaskOut>> {
        return this.api.listBackgroundTasksWithHttpInfo(param.status, param.task, param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * List background tasks executed in the past 90 days.
     * List Background Tasks
     * @param param the request object
     */
    public listBackgroundTasks(param: BackgroundTasksApiListBackgroundTasksRequest = {}, options?: Configuration): Promise<ListResponseBackgroundTaskOut> {
        return this.api.listBackgroundTasks(param.status, param.task, param.limit, param.iterator, param.order,  options).toPromise();
    }

}

import { ObservableBroadcastApi } from "./ObservableAPI";
import { BroadcastApiRequestFactory, BroadcastApiResponseProcessor} from "../apis/BroadcastApi";

export interface BroadcastApiCreateBroadcastMessageRequest {
    /**
     * 
     * @type MessageBroadcastIn
     * @memberof BroadcastApicreateBroadcastMessage
     */
    messageBroadcastIn: MessageBroadcastIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof BroadcastApicreateBroadcastMessage
     */
    idempotencyKey?: string
}

export class ObjectBroadcastApi {
    private api: ObservableBroadcastApi

    public constructor(configuration: Configuration, requestFactory?: BroadcastApiRequestFactory, responseProcessor?: BroadcastApiResponseProcessor) {
        this.api = new ObservableBroadcastApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Creates a background task to send the same message to each application in your organization
     * Create Broadcast Message
     * @param param the request object
     */
    public createBroadcastMessageWithHttpInfo(param: BroadcastApiCreateBroadcastMessageRequest, options?: Configuration): Promise<HttpInfo<MessageBroadcastOut>> {
        return this.api.createBroadcastMessageWithHttpInfo(param.messageBroadcastIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Creates a background task to send the same message to each application in your organization
     * Create Broadcast Message
     * @param param the request object
     */
    public createBroadcastMessage(param: BroadcastApiCreateBroadcastMessageRequest, options?: Configuration): Promise<MessageBroadcastOut> {
        return this.api.createBroadcastMessage(param.messageBroadcastIn, param.idempotencyKey,  options).toPromise();
    }

}

import { ObservableEndpointApi } from "./ObservableAPI";
import { EndpointApiRequestFactory, EndpointApiResponseProcessor} from "../apis/EndpointApi";

export interface EndpointApiV1EndpointCreateRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointCreate
     */
    appId: string
    /**
     * 
     * @type EndpointIn
     * @memberof EndpointApiv1EndpointCreate
     */
    endpointIn: EndpointIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointCreate
     */
    idempotencyKey?: string
}

export interface EndpointApiV1EndpointDeleteRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointDelete
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointDelete
     */
    endpointId: string
}

export interface EndpointApiV1EndpointDeleteMtlsConfigRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointDeleteMtlsConfig
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointDeleteMtlsConfig
     */
    endpointId: string
}

export interface EndpointApiV1EndpointDeleteOauthConfigRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointDeleteOauthConfig
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointDeleteOauthConfig
     */
    endpointId: string
}

export interface EndpointApiV1EndpointGetRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointGet
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointGet
     */
    endpointId: string
}

export interface EndpointApiV1EndpointGetHeadersRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointGetHeaders
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointGetHeaders
     */
    endpointId: string
}

export interface EndpointApiV1EndpointGetSecretRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointGetSecret
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointGetSecret
     */
    endpointId: string
}

export interface EndpointApiV1EndpointGetStatsRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointGetStats
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointGetStats
     */
    endpointId: string
    /**
     * Filter the range to data starting from this date
     * Defaults to: undefined
     * @type Date
     * @memberof EndpointApiv1EndpointGetStats
     */
    since?: Date
    /**
     * Filter the range to data ending by this date
     * Defaults to: undefined
     * @type Date
     * @memberof EndpointApiv1EndpointGetStats
     */
    until?: Date
}

export interface EndpointApiV1EndpointListRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointList
     */
    appId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof EndpointApiv1EndpointList
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointList
     */
    iterator?: string
    /**
     * The sorting order of the returned items
     * Defaults to: undefined
     * @type Ordering
     * @memberof EndpointApiv1EndpointList
     */
    order?: Ordering
}

export interface EndpointApiV1EndpointPatchRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointPatch
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointPatch
     */
    endpointId: string
    /**
     * 
     * @type EndpointPatch
     * @memberof EndpointApiv1EndpointPatch
     */
    endpointPatch: EndpointPatch
}

export interface EndpointApiV1EndpointPatchHeadersRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointPatchHeaders
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointPatchHeaders
     */
    endpointId: string
    /**
     * 
     * @type EndpointHeadersPatchIn
     * @memberof EndpointApiv1EndpointPatchHeaders
     */
    endpointHeadersPatchIn: EndpointHeadersPatchIn
}

export interface EndpointApiV1EndpointRecoverRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointRecover
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointRecover
     */
    endpointId: string
    /**
     * 
     * @type RecoverIn
     * @memberof EndpointApiv1EndpointRecover
     */
    recoverIn: RecoverIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointRecover
     */
    idempotencyKey?: string
}

export interface EndpointApiV1EndpointReplayRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointReplay
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointReplay
     */
    endpointId: string
    /**
     * 
     * @type ReplayIn
     * @memberof EndpointApiv1EndpointReplay
     */
    replayIn: ReplayIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointReplay
     */
    idempotencyKey?: string
}

export interface EndpointApiV1EndpointRotateSecretRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointRotateSecret
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointRotateSecret
     */
    endpointId: string
    /**
     * 
     * @type EndpointSecretRotateIn
     * @memberof EndpointApiv1EndpointRotateSecret
     */
    endpointSecretRotateIn: EndpointSecretRotateIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointRotateSecret
     */
    idempotencyKey?: string
}

export interface EndpointApiV1EndpointSendExampleRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointSendExample
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointSendExample
     */
    endpointId: string
    /**
     * 
     * @type EventExampleIn
     * @memberof EndpointApiv1EndpointSendExample
     */
    eventExampleIn: EventExampleIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointSendExample
     */
    idempotencyKey?: string
}

export interface EndpointApiV1EndpointTransformationGetRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointTransformationGet
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointTransformationGet
     */
    endpointId: string
}

export interface EndpointApiV1EndpointTransformationPartialUpdateRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointTransformationPartialUpdate
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointTransformationPartialUpdate
     */
    endpointId: string
    /**
     * 
     * @type EndpointTransformationIn
     * @memberof EndpointApiv1EndpointTransformationPartialUpdate
     */
    endpointTransformationIn: EndpointTransformationIn
}

export interface EndpointApiV1EndpointTransformationSimulateRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointTransformationSimulate
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointTransformationSimulate
     */
    endpointId: string
    /**
     * 
     * @type EndpointTransformationSimulateIn
     * @memberof EndpointApiv1EndpointTransformationSimulate
     */
    endpointTransformationSimulateIn: EndpointTransformationSimulateIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointTransformationSimulate
     */
    idempotencyKey?: string
}

export interface EndpointApiV1EndpointUpdateRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointUpdate
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointUpdate
     */
    endpointId: string
    /**
     * 
     * @type EndpointUpdate
     * @memberof EndpointApiv1EndpointUpdate
     */
    endpointUpdate: EndpointUpdate
}

export interface EndpointApiV1EndpointUpdateHeadersRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointUpdateHeaders
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointUpdateHeaders
     */
    endpointId: string
    /**
     * 
     * @type EndpointHeadersIn
     * @memberof EndpointApiv1EndpointUpdateHeaders
     */
    endpointHeadersIn: EndpointHeadersIn
}

export interface EndpointApiV1EndpointUpdateMtlsConfigRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointUpdateMtlsConfig
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointUpdateMtlsConfig
     */
    endpointId: string
    /**
     * 
     * @type EndpointMtlsConfigIn
     * @memberof EndpointApiv1EndpointUpdateMtlsConfig
     */
    endpointMtlsConfigIn: EndpointMtlsConfigIn
}

export interface EndpointApiV1EndpointUpdateOauthConfigRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointUpdateOauthConfig
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1EndpointUpdateOauthConfig
     */
    endpointId: string
    /**
     * 
     * @type EndpointOauthConfigIn
     * @memberof EndpointApiv1EndpointUpdateOauthConfig
     */
    endpointOauthConfigIn: EndpointOauthConfigIn
}

export interface EndpointApiV1SinkCreateRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1SinkCreate
     */
    appId: string
    /**
     * 
     * @type SinkIn
     * @memberof EndpointApiv1SinkCreate
     */
    sinkIn: SinkIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1SinkCreate
     */
    idempotencyKey?: string
}

export interface EndpointApiV1SinkGetRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1SinkGet
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1SinkGet
     */
    sinkId: string
}

export interface EndpointApiV1SinkListRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1SinkList
     */
    appId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof EndpointApiv1SinkList
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof EndpointApiv1SinkList
     */
    iterator?: string
    /**
     * The sorting order of the returned items
     * Defaults to: undefined
     * @type Ordering
     * @memberof EndpointApiv1SinkList
     */
    order?: Ordering
}

export class ObjectEndpointApi {
    private api: ObservableEndpointApi

    public constructor(configuration: Configuration, requestFactory?: EndpointApiRequestFactory, responseProcessor?: EndpointApiResponseProcessor) {
        this.api = new ObservableEndpointApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended)
     * Create Endpoint
     * @param param the request object
     */
    public v1EndpointCreateWithHttpInfo(param: EndpointApiV1EndpointCreateRequest, options?: Configuration): Promise<HttpInfo<EndpointOut>> {
        return this.api.v1EndpointCreateWithHttpInfo(param.appId, param.endpointIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended)
     * Create Endpoint
     * @param param the request object
     */
    public v1EndpointCreate(param: EndpointApiV1EndpointCreateRequest, options?: Configuration): Promise<EndpointOut> {
        return this.api.v1EndpointCreate(param.appId, param.endpointIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Delete an endpoint.
     * Delete Endpoint
     * @param param the request object
     */
    public v1EndpointDeleteWithHttpInfo(param: EndpointApiV1EndpointDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EndpointDeleteWithHttpInfo(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Delete an endpoint.
     * Delete Endpoint
     * @param param the request object
     */
    public v1EndpointDelete(param: EndpointApiV1EndpointDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.v1EndpointDelete(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Delete endpoint mTLS configuration
     * Delete Endpoint Mtls Config
     * @param param the request object
     */
    public v1EndpointDeleteMtlsConfigWithHttpInfo(param: EndpointApiV1EndpointDeleteMtlsConfigRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EndpointDeleteMtlsConfigWithHttpInfo(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Delete endpoint mTLS configuration
     * Delete Endpoint Mtls Config
     * @param param the request object
     */
    public v1EndpointDeleteMtlsConfig(param: EndpointApiV1EndpointDeleteMtlsConfigRequest, options?: Configuration): Promise<void> {
        return this.api.v1EndpointDeleteMtlsConfig(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Delete endpoint OAuth configuration
     * Delete Endpoint Oauth Config
     * @param param the request object
     */
    public v1EndpointDeleteOauthConfigWithHttpInfo(param: EndpointApiV1EndpointDeleteOauthConfigRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EndpointDeleteOauthConfigWithHttpInfo(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Delete endpoint OAuth configuration
     * Delete Endpoint Oauth Config
     * @param param the request object
     */
    public v1EndpointDeleteOauthConfig(param: EndpointApiV1EndpointDeleteOauthConfigRequest, options?: Configuration): Promise<void> {
        return this.api.v1EndpointDeleteOauthConfig(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Get an endpoint.
     * Get Endpoint
     * @param param the request object
     */
    public v1EndpointGetWithHttpInfo(param: EndpointApiV1EndpointGetRequest, options?: Configuration): Promise<HttpInfo<EndpointOut>> {
        return this.api.v1EndpointGetWithHttpInfo(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Get an endpoint.
     * Get Endpoint
     * @param param the request object
     */
    public v1EndpointGet(param: EndpointApiV1EndpointGetRequest, options?: Configuration): Promise<EndpointOut> {
        return this.api.v1EndpointGet(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Get the additional headers to be sent with the webhook
     * Get Endpoint Headers
     * @param param the request object
     */
    public v1EndpointGetHeadersWithHttpInfo(param: EndpointApiV1EndpointGetHeadersRequest, options?: Configuration): Promise<HttpInfo<EndpointHeadersOut>> {
        return this.api.v1EndpointGetHeadersWithHttpInfo(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Get the additional headers to be sent with the webhook
     * Get Endpoint Headers
     * @param param the request object
     */
    public v1EndpointGetHeaders(param: EndpointApiV1EndpointGetHeadersRequest, options?: Configuration): Promise<EndpointHeadersOut> {
        return this.api.v1EndpointGetHeaders(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Get the endpoint\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
     * Get Endpoint Secret
     * @param param the request object
     */
    public v1EndpointGetSecretWithHttpInfo(param: EndpointApiV1EndpointGetSecretRequest, options?: Configuration): Promise<HttpInfo<EndpointSecretOut>> {
        return this.api.v1EndpointGetSecretWithHttpInfo(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Get the endpoint\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
     * Get Endpoint Secret
     * @param param the request object
     */
    public v1EndpointGetSecret(param: EndpointApiV1EndpointGetSecretRequest, options?: Configuration): Promise<EndpointSecretOut> {
        return this.api.v1EndpointGetSecret(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Get basic statistics for the endpoint.
     * Endpoint Stats
     * @param param the request object
     */
    public v1EndpointGetStatsWithHttpInfo(param: EndpointApiV1EndpointGetStatsRequest, options?: Configuration): Promise<HttpInfo<EndpointStats>> {
        return this.api.v1EndpointGetStatsWithHttpInfo(param.appId, param.endpointId, param.since, param.until,  options).toPromise();
    }

    /**
     * Get basic statistics for the endpoint.
     * Endpoint Stats
     * @param param the request object
     */
    public v1EndpointGetStats(param: EndpointApiV1EndpointGetStatsRequest, options?: Configuration): Promise<EndpointStats> {
        return this.api.v1EndpointGetStats(param.appId, param.endpointId, param.since, param.until,  options).toPromise();
    }

    /**
     * List the application\'s endpoints.
     * List Endpoints
     * @param param the request object
     */
    public v1EndpointListWithHttpInfo(param: EndpointApiV1EndpointListRequest, options?: Configuration): Promise<HttpInfo<ListResponseEndpointOut>> {
        return this.api.v1EndpointListWithHttpInfo(param.appId, param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * List the application\'s endpoints.
     * List Endpoints
     * @param param the request object
     */
    public v1EndpointList(param: EndpointApiV1EndpointListRequest, options?: Configuration): Promise<ListResponseEndpointOut> {
        return this.api.v1EndpointList(param.appId, param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * Partially update an endpoint.
     * Patch Endpoint
     * @param param the request object
     */
    public v1EndpointPatchWithHttpInfo(param: EndpointApiV1EndpointPatchRequest, options?: Configuration): Promise<HttpInfo<EndpointOut>> {
        return this.api.v1EndpointPatchWithHttpInfo(param.appId, param.endpointId, param.endpointPatch,  options).toPromise();
    }

    /**
     * Partially update an endpoint.
     * Patch Endpoint
     * @param param the request object
     */
    public v1EndpointPatch(param: EndpointApiV1EndpointPatchRequest, options?: Configuration): Promise<EndpointOut> {
        return this.api.v1EndpointPatch(param.appId, param.endpointId, param.endpointPatch,  options).toPromise();
    }

    /**
     * Partially set the additional headers to be sent with the webhook
     * Patch Endpoint Headers
     * @param param the request object
     */
    public v1EndpointPatchHeadersWithHttpInfo(param: EndpointApiV1EndpointPatchHeadersRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EndpointPatchHeadersWithHttpInfo(param.appId, param.endpointId, param.endpointHeadersPatchIn,  options).toPromise();
    }

    /**
     * Partially set the additional headers to be sent with the webhook
     * Patch Endpoint Headers
     * @param param the request object
     */
    public v1EndpointPatchHeaders(param: EndpointApiV1EndpointPatchHeadersRequest, options?: Configuration): Promise<void> {
        return this.api.v1EndpointPatchHeaders(param.appId, param.endpointId, param.endpointHeadersPatchIn,  options).toPromise();
    }

    /**
     * Resend all failed messages since a given time.  Messages that were sent successfully, even if failed initially, are not resent.
     * Recover Failed Webhooks
     * @param param the request object
     */
    public v1EndpointRecoverWithHttpInfo(param: EndpointApiV1EndpointRecoverRequest, options?: Configuration): Promise<HttpInfo<RecoverOut>> {
        return this.api.v1EndpointRecoverWithHttpInfo(param.appId, param.endpointId, param.recoverIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Resend all failed messages since a given time.  Messages that were sent successfully, even if failed initially, are not resent.
     * Recover Failed Webhooks
     * @param param the request object
     */
    public v1EndpointRecover(param: EndpointApiV1EndpointRecoverRequest, options?: Configuration): Promise<RecoverOut> {
        return this.api.v1EndpointRecover(param.appId, param.endpointId, param.recoverIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.
     * Replay Missing Webhooks
     * @param param the request object
     */
    public v1EndpointReplayWithHttpInfo(param: EndpointApiV1EndpointReplayRequest, options?: Configuration): Promise<HttpInfo<ReplayOut>> {
        return this.api.v1EndpointReplayWithHttpInfo(param.appId, param.endpointId, param.replayIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.
     * Replay Missing Webhooks
     * @param param the request object
     */
    public v1EndpointReplay(param: EndpointApiV1EndpointReplayRequest, options?: Configuration): Promise<ReplayOut> {
        return this.api.v1EndpointReplay(param.appId, param.endpointId, param.replayIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Rotates the endpoint\'s signing secret.  The previous secret will remain valid for the next 24 hours.
     * Rotate Endpoint Secret
     * @param param the request object
     */
    public v1EndpointRotateSecretWithHttpInfo(param: EndpointApiV1EndpointRotateSecretRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EndpointRotateSecretWithHttpInfo(param.appId, param.endpointId, param.endpointSecretRotateIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Rotates the endpoint\'s signing secret.  The previous secret will remain valid for the next 24 hours.
     * Rotate Endpoint Secret
     * @param param the request object
     */
    public v1EndpointRotateSecret(param: EndpointApiV1EndpointRotateSecretRequest, options?: Configuration): Promise<void> {
        return this.api.v1EndpointRotateSecret(param.appId, param.endpointId, param.endpointSecretRotateIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Send an example message for an event
     * Send Event Type Example Message
     * @param param the request object
     */
    public v1EndpointSendExampleWithHttpInfo(param: EndpointApiV1EndpointSendExampleRequest, options?: Configuration): Promise<HttpInfo<MessageOut>> {
        return this.api.v1EndpointSendExampleWithHttpInfo(param.appId, param.endpointId, param.eventExampleIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Send an example message for an event
     * Send Event Type Example Message
     * @param param the request object
     */
    public v1EndpointSendExample(param: EndpointApiV1EndpointSendExampleRequest, options?: Configuration): Promise<MessageOut> {
        return this.api.v1EndpointSendExample(param.appId, param.endpointId, param.eventExampleIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Get the transformation code associated with this endpoint
     * Get Endpoint Transformation
     * @param param the request object
     */
    public v1EndpointTransformationGetWithHttpInfo(param: EndpointApiV1EndpointTransformationGetRequest, options?: Configuration): Promise<HttpInfo<EndpointTransformationOut>> {
        return this.api.v1EndpointTransformationGetWithHttpInfo(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Get the transformation code associated with this endpoint
     * Get Endpoint Transformation
     * @param param the request object
     */
    public v1EndpointTransformationGet(param: EndpointApiV1EndpointTransformationGetRequest, options?: Configuration): Promise<EndpointTransformationOut> {
        return this.api.v1EndpointTransformationGet(param.appId, param.endpointId,  options).toPromise();
    }

    /**
     * Set or unset the transformation code associated with this endpoint
     * Set Endpoint Transformation
     * @param param the request object
     */
    public v1EndpointTransformationPartialUpdateWithHttpInfo(param: EndpointApiV1EndpointTransformationPartialUpdateRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EndpointTransformationPartialUpdateWithHttpInfo(param.appId, param.endpointId, param.endpointTransformationIn,  options).toPromise();
    }

    /**
     * Set or unset the transformation code associated with this endpoint
     * Set Endpoint Transformation
     * @param param the request object
     */
    public v1EndpointTransformationPartialUpdate(param: EndpointApiV1EndpointTransformationPartialUpdateRequest, options?: Configuration): Promise<void> {
        return this.api.v1EndpointTransformationPartialUpdate(param.appId, param.endpointId, param.endpointTransformationIn,  options).toPromise();
    }

    /**
     * Simulate running the transformation on the payload and code
     * Simulate
     * @param param the request object
     */
    public v1EndpointTransformationSimulateWithHttpInfo(param: EndpointApiV1EndpointTransformationSimulateRequest, options?: Configuration): Promise<HttpInfo<EndpointTransformationSimulateOut>> {
        return this.api.v1EndpointTransformationSimulateWithHttpInfo(param.appId, param.endpointId, param.endpointTransformationSimulateIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Simulate running the transformation on the payload and code
     * Simulate
     * @param param the request object
     */
    public v1EndpointTransformationSimulate(param: EndpointApiV1EndpointTransformationSimulateRequest, options?: Configuration): Promise<EndpointTransformationSimulateOut> {
        return this.api.v1EndpointTransformationSimulate(param.appId, param.endpointId, param.endpointTransformationSimulateIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Update an endpoint.
     * Update Endpoint
     * @param param the request object
     */
    public v1EndpointUpdateWithHttpInfo(param: EndpointApiV1EndpointUpdateRequest, options?: Configuration): Promise<HttpInfo<EndpointOut>> {
        return this.api.v1EndpointUpdateWithHttpInfo(param.appId, param.endpointId, param.endpointUpdate,  options).toPromise();
    }

    /**
     * Update an endpoint.
     * Update Endpoint
     * @param param the request object
     */
    public v1EndpointUpdate(param: EndpointApiV1EndpointUpdateRequest, options?: Configuration): Promise<EndpointOut> {
        return this.api.v1EndpointUpdate(param.appId, param.endpointId, param.endpointUpdate,  options).toPromise();
    }

    /**
     * Set the additional headers to be sent with the webhook
     * Update Endpoint Headers
     * @param param the request object
     */
    public v1EndpointUpdateHeadersWithHttpInfo(param: EndpointApiV1EndpointUpdateHeadersRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EndpointUpdateHeadersWithHttpInfo(param.appId, param.endpointId, param.endpointHeadersIn,  options).toPromise();
    }

    /**
     * Set the additional headers to be sent with the webhook
     * Update Endpoint Headers
     * @param param the request object
     */
    public v1EndpointUpdateHeaders(param: EndpointApiV1EndpointUpdateHeadersRequest, options?: Configuration): Promise<void> {
        return this.api.v1EndpointUpdateHeaders(param.appId, param.endpointId, param.endpointHeadersIn,  options).toPromise();
    }

    /**
     * Create/update endpoint mTLS configuration
     * Update Endpoint Mtls Config
     * @param param the request object
     */
    public v1EndpointUpdateMtlsConfigWithHttpInfo(param: EndpointApiV1EndpointUpdateMtlsConfigRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EndpointUpdateMtlsConfigWithHttpInfo(param.appId, param.endpointId, param.endpointMtlsConfigIn,  options).toPromise();
    }

    /**
     * Create/update endpoint mTLS configuration
     * Update Endpoint Mtls Config
     * @param param the request object
     */
    public v1EndpointUpdateMtlsConfig(param: EndpointApiV1EndpointUpdateMtlsConfigRequest, options?: Configuration): Promise<void> {
        return this.api.v1EndpointUpdateMtlsConfig(param.appId, param.endpointId, param.endpointMtlsConfigIn,  options).toPromise();
    }

    /**
     * Create/update endpoint OAuth configuration
     * Update Endpoint Oauth Config
     * @param param the request object
     */
    public v1EndpointUpdateOauthConfigWithHttpInfo(param: EndpointApiV1EndpointUpdateOauthConfigRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EndpointUpdateOauthConfigWithHttpInfo(param.appId, param.endpointId, param.endpointOauthConfigIn,  options).toPromise();
    }

    /**
     * Create/update endpoint OAuth configuration
     * Update Endpoint Oauth Config
     * @param param the request object
     */
    public v1EndpointUpdateOauthConfig(param: EndpointApiV1EndpointUpdateOauthConfigRequest, options?: Configuration): Promise<void> {
        return this.api.v1EndpointUpdateOauthConfig(param.appId, param.endpointId, param.endpointOauthConfigIn,  options).toPromise();
    }

    /**
     * Create a new sink for the application.
     * Create Sink
     * @param param the request object
     */
    public v1SinkCreateWithHttpInfo(param: EndpointApiV1SinkCreateRequest, options?: Configuration): Promise<HttpInfo<SinkOut>> {
        return this.api.v1SinkCreateWithHttpInfo(param.appId, param.sinkIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Create a new sink for the application.
     * Create Sink
     * @param param the request object
     */
    public v1SinkCreate(param: EndpointApiV1SinkCreateRequest, options?: Configuration): Promise<SinkOut> {
        return this.api.v1SinkCreate(param.appId, param.sinkIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Get a sink.
     * Get Sink
     * @param param the request object
     */
    public v1SinkGetWithHttpInfo(param: EndpointApiV1SinkGetRequest, options?: Configuration): Promise<HttpInfo<SinkOut>> {
        return this.api.v1SinkGetWithHttpInfo(param.appId, param.sinkId,  options).toPromise();
    }

    /**
     * Get a sink.
     * Get Sink
     * @param param the request object
     */
    public v1SinkGet(param: EndpointApiV1SinkGetRequest, options?: Configuration): Promise<SinkOut> {
        return this.api.v1SinkGet(param.appId, param.sinkId,  options).toPromise();
    }

    /**
     * List the application\'s sinks.
     * List Sinks
     * @param param the request object
     */
    public v1SinkListWithHttpInfo(param: EndpointApiV1SinkListRequest, options?: Configuration): Promise<HttpInfo<ListResponseSinkOut>> {
        return this.api.v1SinkListWithHttpInfo(param.appId, param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * List the application\'s sinks.
     * List Sinks
     * @param param the request object
     */
    public v1SinkList(param: EndpointApiV1SinkListRequest, options?: Configuration): Promise<ListResponseSinkOut> {
        return this.api.v1SinkList(param.appId, param.limit, param.iterator, param.order,  options).toPromise();
    }

}

import { ObservableEnvironmentApi } from "./ObservableAPI";
import { EnvironmentApiRequestFactory, EnvironmentApiResponseProcessor} from "../apis/EnvironmentApi";

export interface EnvironmentApiV1EnvironmentExportRequest {
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EnvironmentApiv1EnvironmentExport
     */
    idempotencyKey?: string
}

export interface EnvironmentApiV1EnvironmentExportGetRequest {
}

export interface EnvironmentApiV1EnvironmentImportRequest {
    /**
     * 
     * @type EnvironmentIn
     * @memberof EnvironmentApiv1EnvironmentImport
     */
    environmentIn: EnvironmentIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EnvironmentApiv1EnvironmentImport
     */
    idempotencyKey?: string
}

export class ObjectEnvironmentApi {
    private api: ObservableEnvironmentApi

    public constructor(configuration: Configuration, requestFactory?: EnvironmentApiRequestFactory, responseProcessor?: EnvironmentApiResponseProcessor) {
        this.api = new ObservableEnvironmentApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Download a JSON file containing all org-settings and event types
     * Export Environment Configuration
     * @param param the request object
     */
    public v1EnvironmentExportWithHttpInfo(param: EnvironmentApiV1EnvironmentExportRequest = {}, options?: Configuration): Promise<HttpInfo<EnvironmentOut>> {
        return this.api.v1EnvironmentExportWithHttpInfo(param.idempotencyKey,  options).toPromise();
    }

    /**
     * Download a JSON file containing all org-settings and event types
     * Export Environment Configuration
     * @param param the request object
     */
    public v1EnvironmentExport(param: EnvironmentApiV1EnvironmentExportRequest = {}, options?: Configuration): Promise<EnvironmentOut> {
        return this.api.v1EnvironmentExport(param.idempotencyKey,  options).toPromise();
    }

    /**
     * Download a JSON file containing all org-settings and event types
     * Export Environment Configuration
     * @param param the request object
     */
    public v1EnvironmentExportGetWithHttpInfo(param: EnvironmentApiV1EnvironmentExportGetRequest = {}, options?: Configuration): Promise<HttpInfo<EnvironmentOut>> {
        return this.api.v1EnvironmentExportGetWithHttpInfo( options).toPromise();
    }

    /**
     * Download a JSON file containing all org-settings and event types
     * Export Environment Configuration
     * @param param the request object
     */
    public v1EnvironmentExportGet(param: EnvironmentApiV1EnvironmentExportGetRequest = {}, options?: Configuration): Promise<EnvironmentOut> {
        return this.api.v1EnvironmentExportGet( options).toPromise();
    }

    /**
     * Import a configuration into the active organization. It doesn\'t delete anything, only adds/updates what was passed to it.
     * Import Environment Configuration
     * @param param the request object
     */
    public v1EnvironmentImportWithHttpInfo(param: EnvironmentApiV1EnvironmentImportRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EnvironmentImportWithHttpInfo(param.environmentIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Import a configuration into the active organization. It doesn\'t delete anything, only adds/updates what was passed to it.
     * Import Environment Configuration
     * @param param the request object
     */
    public v1EnvironmentImport(param: EnvironmentApiV1EnvironmentImportRequest, options?: Configuration): Promise<void> {
        return this.api.v1EnvironmentImport(param.environmentIn, param.idempotencyKey,  options).toPromise();
    }

}

import { ObservableEnvironmentSettingsApi } from "./ObservableAPI";
import { EnvironmentSettingsApiRequestFactory, EnvironmentSettingsApiResponseProcessor} from "../apis/EnvironmentSettingsApi";

export interface EnvironmentSettingsApiV1EnvironmentGetSettingsRequest {
}

export class ObjectEnvironmentSettingsApi {
    private api: ObservableEnvironmentSettingsApi

    public constructor(configuration: Configuration, requestFactory?: EnvironmentSettingsApiRequestFactory, responseProcessor?: EnvironmentSettingsApiResponseProcessor) {
        this.api = new ObservableEnvironmentSettingsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Get the environment\'s settings
     * Get Org Settings
     * @param param the request object
     */
    public v1EnvironmentGetSettingsWithHttpInfo(param: EnvironmentSettingsApiV1EnvironmentGetSettingsRequest = {}, options?: Configuration): Promise<HttpInfo<EnvironmentSettingsOut>> {
        return this.api.v1EnvironmentGetSettingsWithHttpInfo( options).toPromise();
    }

    /**
     * Get the environment\'s settings
     * Get Org Settings
     * @param param the request object
     */
    public v1EnvironmentGetSettings(param: EnvironmentSettingsApiV1EnvironmentGetSettingsRequest = {}, options?: Configuration): Promise<EnvironmentSettingsOut> {
        return this.api.v1EnvironmentGetSettings( options).toPromise();
    }

}

import { ObservableEventTypeApi } from "./ObservableAPI";
import { EventTypeApiRequestFactory, EventTypeApiResponseProcessor} from "../apis/EventTypeApi";

export interface EventTypeApiV1EventTypeCreateRequest {
    /**
     * 
     * @type EventTypeIn
     * @memberof EventTypeApiv1EventTypeCreate
     */
    eventTypeIn: EventTypeIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypeCreate
     */
    idempotencyKey?: string
}

export interface EventTypeApiV1EventTypeDeleteRequest {
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypeDelete
     */
    eventTypeName: string
    /**
     * By default event types are archived when \&quot;deleted\&quot;. Passing this to &#x60;true&#x60; deletes them entirely.
     * Defaults to: false
     * @type boolean
     * @memberof EventTypeApiv1EventTypeDelete
     */
    expunge?: boolean
}

export interface EventTypeApiV1EventTypeExportOpenapiRequest {
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypeExportOpenapi
     */
    idempotencyKey?: string
}

export interface EventTypeApiV1EventTypeGenerateExampleRequest {
    /**
     * 
     * @type EventTypeSchemaIn
     * @memberof EventTypeApiv1EventTypeGenerateExample
     */
    eventTypeSchemaIn: EventTypeSchemaIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypeGenerateExample
     */
    idempotencyKey?: string
}

export interface EventTypeApiV1EventTypeGetRequest {
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypeGet
     */
    eventTypeName: string
}

export interface EventTypeApiV1EventTypeGetRetryScheduleRequest {
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypeGetRetrySchedule
     */
    eventTypeName: string
}

export interface EventTypeApiV1EventTypeImportOpenapiRequest {
    /**
     * Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**.
     * @type EventTypeImportOpenApiIn
     * @memberof EventTypeApiv1EventTypeImportOpenapi
     */
    eventTypeImportOpenApiIn: EventTypeImportOpenApiIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypeImportOpenapi
     */
    idempotencyKey?: string
}

export interface EventTypeApiV1EventTypeListRequest {
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof EventTypeApiv1EventTypeList
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypeList
     */
    iterator?: string
    /**
     * The sorting order of the returned items
     * Defaults to: undefined
     * @type Ordering
     * @memberof EventTypeApiv1EventTypeList
     */
    order?: Ordering
    /**
     * When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response
     * Defaults to: false
     * @type boolean
     * @memberof EventTypeApiv1EventTypeList
     */
    includeArchived?: boolean
    /**
     * When &#x60;true&#x60; the full item (including the schema) is included in the response
     * Defaults to: false
     * @type boolean
     * @memberof EventTypeApiv1EventTypeList
     */
    withContent?: boolean
}

export interface EventTypeApiV1EventTypePatchRequest {
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypePatch
     */
    eventTypeName: string
    /**
     * 
     * @type EventTypePatch
     * @memberof EventTypeApiv1EventTypePatch
     */
    eventTypePatch: EventTypePatch
}

export interface EventTypeApiV1EventTypeUpdateRequest {
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypeUpdate
     */
    eventTypeName: string
    /**
     * 
     * @type EventTypeUpdate
     * @memberof EventTypeApiv1EventTypeUpdate
     */
    eventTypeUpdate: EventTypeUpdate
}

export interface EventTypeApiV1EventTypeUpdateRetryScheduleRequest {
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof EventTypeApiv1EventTypeUpdateRetrySchedule
     */
    eventTypeName: string
    /**
     * 
     * @type RetryScheduleInOut
     * @memberof EventTypeApiv1EventTypeUpdateRetrySchedule
     */
    retryScheduleInOut: RetryScheduleInOut
}

export class ObjectEventTypeApi {
    private api: ObservableEventTypeApi

    public constructor(configuration: Configuration, requestFactory?: EventTypeApiRequestFactory, responseProcessor?: EventTypeApiResponseProcessor) {
        this.api = new ObservableEventTypeApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
     * Create Event Type
     * @param param the request object
     */
    public v1EventTypeCreateWithHttpInfo(param: EventTypeApiV1EventTypeCreateRequest, options?: Configuration): Promise<HttpInfo<EventTypeOut>> {
        return this.api.v1EventTypeCreateWithHttpInfo(param.eventTypeIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
     * Create Event Type
     * @param param the request object
     */
    public v1EventTypeCreate(param: EventTypeApiV1EventTypeCreateRequest, options?: Configuration): Promise<EventTypeOut> {
        return this.api.v1EventTypeCreate(param.eventTypeIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
     * Delete Event Type
     * @param param the request object
     */
    public v1EventTypeDeleteWithHttpInfo(param: EventTypeApiV1EventTypeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EventTypeDeleteWithHttpInfo(param.eventTypeName, param.expunge,  options).toPromise();
    }

    /**
     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
     * Delete Event Type
     * @param param the request object
     */
    public v1EventTypeDelete(param: EventTypeApiV1EventTypeDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.v1EventTypeDelete(param.eventTypeName, param.expunge,  options).toPromise();
    }

    /**
     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type
     * Event Type Export From Openapi
     * @param param the request object
     */
    public v1EventTypeExportOpenapiWithHttpInfo(param: EventTypeApiV1EventTypeExportOpenapiRequest = {}, options?: Configuration): Promise<HttpInfo<ExportEventTypeOut>> {
        return this.api.v1EventTypeExportOpenapiWithHttpInfo(param.idempotencyKey,  options).toPromise();
    }

    /**
     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type
     * Event Type Export From Openapi
     * @param param the request object
     */
    public v1EventTypeExportOpenapi(param: EventTypeApiV1EventTypeExportOpenapiRequest = {}, options?: Configuration): Promise<ExportEventTypeOut> {
        return this.api.v1EventTypeExportOpenapi(param.idempotencyKey,  options).toPromise();
    }

    /**
     * Generates a fake example from the given JSONSchema
     * Generate Schema Example
     * @param param the request object
     */
    public v1EventTypeGenerateExampleWithHttpInfo(param: EventTypeApiV1EventTypeGenerateExampleRequest, options?: Configuration): Promise<HttpInfo<EventTypeExampleOut>> {
        return this.api.v1EventTypeGenerateExampleWithHttpInfo(param.eventTypeSchemaIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Generates a fake example from the given JSONSchema
     * Generate Schema Example
     * @param param the request object
     */
    public v1EventTypeGenerateExample(param: EventTypeApiV1EventTypeGenerateExampleRequest, options?: Configuration): Promise<EventTypeExampleOut> {
        return this.api.v1EventTypeGenerateExample(param.eventTypeSchemaIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Get an event type.
     * Get Event Type
     * @param param the request object
     */
    public v1EventTypeGetWithHttpInfo(param: EventTypeApiV1EventTypeGetRequest, options?: Configuration): Promise<HttpInfo<EventTypeOut>> {
        return this.api.v1EventTypeGetWithHttpInfo(param.eventTypeName,  options).toPromise();
    }

    /**
     * Get an event type.
     * Get Event Type
     * @param param the request object
     */
    public v1EventTypeGet(param: EventTypeApiV1EventTypeGetRequest, options?: Configuration): Promise<EventTypeOut> {
        return this.api.v1EventTypeGet(param.eventTypeName,  options).toPromise();
    }

    /**
     * Gets the retry schedule for messages using the given event type
     * Get Retry Schedule
     * @param param the request object
     */
    public v1EventTypeGetRetryScheduleWithHttpInfo(param: EventTypeApiV1EventTypeGetRetryScheduleRequest, options?: Configuration): Promise<HttpInfo<RetryScheduleInOut>> {
        return this.api.v1EventTypeGetRetryScheduleWithHttpInfo(param.eventTypeName,  options).toPromise();
    }

    /**
     * Gets the retry schedule for messages using the given event type
     * Get Retry Schedule
     * @param param the request object
     */
    public v1EventTypeGetRetrySchedule(param: EventTypeApiV1EventTypeGetRetryScheduleRequest, options?: Configuration): Promise<RetryScheduleInOut> {
        return this.api.v1EventTypeGetRetrySchedule(param.eventTypeName,  options).toPromise();
    }

    /**
     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.
     * Event Type Import From Openapi
     * @param param the request object
     */
    public v1EventTypeImportOpenapiWithHttpInfo(param: EventTypeApiV1EventTypeImportOpenapiRequest, options?: Configuration): Promise<HttpInfo<EventTypeImportOpenApiOut>> {
        return this.api.v1EventTypeImportOpenapiWithHttpInfo(param.eventTypeImportOpenApiIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.
     * Event Type Import From Openapi
     * @param param the request object
     */
    public v1EventTypeImportOpenapi(param: EventTypeApiV1EventTypeImportOpenapiRequest, options?: Configuration): Promise<EventTypeImportOpenApiOut> {
        return this.api.v1EventTypeImportOpenapi(param.eventTypeImportOpenApiIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Return the list of event types.
     * List Event Types
     * @param param the request object
     */
    public v1EventTypeListWithHttpInfo(param: EventTypeApiV1EventTypeListRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseEventTypeOut>> {
        return this.api.v1EventTypeListWithHttpInfo(param.limit, param.iterator, param.order, param.includeArchived, param.withContent,  options).toPromise();
    }

    /**
     * Return the list of event types.
     * List Event Types
     * @param param the request object
     */
    public v1EventTypeList(param: EventTypeApiV1EventTypeListRequest = {}, options?: Configuration): Promise<ListResponseEventTypeOut> {
        return this.api.v1EventTypeList(param.limit, param.iterator, param.order, param.includeArchived, param.withContent,  options).toPromise();
    }

    /**
     * Partially update an event type.
     * Patch Event Type
     * @param param the request object
     */
    public v1EventTypePatchWithHttpInfo(param: EventTypeApiV1EventTypePatchRequest, options?: Configuration): Promise<HttpInfo<EventTypeOut>> {
        return this.api.v1EventTypePatchWithHttpInfo(param.eventTypeName, param.eventTypePatch,  options).toPromise();
    }

    /**
     * Partially update an event type.
     * Patch Event Type
     * @param param the request object
     */
    public v1EventTypePatch(param: EventTypeApiV1EventTypePatchRequest, options?: Configuration): Promise<EventTypeOut> {
        return this.api.v1EventTypePatch(param.eventTypeName, param.eventTypePatch,  options).toPromise();
    }

    /**
     * Update an event type.
     * Update Event Type
     * @param param the request object
     */
    public v1EventTypeUpdateWithHttpInfo(param: EventTypeApiV1EventTypeUpdateRequest, options?: Configuration): Promise<HttpInfo<EventTypeOut>> {
        return this.api.v1EventTypeUpdateWithHttpInfo(param.eventTypeName, param.eventTypeUpdate,  options).toPromise();
    }

    /**
     * Update an event type.
     * Update Event Type
     * @param param the request object
     */
    public v1EventTypeUpdate(param: EventTypeApiV1EventTypeUpdateRequest, options?: Configuration): Promise<EventTypeOut> {
        return this.api.v1EventTypeUpdate(param.eventTypeName, param.eventTypeUpdate,  options).toPromise();
    }

    /**
     * Sets a retry schedule for all messages using the given event type
     * Update Retry Schedule
     * @param param the request object
     */
    public v1EventTypeUpdateRetryScheduleWithHttpInfo(param: EventTypeApiV1EventTypeUpdateRetryScheduleRequest, options?: Configuration): Promise<HttpInfo<RetryScheduleInOut>> {
        return this.api.v1EventTypeUpdateRetryScheduleWithHttpInfo(param.eventTypeName, param.retryScheduleInOut,  options).toPromise();
    }

    /**
     * Sets a retry schedule for all messages using the given event type
     * Update Retry Schedule
     * @param param the request object
     */
    public v1EventTypeUpdateRetrySchedule(param: EventTypeApiV1EventTypeUpdateRetryScheduleRequest, options?: Configuration): Promise<RetryScheduleInOut> {
        return this.api.v1EventTypeUpdateRetrySchedule(param.eventTypeName, param.retryScheduleInOut,  options).toPromise();
    }

}

import { ObservableEventsApi } from "./ObservableAPI";
import { EventsApiRequestFactory, EventsApiResponseProcessor} from "../apis/EventsApi";

export interface EventsApiV1EventsRequest {
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof EventsApiv1Events
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof EventsApiv1Events
     */
    iterator?: string
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof EventsApiv1Events
     */
    eventTypes?: Array<string>
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof EventsApiv1Events
     */
    channels?: Array<string>
    /**
     * 
     * Defaults to: undefined
     * @type Date
     * @memberof EventsApiv1Events
     */
    after?: Date
}

export class ObjectEventsApi {
    private api: ObservableEventsApi

    public constructor(configuration: Configuration, requestFactory?: EventsApiRequestFactory, responseProcessor?: EventsApiResponseProcessor) {
        this.api = new ObservableEventsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Reads the stream of operational webhook events for this environment
     * Events
     * @param param the request object
     */
    public v1EventsWithHttpInfo(param: EventsApiV1EventsRequest = {}, options?: Configuration): Promise<HttpInfo<MessageEventsOut>> {
        return this.api.v1EventsWithHttpInfo(param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();
    }

    /**
     * Reads the stream of operational webhook events for this environment
     * Events
     * @param param the request object
     */
    public v1Events(param: EventsApiV1EventsRequest = {}, options?: Configuration): Promise<MessageEventsOut> {
        return this.api.v1Events(param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();
    }

}

import { ObservableHealthApi } from "./ObservableAPI";
import { HealthApiRequestFactory, HealthApiResponseProcessor} from "../apis/HealthApi";

export interface HealthApiV1HealthGetRequest {
}

export class ObjectHealthApi {
    private api: ObservableHealthApi

    public constructor(configuration: Configuration, requestFactory?: HealthApiRequestFactory, responseProcessor?: HealthApiResponseProcessor) {
        this.api = new ObservableHealthApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Verify the API server is up and running.
     * Health
     * @param param the request object
     */
    public v1HealthGetWithHttpInfo(param: HealthApiV1HealthGetRequest = {}, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1HealthGetWithHttpInfo( options).toPromise();
    }

    /**
     * Verify the API server is up and running.
     * Health
     * @param param the request object
     */
    public v1HealthGet(param: HealthApiV1HealthGetRequest = {}, options?: Configuration): Promise<void> {
        return this.api.v1HealthGet( options).toPromise();
    }

}

import { ObservableInboundApi } from "./ObservableAPI";
import { InboundApiRequestFactory, InboundApiResponseProcessor} from "../apis/InboundApi";

export interface InboundApiV1InboundMsgRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof InboundApiv1InboundMsg
     */
    appId: string
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof InboundApiv1InboundMsg
     */
    inboundToken: string
    /**
     * 
     * @type string
     * @memberof InboundApiv1InboundMsg
     */
    body: string
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof InboundApiv1InboundMsg
     */
    eventType?: string
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof InboundApiv1InboundMsg
     */
    idempotencyKey?: string
}

export interface InboundApiV1InboundRotateUrlRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof InboundApiv1InboundRotateUrl
     */
    appId: string
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof InboundApiv1InboundRotateUrl
     */
    idempotencyKey?: string
}

export class ObjectInboundApi {
    private api: ObservableInboundApi

    public constructor(configuration: Configuration, requestFactory?: InboundApiRequestFactory, responseProcessor?: InboundApiResponseProcessor) {
        this.api = new ObservableInboundApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Handles a raw inbound webhook for the application.
     * Handle Inbound
     * @param param the request object
     */
    public v1InboundMsgWithHttpInfo(param: InboundApiV1InboundMsgRequest, options?: Configuration): Promise<HttpInfo<MessageOut>> {
        return this.api.v1InboundMsgWithHttpInfo(param.appId, param.inboundToken, param.body, param.eventType, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Handles a raw inbound webhook for the application.
     * Handle Inbound
     * @param param the request object
     */
    public v1InboundMsg(param: InboundApiV1InboundMsgRequest, options?: Configuration): Promise<MessageOut> {
        return this.api.v1InboundMsg(param.appId, param.inboundToken, param.body, param.eventType, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Invalidates the previous inbound url (if one exists), producing a new inbound URL for this app
     * Rotate Url
     * @param param the request object
     */
    public v1InboundRotateUrlWithHttpInfo(param: InboundApiV1InboundRotateUrlRequest, options?: Configuration): Promise<HttpInfo<RotatedUrlOut>> {
        return this.api.v1InboundRotateUrlWithHttpInfo(param.appId, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Invalidates the previous inbound url (if one exists), producing a new inbound URL for this app
     * Rotate Url
     * @param param the request object
     */
    public v1InboundRotateUrl(param: InboundApiV1InboundRotateUrlRequest, options?: Configuration): Promise<RotatedUrlOut> {
        return this.api.v1InboundRotateUrl(param.appId, param.idempotencyKey,  options).toPromise();
    }

}

import { ObservableIntegrationApi } from "./ObservableAPI";
import { IntegrationApiRequestFactory, IntegrationApiResponseProcessor} from "../apis/IntegrationApi";

export interface IntegrationApiV1IntegrationCreateRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationCreate
     */
    appId: string
    /**
     * 
     * @type IntegrationIn
     * @memberof IntegrationApiv1IntegrationCreate
     */
    integrationIn: IntegrationIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationCreate
     */
    idempotencyKey?: string
}

export interface IntegrationApiV1IntegrationDeleteRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationDelete
     */
    appId: string
    /**
     * The integ\&#39;s ID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationDelete
     */
    integId: string
}

export interface IntegrationApiV1IntegrationGetRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationGet
     */
    appId: string
    /**
     * The integ\&#39;s ID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationGet
     */
    integId: string
}

export interface IntegrationApiV1IntegrationGetKeyRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationGetKey
     */
    appId: string
    /**
     * The integ\&#39;s ID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationGetKey
     */
    integId: string
}

export interface IntegrationApiV1IntegrationListRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationList
     */
    appId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof IntegrationApiv1IntegrationList
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationList
     */
    iterator?: string
    /**
     * The sorting order of the returned items
     * Defaults to: undefined
     * @type Ordering
     * @memberof IntegrationApiv1IntegrationList
     */
    order?: Ordering
}

export interface IntegrationApiV1IntegrationRotateKeyRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationRotateKey
     */
    appId: string
    /**
     * The integ\&#39;s ID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationRotateKey
     */
    integId: string
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationRotateKey
     */
    idempotencyKey?: string
}

export interface IntegrationApiV1IntegrationUpdateRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationUpdate
     */
    appId: string
    /**
     * The integ\&#39;s ID
     * Defaults to: undefined
     * @type string
     * @memberof IntegrationApiv1IntegrationUpdate
     */
    integId: string
    /**
     * 
     * @type IntegrationUpdate
     * @memberof IntegrationApiv1IntegrationUpdate
     */
    integrationUpdate: IntegrationUpdate
}

export class ObjectIntegrationApi {
    private api: ObservableIntegrationApi

    public constructor(configuration: Configuration, requestFactory?: IntegrationApiRequestFactory, responseProcessor?: IntegrationApiResponseProcessor) {
        this.api = new ObservableIntegrationApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Create an integration.
     * Create Integration
     * @param param the request object
     */
    public v1IntegrationCreateWithHttpInfo(param: IntegrationApiV1IntegrationCreateRequest, options?: Configuration): Promise<HttpInfo<IntegrationOut>> {
        return this.api.v1IntegrationCreateWithHttpInfo(param.appId, param.integrationIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Create an integration.
     * Create Integration
     * @param param the request object
     */
    public v1IntegrationCreate(param: IntegrationApiV1IntegrationCreateRequest, options?: Configuration): Promise<IntegrationOut> {
        return this.api.v1IntegrationCreate(param.appId, param.integrationIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Delete an integration.
     * Delete Integration
     * @param param the request object
     */
    public v1IntegrationDeleteWithHttpInfo(param: IntegrationApiV1IntegrationDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1IntegrationDeleteWithHttpInfo(param.appId, param.integId,  options).toPromise();
    }

    /**
     * Delete an integration.
     * Delete Integration
     * @param param the request object
     */
    public v1IntegrationDelete(param: IntegrationApiV1IntegrationDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.v1IntegrationDelete(param.appId, param.integId,  options).toPromise();
    }

    /**
     * Get an integration.
     * Get Integration
     * @param param the request object
     */
    public v1IntegrationGetWithHttpInfo(param: IntegrationApiV1IntegrationGetRequest, options?: Configuration): Promise<HttpInfo<IntegrationOut>> {
        return this.api.v1IntegrationGetWithHttpInfo(param.appId, param.integId,  options).toPromise();
    }

    /**
     * Get an integration.
     * Get Integration
     * @param param the request object
     */
    public v1IntegrationGet(param: IntegrationApiV1IntegrationGetRequest, options?: Configuration): Promise<IntegrationOut> {
        return this.api.v1IntegrationGet(param.appId, param.integId,  options).toPromise();
    }

    /**
     * Get an integration\'s key.
     * Get Integration Key
     * @param param the request object
     */
    public v1IntegrationGetKeyWithHttpInfo(param: IntegrationApiV1IntegrationGetKeyRequest, options?: Configuration): Promise<HttpInfo<IntegrationKeyOut>> {
        return this.api.v1IntegrationGetKeyWithHttpInfo(param.appId, param.integId,  options).toPromise();
    }

    /**
     * Get an integration\'s key.
     * Get Integration Key
     * @param param the request object
     */
    public v1IntegrationGetKey(param: IntegrationApiV1IntegrationGetKeyRequest, options?: Configuration): Promise<IntegrationKeyOut> {
        return this.api.v1IntegrationGetKey(param.appId, param.integId,  options).toPromise();
    }

    /**
     * List the application\'s integrations.
     * List Integrations
     * @param param the request object
     */
    public v1IntegrationListWithHttpInfo(param: IntegrationApiV1IntegrationListRequest, options?: Configuration): Promise<HttpInfo<ListResponseIntegrationOut>> {
        return this.api.v1IntegrationListWithHttpInfo(param.appId, param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * List the application\'s integrations.
     * List Integrations
     * @param param the request object
     */
    public v1IntegrationList(param: IntegrationApiV1IntegrationListRequest, options?: Configuration): Promise<ListResponseIntegrationOut> {
        return this.api.v1IntegrationList(param.appId, param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * Rotate the integration\'s key. The previous key will be immediately revoked.
     * Rotate Integration Key
     * @param param the request object
     */
    public v1IntegrationRotateKeyWithHttpInfo(param: IntegrationApiV1IntegrationRotateKeyRequest, options?: Configuration): Promise<HttpInfo<IntegrationKeyOut>> {
        return this.api.v1IntegrationRotateKeyWithHttpInfo(param.appId, param.integId, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Rotate the integration\'s key. The previous key will be immediately revoked.
     * Rotate Integration Key
     * @param param the request object
     */
    public v1IntegrationRotateKey(param: IntegrationApiV1IntegrationRotateKeyRequest, options?: Configuration): Promise<IntegrationKeyOut> {
        return this.api.v1IntegrationRotateKey(param.appId, param.integId, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Update an integration.
     * Update Integration
     * @param param the request object
     */
    public v1IntegrationUpdateWithHttpInfo(param: IntegrationApiV1IntegrationUpdateRequest, options?: Configuration): Promise<HttpInfo<IntegrationOut>> {
        return this.api.v1IntegrationUpdateWithHttpInfo(param.appId, param.integId, param.integrationUpdate,  options).toPromise();
    }

    /**
     * Update an integration.
     * Update Integration
     * @param param the request object
     */
    public v1IntegrationUpdate(param: IntegrationApiV1IntegrationUpdateRequest, options?: Configuration): Promise<IntegrationOut> {
        return this.api.v1IntegrationUpdate(param.appId, param.integId, param.integrationUpdate,  options).toPromise();
    }

}

import { ObservableMessageApi } from "./ObservableAPI";
import { MessageApiRequestFactory, MessageApiResponseProcessor} from "../apis/MessageApi";

export interface MessageApiCreateMessageAttemptForEndpointRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApicreateMessageAttemptForEndpoint
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApicreateMessageAttemptForEndpoint
     */
    endpointId: string
    /**
     * 
     * @type MessageIn
     * @memberof MessageApicreateMessageAttemptForEndpoint
     */
    messageIn: MessageIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof MessageApicreateMessageAttemptForEndpoint
     */
    idempotencyKey?: string
}

export interface MessageApiV1MessageCreateRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageCreate
     */
    appId: string
    /**
     * 
     * @type MessageIn
     * @memberof MessageApiv1MessageCreate
     */
    messageIn: MessageIn
    /**
     * When &#x60;true&#x60; message payloads are included in the response
     * Defaults to: true
     * @type boolean
     * @memberof MessageApiv1MessageCreate
     */
    withContent?: boolean
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageCreate
     */
    idempotencyKey?: string
}

export interface MessageApiV1MessageEventsRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageEvents
     */
    appId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof MessageApiv1MessageEvents
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageEvents
     */
    iterator?: string
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof MessageApiv1MessageEvents
     */
    eventTypes?: Array<string>
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof MessageApiv1MessageEvents
     */
    channels?: Array<string>
    /**
     * 
     * Defaults to: undefined
     * @type Date
     * @memberof MessageApiv1MessageEvents
     */
    after?: Date
}

export interface MessageApiV1MessageEventsSubscriptionRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageEventsSubscription
     */
    appId: string
    /**
     * The esub\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageEventsSubscription
     */
    subscriptionId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof MessageApiv1MessageEventsSubscription
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageEventsSubscription
     */
    iterator?: string
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof MessageApiv1MessageEventsSubscription
     */
    eventTypes?: Array<string>
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof MessageApiv1MessageEventsSubscription
     */
    channels?: Array<string>
    /**
     * 
     * Defaults to: undefined
     * @type Date
     * @memberof MessageApiv1MessageEventsSubscription
     */
    after?: Date
}

export interface MessageApiV1MessageEventsSubscriptionCreateTokenRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageEventsSubscriptionCreateToken
     */
    appId: string
    /**
     * The esub\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageEventsSubscriptionCreateToken
     */
    subscriptionId: string
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageEventsSubscriptionCreateToken
     */
    idempotencyKey?: string
}

export interface MessageApiV1MessageExpungeContentRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageExpungeContent
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageExpungeContent
     */
    msgId: string
}

export interface MessageApiV1MessageGetRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageGet
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageGet
     */
    msgId: string
    /**
     * When &#x60;true&#x60; message payloads are included in the response
     * Defaults to: true
     * @type boolean
     * @memberof MessageApiv1MessageGet
     */
    withContent?: boolean
}

export interface MessageApiV1MessageGetRawPayloadRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageGetRawPayload
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageGetRawPayload
     */
    msgId: string
}

export interface MessageApiV1MessageListRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageList
     */
    appId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof MessageApiv1MessageList
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageList
     */
    iterator?: string
    /**
     * Filter response based on the channel
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageList
     */
    channel?: string
    /**
     * Only include items created before a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageApiv1MessageList
     */
    before?: Date
    /**
     * Only include items created after a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageApiv1MessageList
     */
    after?: Date
    /**
     * When &#x60;true&#x60; message payloads are included in the response
     * Defaults to: true
     * @type boolean
     * @memberof MessageApiv1MessageList
     */
    withContent?: boolean
    /**
     * Filter messages matching the provided tag
     * Defaults to: undefined
     * @type string
     * @memberof MessageApiv1MessageList
     */
    tag?: string
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof MessageApiv1MessageList
     */
    eventTypes?: Array<string>
}

export class ObjectMessageApi {
    private api: ObservableMessageApi

    public constructor(configuration: Configuration, requestFactory?: MessageApiRequestFactory, responseProcessor?: MessageApiResponseProcessor) {
        this.api = new ObservableMessageApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Creates and sends a message to the specified endpoint. The message attempt and response from the endpoint is returned. FIXME: use MessageIn for expediency, even though the `application` parameter is unused. Since this endpoint isn\'t publicly documented anyway, it should be fine
     * Create Message Attempt For Endpoint
     * @param param the request object
     */
    public createMessageAttemptForEndpointWithHttpInfo(param: MessageApiCreateMessageAttemptForEndpointRequest, options?: Configuration): Promise<HttpInfo<MessageAttemptOut>> {
        return this.api.createMessageAttemptForEndpointWithHttpInfo(param.appId, param.endpointId, param.messageIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Creates and sends a message to the specified endpoint. The message attempt and response from the endpoint is returned. FIXME: use MessageIn for expediency, even though the `application` parameter is unused. Since this endpoint isn\'t publicly documented anyway, it should be fine
     * Create Message Attempt For Endpoint
     * @param param the request object
     */
    public createMessageAttemptForEndpoint(param: MessageApiCreateMessageAttemptForEndpointRequest, options?: Configuration): Promise<MessageAttemptOut> {
        return this.api.createMessageAttemptForEndpoint(param.appId, param.endpointId, param.messageIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Creates a new message and dispatches it to all of the application\'s endpoints.  The `eventId` is an optional custom unique ID. It\'s verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don\'t imply a specific message content or schema.  The `payload` property is the webhook\'s body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it\'s generally a good idea to keep webhook payloads small, probably no larger than 40kb.
     * Create Message
     * @param param the request object
     */
    public v1MessageCreateWithHttpInfo(param: MessageApiV1MessageCreateRequest, options?: Configuration): Promise<HttpInfo<MessageOut>> {
        return this.api.v1MessageCreateWithHttpInfo(param.appId, param.messageIn, param.withContent, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Creates a new message and dispatches it to all of the application\'s endpoints.  The `eventId` is an optional custom unique ID. It\'s verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don\'t imply a specific message content or schema.  The `payload` property is the webhook\'s body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it\'s generally a good idea to keep webhook payloads small, probably no larger than 40kb.
     * Create Message
     * @param param the request object
     */
    public v1MessageCreate(param: MessageApiV1MessageCreateRequest, options?: Configuration): Promise<MessageOut> {
        return this.api.v1MessageCreate(param.appId, param.messageIn, param.withContent, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Reads the stream of created messages for an application
     * Message Events
     * @param param the request object
     */
    public v1MessageEventsWithHttpInfo(param: MessageApiV1MessageEventsRequest, options?: Configuration): Promise<HttpInfo<MessageEventsOut>> {
        return this.api.v1MessageEventsWithHttpInfo(param.appId, param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();
    }

    /**
     * Reads the stream of created messages for an application
     * Message Events
     * @param param the request object
     */
    public v1MessageEvents(param: MessageApiV1MessageEventsRequest, options?: Configuration): Promise<MessageEventsOut> {
        return this.api.v1MessageEvents(param.appId, param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();
    }

    /**
     * Reads the stream of created messages for an application, but using server-managed iterator tracking.
     * Message Events Subscription
     * @param param the request object
     */
    public v1MessageEventsSubscriptionWithHttpInfo(param: MessageApiV1MessageEventsSubscriptionRequest, options?: Configuration): Promise<HttpInfo<MessageEventsOut>> {
        return this.api.v1MessageEventsSubscriptionWithHttpInfo(param.appId, param.subscriptionId, param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();
    }

    /**
     * Reads the stream of created messages for an application, but using server-managed iterator tracking.
     * Message Events Subscription
     * @param param the request object
     */
    public v1MessageEventsSubscription(param: MessageApiV1MessageEventsSubscriptionRequest, options?: Configuration): Promise<MessageEventsOut> {
        return this.api.v1MessageEventsSubscription(param.appId, param.subscriptionId, param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();
    }

    /**
     * Creates an auth token that can be used with the `v1.message.events-subscription` endpoint
     * Message Events Create Token
     * @param param the request object
     */
    public v1MessageEventsSubscriptionCreateTokenWithHttpInfo(param: MessageApiV1MessageEventsSubscriptionCreateTokenRequest, options?: Configuration): Promise<HttpInfo<MessageSubscriberAuthTokenOut>> {
        return this.api.v1MessageEventsSubscriptionCreateTokenWithHttpInfo(param.appId, param.subscriptionId, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Creates an auth token that can be used with the `v1.message.events-subscription` endpoint
     * Message Events Create Token
     * @param param the request object
     */
    public v1MessageEventsSubscriptionCreateToken(param: MessageApiV1MessageEventsSubscriptionCreateTokenRequest, options?: Configuration): Promise<MessageSubscriberAuthTokenOut> {
        return this.api.v1MessageEventsSubscriptionCreateToken(param.appId, param.subscriptionId, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Delete the given message\'s payload. Useful in cases when a message was accidentally sent with sensitive content.  The message can\'t be replayed or resent once its payload has been deleted or expired.
     * Delete message payload
     * @param param the request object
     */
    public v1MessageExpungeContentWithHttpInfo(param: MessageApiV1MessageExpungeContentRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1MessageExpungeContentWithHttpInfo(param.appId, param.msgId,  options).toPromise();
    }

    /**
     * Delete the given message\'s payload. Useful in cases when a message was accidentally sent with sensitive content.  The message can\'t be replayed or resent once its payload has been deleted or expired.
     * Delete message payload
     * @param param the request object
     */
    public v1MessageExpungeContent(param: MessageApiV1MessageExpungeContentRequest, options?: Configuration): Promise<void> {
        return this.api.v1MessageExpungeContent(param.appId, param.msgId,  options).toPromise();
    }

    /**
     * Get a message by its ID or eventID.
     * Get Message
     * @param param the request object
     */
    public v1MessageGetWithHttpInfo(param: MessageApiV1MessageGetRequest, options?: Configuration): Promise<HttpInfo<MessageOut>> {
        return this.api.v1MessageGetWithHttpInfo(param.appId, param.msgId, param.withContent,  options).toPromise();
    }

    /**
     * Get a message by its ID or eventID.
     * Get Message
     * @param param the request object
     */
    public v1MessageGet(param: MessageApiV1MessageGetRequest, options?: Configuration): Promise<MessageOut> {
        return this.api.v1MessageGet(param.appId, param.msgId, param.withContent,  options).toPromise();
    }

    /**
     * Get a message raw payload by its ID or eventID.
     * Get Raw Message Payload
     * @param param the request object
     */
    public v1MessageGetRawPayloadWithHttpInfo(param: MessageApiV1MessageGetRawPayloadRequest, options?: Configuration): Promise<HttpInfo<MessageRawPayloadOut>> {
        return this.api.v1MessageGetRawPayloadWithHttpInfo(param.appId, param.msgId,  options).toPromise();
    }

    /**
     * Get a message raw payload by its ID or eventID.
     * Get Raw Message Payload
     * @param param the request object
     */
    public v1MessageGetRawPayload(param: MessageApiV1MessageGetRawPayloadRequest, options?: Configuration): Promise<MessageRawPayloadOut> {
        return this.api.v1MessageGetRawPayload(param.appId, param.msgId,  options).toPromise();
    }

    /**
     * List all of the application\'s messages.  The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * List Messages
     * @param param the request object
     */
    public v1MessageListWithHttpInfo(param: MessageApiV1MessageListRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageOut>> {
        return this.api.v1MessageListWithHttpInfo(param.appId, param.limit, param.iterator, param.channel, param.before, param.after, param.withContent, param.tag, param.eventTypes,  options).toPromise();
    }

    /**
     * List all of the application\'s messages.  The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * List Messages
     * @param param the request object
     */
    public v1MessageList(param: MessageApiV1MessageListRequest, options?: Configuration): Promise<ListResponseMessageOut> {
        return this.api.v1MessageList(param.appId, param.limit, param.iterator, param.channel, param.before, param.after, param.withContent, param.tag, param.eventTypes,  options).toPromise();
    }

}

import { ObservableMessageAttemptApi } from "./ObservableAPI";
import { MessageAttemptApiRequestFactory, MessageAttemptApiResponseProcessor} from "../apis/MessageAttemptApi";

export interface MessageAttemptApiV1MessageAttemptExpungeContentRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptExpungeContent
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptExpungeContent
     */
    msgId: string
    /**
     * The attempt\&#39;s ID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptExpungeContent
     */
    attemptId: string
}

export interface MessageAttemptApiV1MessageAttemptGetRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptGet
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptGet
     */
    msgId: string
    /**
     * The attempt\&#39;s ID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptGet
     */
    attemptId: string
}

export interface MessageAttemptApiV1MessageAttemptGetHeadersRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptGetHeaders
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptGetHeaders
     */
    msgId: string
    /**
     * The attempt\&#39;s ID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptGetHeaders
     */
    attemptId: string
}

export interface MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations
     */
    msgId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations
     */
    iterator?: string
}

export interface MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    endpointId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    iterator?: string
    /**
     * Filter response based on the channel
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    channel?: string
    /**
     * Filter response based on the message tags
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    tag?: string
    /**
     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)
     * Defaults to: undefined
     * @type MessageStatus
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    status?: MessageStatus
    /**
     * Only include items created before a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    before?: Date
    /**
     * Only include items created after a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    after?: Date
    /**
     * When &#x60;true&#x60; message payloads are included in the response
     * Defaults to: true
     * @type boolean
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    withContent?: boolean
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages
     */
    eventTypes?: Array<string>
}

export interface MessageAttemptApiV1MessageAttemptListByEndpointRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    endpointId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    iterator?: string
    /**
     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)
     * Defaults to: undefined
     * @type MessageStatus
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    status?: MessageStatus
    /**
     * Filter response based on the HTTP status code
     * Defaults to: undefined
     * @type StatusCodeClass
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    statusCodeClass?: StatusCodeClass
    /**
     * Filter response based on the channel
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    channel?: string
    /**
     * Filter response based on the tag
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    tag?: string
    /**
     * Only include items created before a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    before?: Date
    /**
     * Only include items created after a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    after?: Date
    /**
     * When &#x60;true&#x60; attempt content is included in the response
     * Defaults to: true
     * @type boolean
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    withContent?: boolean
    /**
     * When &#x60;true&#x60;, the message information is included in the response
     * Defaults to: false
     * @type boolean
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    withMsg?: boolean
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint
     */
    eventTypes?: Array<string>
}

export interface MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    msgId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    endpointId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    iterator?: string
    /**
     * Filter response based on the channel
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    channel?: string
    /**
     * Filter response based on the tag
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    tag?: string
    /**
     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)
     * Defaults to: undefined
     * @type MessageStatus
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    status?: MessageStatus
    /**
     * Only include items created before a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    before?: Date
    /**
     * Only include items created after a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    after?: Date
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated
     */
    eventTypes?: Array<string>
}

export interface MessageAttemptApiV1MessageAttemptListByMsgRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    msgId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    iterator?: string
    /**
     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)
     * Defaults to: undefined
     * @type MessageStatus
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    status?: MessageStatus
    /**
     * Filter response based on the HTTP status code
     * Defaults to: undefined
     * @type StatusCodeClass
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    statusCodeClass?: StatusCodeClass
    /**
     * Filter response based on the channel
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    channel?: string
    /**
     * Filter response based on the tag
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    tag?: string
    /**
     * Filter the attempts based on the attempted endpoint
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    endpointId?: string
    /**
     * Only include items created before a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    before?: Date
    /**
     * Only include items created after a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    after?: Date
    /**
     * When &#x60;true&#x60; attempt content is included in the response
     * Defaults to: true
     * @type boolean
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    withContent?: boolean
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof MessageAttemptApiv1MessageAttemptListByMsg
     */
    eventTypes?: Array<string>
}

export interface MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    msgId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    iterator?: string
    /**
     * Filter the attempts based on the attempted endpoint
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    endpointId?: string
    /**
     * Filter response based on the channel
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    channel?: string
    /**
     * Filter response based on the tag
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    tag?: string
    /**
     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)
     * Defaults to: undefined
     * @type MessageStatus
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    status?: MessageStatus
    /**
     * Only include items created before a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    before?: Date
    /**
     * Only include items created after a certain date
     * Defaults to: undefined
     * @type Date
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    after?: Date
    /**
     * Filter response based on the HTTP status code
     * Defaults to: undefined
     * @type StatusCodeClass
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    statusCodeClass?: StatusCodeClass
    /**
     * Filter response based on the event type
     * Defaults to: undefined
     * @type Array&lt;string&gt;
     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated
     */
    eventTypes?: Array<string>
}

export interface MessageAttemptApiV1MessageAttemptResendRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptResend
     */
    appId: string
    /**
     * The msg\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptResend
     */
    msgId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptResend
     */
    endpointId: string
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof MessageAttemptApiv1MessageAttemptResend
     */
    idempotencyKey?: string
}

export class ObjectMessageAttemptApi {
    private api: ObservableMessageAttemptApi

    public constructor(configuration: Configuration, requestFactory?: MessageAttemptApiRequestFactory, responseProcessor?: MessageAttemptApiResponseProcessor) {
        this.api = new ObservableMessageAttemptApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Deletes the given attempt\'s response body. Useful when an endpoint accidentally returned sensitive content.
     * Delete attempt response body
     * @param param the request object
     */
    public v1MessageAttemptExpungeContentWithHttpInfo(param: MessageAttemptApiV1MessageAttemptExpungeContentRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1MessageAttemptExpungeContentWithHttpInfo(param.appId, param.msgId, param.attemptId,  options).toPromise();
    }

    /**
     * Deletes the given attempt\'s response body. Useful when an endpoint accidentally returned sensitive content.
     * Delete attempt response body
     * @param param the request object
     */
    public v1MessageAttemptExpungeContent(param: MessageAttemptApiV1MessageAttemptExpungeContentRequest, options?: Configuration): Promise<void> {
        return this.api.v1MessageAttemptExpungeContent(param.appId, param.msgId, param.attemptId,  options).toPromise();
    }

    /**
     * `msg_id`: Use a message id or a message `eventId`
     * Get Attempt
     * @param param the request object
     */
    public v1MessageAttemptGetWithHttpInfo(param: MessageAttemptApiV1MessageAttemptGetRequest, options?: Configuration): Promise<HttpInfo<MessageAttemptOut>> {
        return this.api.v1MessageAttemptGetWithHttpInfo(param.appId, param.msgId, param.attemptId,  options).toPromise();
    }

    /**
     * `msg_id`: Use a message id or a message `eventId`
     * Get Attempt
     * @param param the request object
     */
    public v1MessageAttemptGet(param: MessageAttemptApiV1MessageAttemptGetRequest, options?: Configuration): Promise<MessageAttemptOut> {
        return this.api.v1MessageAttemptGet(param.appId, param.msgId, param.attemptId,  options).toPromise();
    }

    /**
     * Calculate and return headers used on a given message attempt
     * Get Attempt Headers
     * @param param the request object
     */
    public v1MessageAttemptGetHeadersWithHttpInfo(param: MessageAttemptApiV1MessageAttemptGetHeadersRequest, options?: Configuration): Promise<HttpInfo<MessageAttemptHeadersOut>> {
        return this.api.v1MessageAttemptGetHeadersWithHttpInfo(param.appId, param.msgId, param.attemptId,  options).toPromise();
    }

    /**
     * Calculate and return headers used on a given message attempt
     * Get Attempt Headers
     * @param param the request object
     */
    public v1MessageAttemptGetHeaders(param: MessageAttemptApiV1MessageAttemptGetHeadersRequest, options?: Configuration): Promise<MessageAttemptHeadersOut> {
        return this.api.v1MessageAttemptGetHeaders(param.appId, param.msgId, param.attemptId,  options).toPromise();
    }

    /**
     * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.
     * List Attempted Destinations
     * @param param the request object
     */
    public v1MessageAttemptListAttemptedDestinationsWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageEndpointOut>> {
        return this.api.v1MessageAttemptListAttemptedDestinationsWithHttpInfo(param.appId, param.msgId, param.limit, param.iterator,  options).toPromise();
    }

    /**
     * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.
     * List Attempted Destinations
     * @param param the request object
     */
    public v1MessageAttemptListAttemptedDestinations(param: MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest, options?: Configuration): Promise<ListResponseMessageEndpointOut> {
        return this.api.v1MessageAttemptListAttemptedDestinations(param.appId, param.msgId, param.limit, param.iterator,  options).toPromise();
    }

    /**
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * List Attempted Messages
     * @param param the request object
     */
    public v1MessageAttemptListAttemptedMessagesWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest, options?: Configuration): Promise<HttpInfo<ListResponseEndpointMessageOut>> {
        return this.api.v1MessageAttemptListAttemptedMessagesWithHttpInfo(param.appId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.withContent, param.eventTypes,  options).toPromise();
    }

    /**
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * List Attempted Messages
     * @param param the request object
     */
    public v1MessageAttemptListAttemptedMessages(param: MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest, options?: Configuration): Promise<ListResponseEndpointMessageOut> {
        return this.api.v1MessageAttemptListAttemptedMessages(param.appId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.withContent, param.eventTypes,  options).toPromise();
    }

    /**
     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * List Attempts By Endpoint
     * @param param the request object
     */
    public v1MessageAttemptListByEndpointWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListByEndpointRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageAttemptOut>> {
        return this.api.v1MessageAttemptListByEndpointWithHttpInfo(param.appId, param.endpointId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.before, param.after, param.withContent, param.withMsg, param.eventTypes,  options).toPromise();
    }

    /**
     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * List Attempts By Endpoint
     * @param param the request object
     */
    public v1MessageAttemptListByEndpoint(param: MessageAttemptApiV1MessageAttemptListByEndpointRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut> {
        return this.api.v1MessageAttemptListByEndpoint(param.appId, param.endpointId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.before, param.after, param.withContent, param.withMsg, param.eventTypes,  options).toPromise();
    }

    /**
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * List Attempts For Endpoint
     * @param param the request object
     */
    public v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageAttemptEndpointOut>> {
        return this.api.v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(param.appId, param.msgId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.eventTypes,  options).toPromise();
    }

    /**
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * List Attempts For Endpoint
     * @param param the request object
     */
    public v1MessageAttemptListByEndpointDeprecated(param: MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest, options?: Configuration): Promise<ListResponseMessageAttemptEndpointOut> {
        return this.api.v1MessageAttemptListByEndpointDeprecated(param.appId, param.msgId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.eventTypes,  options).toPromise();
    }

    /**
     * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * List Attempts By Msg
     * @param param the request object
     */
    public v1MessageAttemptListByMsgWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListByMsgRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageAttemptOut>> {
        return this.api.v1MessageAttemptListByMsgWithHttpInfo(param.appId, param.msgId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.endpointId, param.before, param.after, param.withContent, param.eventTypes,  options).toPromise();
    }

    /**
     * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * List Attempts By Msg
     * @param param the request object
     */
    public v1MessageAttemptListByMsg(param: MessageAttemptApiV1MessageAttemptListByMsgRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut> {
        return this.api.v1MessageAttemptListByMsg(param.appId, param.msgId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.endpointId, param.before, param.after, param.withContent, param.eventTypes,  options).toPromise();
    }

    /**
     * Deprecated: Please use \"List Attempts by Endpoint\" and \"List Attempts by Msg\" instead.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`
     * List Attempts
     * @param param the request object
     */
    public v1MessageAttemptListByMsgDeprecatedWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageAttemptOut>> {
        return this.api.v1MessageAttemptListByMsgDeprecatedWithHttpInfo(param.appId, param.msgId, param.limit, param.iterator, param.endpointId, param.channel, param.tag, param.status, param.before, param.after, param.statusCodeClass, param.eventTypes,  options).toPromise();
    }

    /**
     * Deprecated: Please use \"List Attempts by Endpoint\" and \"List Attempts by Msg\" instead.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`
     * List Attempts
     * @param param the request object
     */
    public v1MessageAttemptListByMsgDeprecated(param: MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut> {
        return this.api.v1MessageAttemptListByMsgDeprecated(param.appId, param.msgId, param.limit, param.iterator, param.endpointId, param.channel, param.tag, param.status, param.before, param.after, param.statusCodeClass, param.eventTypes,  options).toPromise();
    }

    /**
     * Resend a message to the specified endpoint.
     * Resend Webhook
     * @param param the request object
     */
    public v1MessageAttemptResendWithHttpInfo(param: MessageAttemptApiV1MessageAttemptResendRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1MessageAttemptResendWithHttpInfo(param.appId, param.msgId, param.endpointId, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Resend a message to the specified endpoint.
     * Resend Webhook
     * @param param the request object
     */
    public v1MessageAttemptResend(param: MessageAttemptApiV1MessageAttemptResendRequest, options?: Configuration): Promise<void> {
        return this.api.v1MessageAttemptResend(param.appId, param.msgId, param.endpointId, param.idempotencyKey,  options).toPromise();
    }

}

import { ObservableStatisticsApi } from "./ObservableAPI";
import { StatisticsApiRequestFactory, StatisticsApiResponseProcessor} from "../apis/StatisticsApi";

export interface StatisticsApiV1StatisticsAggregateAppStatsRequest {
    /**
     * 
     * @type AppUsageStatsIn
     * @memberof StatisticsApiv1StatisticsAggregateAppStats
     */
    appUsageStatsIn: AppUsageStatsIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof StatisticsApiv1StatisticsAggregateAppStats
     */
    idempotencyKey?: string
}

export interface StatisticsApiV1StatisticsAggregateEventTypesRequest {
}

export interface StatisticsApiV1StatsAppAttemptsRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof StatisticsApiv1StatsAppAttempts
     */
    appId: string
    /**
     * Filter the range to data starting from this date
     * Defaults to: undefined
     * @type Date
     * @memberof StatisticsApiv1StatsAppAttempts
     */
    startDate?: Date
    /**
     * Filter the range to data ending by this date
     * Defaults to: undefined
     * @type Date
     * @memberof StatisticsApiv1StatsAppAttempts
     */
    endDate?: Date
}

export interface StatisticsApiV1StatsEndpointAttemptsRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof StatisticsApiv1StatsEndpointAttempts
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof StatisticsApiv1StatsEndpointAttempts
     */
    endpointId: string
    /**
     * Filter the range to data starting from this date
     * Defaults to: undefined
     * @type Date
     * @memberof StatisticsApiv1StatsEndpointAttempts
     */
    startDate?: Date
    /**
     * Filter the range to data ending by this date
     * Defaults to: undefined
     * @type Date
     * @memberof StatisticsApiv1StatsEndpointAttempts
     */
    endDate?: Date
}

export class ObjectStatisticsApi {
    private api: ObservableStatisticsApi

    public constructor(configuration: Configuration, requestFactory?: StatisticsApiRequestFactory, responseProcessor?: StatisticsApiResponseProcessor) {
        this.api = new ObservableStatisticsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.
     * Aggregate App Stats
     * @param param the request object
     */
    public v1StatisticsAggregateAppStatsWithHttpInfo(param: StatisticsApiV1StatisticsAggregateAppStatsRequest, options?: Configuration): Promise<HttpInfo<AppUsageStatsOut>> {
        return this.api.v1StatisticsAggregateAppStatsWithHttpInfo(param.appUsageStatsIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.
     * Aggregate App Stats
     * @param param the request object
     */
    public v1StatisticsAggregateAppStats(param: StatisticsApiV1StatisticsAggregateAppStatsRequest, options?: Configuration): Promise<AppUsageStatsOut> {
        return this.api.v1StatisticsAggregateAppStats(param.appUsageStatsIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.
     * Aggregate Event Types
     * @param param the request object
     */
    public v1StatisticsAggregateEventTypesWithHttpInfo(param: StatisticsApiV1StatisticsAggregateEventTypesRequest = {}, options?: Configuration): Promise<HttpInfo<AggregateEventTypesOut>> {
        return this.api.v1StatisticsAggregateEventTypesWithHttpInfo( options).toPromise();
    }

    /**
     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.
     * Aggregate Event Types
     * @param param the request object
     */
    public v1StatisticsAggregateEventTypes(param: StatisticsApiV1StatisticsAggregateEventTypesRequest = {}, options?: Configuration): Promise<AggregateEventTypesOut> {
        return this.api.v1StatisticsAggregateEventTypes( options).toPromise();
    }

    /**
     * Returns application-level statistics on message attempts
     * Get App Attempt Stats
     * @param param the request object
     */
    public v1StatsAppAttemptsWithHttpInfo(param: StatisticsApiV1StatsAppAttemptsRequest, options?: Configuration): Promise<HttpInfo<AttemptStatisticsResponse>> {
        return this.api.v1StatsAppAttemptsWithHttpInfo(param.appId, param.startDate, param.endDate,  options).toPromise();
    }

    /**
     * Returns application-level statistics on message attempts
     * Get App Attempt Stats
     * @param param the request object
     */
    public v1StatsAppAttempts(param: StatisticsApiV1StatsAppAttemptsRequest, options?: Configuration): Promise<AttemptStatisticsResponse> {
        return this.api.v1StatsAppAttempts(param.appId, param.startDate, param.endDate,  options).toPromise();
    }

    /**
     * Returns endpoint-level statistics on message attempts
     * Get Ep Stats
     * @param param the request object
     */
    public v1StatsEndpointAttemptsWithHttpInfo(param: StatisticsApiV1StatsEndpointAttemptsRequest, options?: Configuration): Promise<HttpInfo<AttemptStatisticsResponse>> {
        return this.api.v1StatsEndpointAttemptsWithHttpInfo(param.appId, param.endpointId, param.startDate, param.endDate,  options).toPromise();
    }

    /**
     * Returns endpoint-level statistics on message attempts
     * Get Ep Stats
     * @param param the request object
     */
    public v1StatsEndpointAttempts(param: StatisticsApiV1StatsEndpointAttemptsRequest, options?: Configuration): Promise<AttemptStatisticsResponse> {
        return this.api.v1StatsEndpointAttempts(param.appId, param.endpointId, param.startDate, param.endDate,  options).toPromise();
    }

}

import { ObservableStreamApi } from "./ObservableAPI";
import { StreamApiRequestFactory, StreamApiResponseProcessor} from "../apis/StreamApi";

export interface StreamApiV1StreamCreateRequest {
    /**
     * 
     * @type StreamIn
     * @memberof StreamApiv1StreamCreate
     */
    streamIn: StreamIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof StreamApiv1StreamCreate
     */
    idempotencyKey?: string
}

export interface StreamApiV1StreamCreateEventsRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof StreamApiv1StreamCreateEvents
     */
    streamId: string
    /**
     * 
     * @type CreateStreamIn
     * @memberof StreamApiv1StreamCreateEvents
     */
    createStreamIn: CreateStreamIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof StreamApiv1StreamCreateEvents
     */
    idempotencyKey?: string
}

export interface StreamApiV1StreamDeleteRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof StreamApiv1StreamDelete
     */
    streamId: string
}

export interface StreamApiV1StreamEventsGetRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof StreamApiv1StreamEventsGet
     */
    streamId: string
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof StreamApiv1StreamEventsGet
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof StreamApiv1StreamEventsGet
     */
    iterator?: string
    /**
     * 
     * Defaults to: undefined
     * @type Date
     * @memberof StreamApiv1StreamEventsGet
     */
    after?: Date
}

export interface StreamApiV1StreamGetRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof StreamApiv1StreamGet
     */
    streamId: string
}

export interface StreamApiV1StreamListRequest {
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof StreamApiv1StreamList
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof StreamApiv1StreamList
     */
    iterator?: string
    /**
     * The sorting order of the returned items
     * Defaults to: undefined
     * @type Ordering
     * @memberof StreamApiv1StreamList
     */
    order?: Ordering
}

export interface StreamApiV1StreamPatchRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof StreamApiv1StreamPatch
     */
    streamId: string
    /**
     * 
     * @type StreamPatch
     * @memberof StreamApiv1StreamPatch
     */
    streamPatch: StreamPatch
}

export interface StreamApiV1StreamUpdateRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof StreamApiv1StreamUpdate
     */
    streamId: string
    /**
     * 
     * @type StreamIn
     * @memberof StreamApiv1StreamUpdate
     */
    streamIn: StreamIn
}

export class ObjectStreamApi {
    private api: ObservableStreamApi

    public constructor(configuration: Configuration, requestFactory?: StreamApiRequestFactory, responseProcessor?: StreamApiResponseProcessor) {
        this.api = new ObservableStreamApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Creates a new stream.
     * Create Stream
     * @param param the request object
     */
    public v1StreamCreateWithHttpInfo(param: StreamApiV1StreamCreateRequest, options?: Configuration): Promise<HttpInfo<StreamOut>> {
        return this.api.v1StreamCreateWithHttpInfo(param.streamIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Creates a new stream.
     * Create Stream
     * @param param the request object
     */
    public v1StreamCreate(param: StreamApiV1StreamCreateRequest, options?: Configuration): Promise<StreamOut> {
        return this.api.v1StreamCreate(param.streamIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Creates events on the Stream.
     * Create Events
     * @param param the request object
     */
    public v1StreamCreateEventsWithHttpInfo(param: StreamApiV1StreamCreateEventsRequest, options?: Configuration): Promise<HttpInfo<any>> {
        return this.api.v1StreamCreateEventsWithHttpInfo(param.streamId, param.createStreamIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Creates events on the Stream.
     * Create Events
     * @param param the request object
     */
    public v1StreamCreateEvents(param: StreamApiV1StreamCreateEventsRequest, options?: Configuration): Promise<any> {
        return this.api.v1StreamCreateEvents(param.streamId, param.createStreamIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Delete a stream.
     * Delete Stream
     * @param param the request object
     */
    public v1StreamDeleteWithHttpInfo(param: StreamApiV1StreamDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1StreamDeleteWithHttpInfo(param.streamId,  options).toPromise();
    }

    /**
     * Delete a stream.
     * Delete Stream
     * @param param the request object
     */
    public v1StreamDelete(param: StreamApiV1StreamDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.v1StreamDelete(param.streamId,  options).toPromise();
    }

    /**
     * Iterate over a stream of events.
     * Stream Events
     * @param param the request object
     */
    public v1StreamEventsGetWithHttpInfo(param: StreamApiV1StreamEventsGetRequest, options?: Configuration): Promise<HttpInfo<EventStreamOut>> {
        return this.api.v1StreamEventsGetWithHttpInfo(param.streamId, param.limit, param.iterator, param.after,  options).toPromise();
    }

    /**
     * Iterate over a stream of events.
     * Stream Events
     * @param param the request object
     */
    public v1StreamEventsGet(param: StreamApiV1StreamEventsGetRequest, options?: Configuration): Promise<EventStreamOut> {
        return this.api.v1StreamEventsGet(param.streamId, param.limit, param.iterator, param.after,  options).toPromise();
    }

    /**
     * Get a stream by id or uid.
     * Get Stream
     * @param param the request object
     */
    public v1StreamGetWithHttpInfo(param: StreamApiV1StreamGetRequest, options?: Configuration): Promise<HttpInfo<StreamOut>> {
        return this.api.v1StreamGetWithHttpInfo(param.streamId,  options).toPromise();
    }

    /**
     * Get a stream by id or uid.
     * Get Stream
     * @param param the request object
     */
    public v1StreamGet(param: StreamApiV1StreamGetRequest, options?: Configuration): Promise<StreamOut> {
        return this.api.v1StreamGet(param.streamId,  options).toPromise();
    }

    /**
     * List of all the organization\'s streams.
     * List Streams
     * @param param the request object
     */
    public v1StreamListWithHttpInfo(param: StreamApiV1StreamListRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseStreamOut>> {
        return this.api.v1StreamListWithHttpInfo(param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * List of all the organization\'s streams.
     * List Streams
     * @param param the request object
     */
    public v1StreamList(param: StreamApiV1StreamListRequest = {}, options?: Configuration): Promise<ListResponseStreamOut> {
        return this.api.v1StreamList(param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * Partially update a stream.
     * Patch Stream
     * @param param the request object
     */
    public v1StreamPatchWithHttpInfo(param: StreamApiV1StreamPatchRequest, options?: Configuration): Promise<HttpInfo<StreamOut>> {
        return this.api.v1StreamPatchWithHttpInfo(param.streamId, param.streamPatch,  options).toPromise();
    }

    /**
     * Partially update a stream.
     * Patch Stream
     * @param param the request object
     */
    public v1StreamPatch(param: StreamApiV1StreamPatchRequest, options?: Configuration): Promise<StreamOut> {
        return this.api.v1StreamPatch(param.streamId, param.streamPatch,  options).toPromise();
    }

    /**
     * Update a stream.
     * Update Stream
     * @param param the request object
     */
    public v1StreamUpdateWithHttpInfo(param: StreamApiV1StreamUpdateRequest, options?: Configuration): Promise<HttpInfo<StreamOut>> {
        return this.api.v1StreamUpdateWithHttpInfo(param.streamId, param.streamIn,  options).toPromise();
    }

    /**
     * Update a stream.
     * Update Stream
     * @param param the request object
     */
    public v1StreamUpdate(param: StreamApiV1StreamUpdateRequest, options?: Configuration): Promise<StreamOut> {
        return this.api.v1StreamUpdate(param.streamId, param.streamIn,  options).toPromise();
    }

}

import { ObservableStreamEventTypesApi } from "./ObservableAPI";
import { StreamEventTypesApiRequestFactory, StreamEventTypesApiResponseProcessor} from "../apis/StreamEventTypesApi";

export interface StreamEventTypesApiV1StreamEventTypeCreateRequest {
    /**
     * 
     * @type StreamEventTypeIn
     * @memberof StreamEventTypesApiv1StreamEventTypeCreate
     */
    streamEventTypeIn: StreamEventTypeIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof StreamEventTypesApiv1StreamEventTypeCreate
     */
    idempotencyKey?: string
}

export interface StreamEventTypesApiV1StreamEventTypeDeleteRequest {
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof StreamEventTypesApiv1StreamEventTypeDelete
     */
    name: string
}

export interface StreamEventTypesApiV1StreamEventTypeGetRequest {
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof StreamEventTypesApiv1StreamEventTypeGet
     */
    name: string
}

export interface StreamEventTypesApiV1StreamEventTypeListRequest {
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof StreamEventTypesApiv1StreamEventTypeList
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof StreamEventTypesApiv1StreamEventTypeList
     */
    iterator?: string
    /**
     * The sorting order of the returned items
     * Defaults to: undefined
     * @type Ordering
     * @memberof StreamEventTypesApiv1StreamEventTypeList
     */
    order?: Ordering
}

export interface StreamEventTypesApiV1StreamEventTypePatchRequest {
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof StreamEventTypesApiv1StreamEventTypePatch
     */
    name: string
    /**
     * 
     * @type StreamEventTypePatch
     * @memberof StreamEventTypesApiv1StreamEventTypePatch
     */
    streamEventTypePatch: StreamEventTypePatch
}

export interface StreamEventTypesApiV1StreamEventTypeUpdateRequest {
    /**
     * The event type\&#39;s name
     * Defaults to: undefined
     * @type string
     * @memberof StreamEventTypesApiv1StreamEventTypeUpdate
     */
    name: string
    /**
     * 
     * @type StreamEventTypeIn
     * @memberof StreamEventTypesApiv1StreamEventTypeUpdate
     */
    streamEventTypeIn: StreamEventTypeIn
}

export class ObjectStreamEventTypesApi {
    private api: ObservableStreamEventTypesApi

    public constructor(configuration: Configuration, requestFactory?: StreamEventTypesApiRequestFactory, responseProcessor?: StreamEventTypesApiResponseProcessor) {
        this.api = new ObservableStreamEventTypesApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Create an event type for Streams.
     * Create Stream Event Type
     * @param param the request object
     */
    public v1StreamEventTypeCreateWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypeCreateRequest, options?: Configuration): Promise<HttpInfo<StreamEventTypeOut>> {
        return this.api.v1StreamEventTypeCreateWithHttpInfo(param.streamEventTypeIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Create an event type for Streams.
     * Create Stream Event Type
     * @param param the request object
     */
    public v1StreamEventTypeCreate(param: StreamEventTypesApiV1StreamEventTypeCreateRequest, options?: Configuration): Promise<StreamEventTypeOut> {
        return this.api.v1StreamEventTypeCreate(param.streamEventTypeIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Delete an event type.
     * Delete Stream Event Type
     * @param param the request object
     */
    public v1StreamEventTypeDeleteWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1StreamEventTypeDeleteWithHttpInfo(param.name,  options).toPromise();
    }

    /**
     * Delete an event type.
     * Delete Stream Event Type
     * @param param the request object
     */
    public v1StreamEventTypeDelete(param: StreamEventTypesApiV1StreamEventTypeDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.v1StreamEventTypeDelete(param.name,  options).toPromise();
    }

    /**
     * Get an event type.
     * Get Stream Event Type
     * @param param the request object
     */
    public v1StreamEventTypeGetWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypeGetRequest, options?: Configuration): Promise<HttpInfo<StreamEventTypeOut>> {
        return this.api.v1StreamEventTypeGetWithHttpInfo(param.name,  options).toPromise();
    }

    /**
     * Get an event type.
     * Get Stream Event Type
     * @param param the request object
     */
    public v1StreamEventTypeGet(param: StreamEventTypesApiV1StreamEventTypeGetRequest, options?: Configuration): Promise<StreamEventTypeOut> {
        return this.api.v1StreamEventTypeGet(param.name,  options).toPromise();
    }

    /**
     * List of all the organization\'s event types for streaming.
     * List Stream Event Types
     * @param param the request object
     */
    public v1StreamEventTypeListWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypeListRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseStreamEventTypeOut>> {
        return this.api.v1StreamEventTypeListWithHttpInfo(param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * List of all the organization\'s event types for streaming.
     * List Stream Event Types
     * @param param the request object
     */
    public v1StreamEventTypeList(param: StreamEventTypesApiV1StreamEventTypeListRequest = {}, options?: Configuration): Promise<ListResponseStreamEventTypeOut> {
        return this.api.v1StreamEventTypeList(param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * Patch an event type for Streams.
     * Patch Stream Event Type
     * @param param the request object
     */
    public v1StreamEventTypePatchWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypePatchRequest, options?: Configuration): Promise<HttpInfo<StreamEventTypeOut>> {
        return this.api.v1StreamEventTypePatchWithHttpInfo(param.name, param.streamEventTypePatch,  options).toPromise();
    }

    /**
     * Patch an event type for Streams.
     * Patch Stream Event Type
     * @param param the request object
     */
    public v1StreamEventTypePatch(param: StreamEventTypesApiV1StreamEventTypePatchRequest, options?: Configuration): Promise<StreamEventTypeOut> {
        return this.api.v1StreamEventTypePatch(param.name, param.streamEventTypePatch,  options).toPromise();
    }

    /**
     * Update or create a event type for Streams.
     * Update Stream Event Type
     * @param param the request object
     */
    public v1StreamEventTypeUpdateWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypeUpdateRequest, options?: Configuration): Promise<HttpInfo<StreamEventTypeOut>> {
        return this.api.v1StreamEventTypeUpdateWithHttpInfo(param.name, param.streamEventTypeIn,  options).toPromise();
    }

    /**
     * Update or create a event type for Streams.
     * Update Stream Event Type
     * @param param the request object
     */
    public v1StreamEventTypeUpdate(param: StreamEventTypesApiV1StreamEventTypeUpdateRequest, options?: Configuration): Promise<StreamEventTypeOut> {
        return this.api.v1StreamEventTypeUpdate(param.name, param.streamEventTypeIn,  options).toPromise();
    }

}

import { ObservableTransformationTemplateApi } from "./ObservableAPI";
import { TransformationTemplateApiRequestFactory, TransformationTemplateApiResponseProcessor} from "../apis/TransformationTemplateApi";

export interface TransformationTemplateApiV1EndpointUpdateHubspotOauthConfigRequest {
    /**
     * The app\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1EndpointUpdateHubspotOauthConfig
     */
    appId: string
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1EndpointUpdateHubspotOauthConfig
     */
    endpointId: string
    /**
     * 
     * @type HubspotOauthConfigIn
     * @memberof TransformationTemplateApiv1EndpointUpdateHubspotOauthConfig
     */
    hubspotOauthConfigIn: HubspotOauthConfigIn
}

export interface TransformationTemplateApiV1TransformationTemplateCreateRequest {
    /**
     * 
     * @type TemplateIn
     * @memberof TransformationTemplateApiv1TransformationTemplateCreate
     */
    templateIn: TemplateIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplateCreate
     */
    idempotencyKey?: string
}

export interface TransformationTemplateApiV1TransformationTemplateDeleteRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplateDelete
     */
    transformationTemplateId: string
}

export interface TransformationTemplateApiV1TransformationTemplateGenerateRequest {
    /**
     * 
     * @type GenerateIn
     * @memberof TransformationTemplateApiv1TransformationTemplateGenerate
     */
    generateIn: GenerateIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplateGenerate
     */
    idempotencyKey?: string
}

export interface TransformationTemplateApiV1TransformationTemplateGetRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplateGet
     */
    transformationTemplateId: string
}

export interface TransformationTemplateApiV1TransformationTemplateListRequest {
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof TransformationTemplateApiv1TransformationTemplateList
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplateList
     */
    iterator?: string
    /**
     * The sorting order of the returned items
     * Defaults to: undefined
     * @type Ordering
     * @memberof TransformationTemplateApiv1TransformationTemplateList
     */
    order?: Ordering
}

export interface TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest {
    /**
     * 
     * @type OAuthPayloadIn
     * @memberof TransformationTemplateApiv1TransformationTemplateOauthDiscord
     */
    oAuthPayloadIn: OAuthPayloadIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplateOauthDiscord
     */
    idempotencyKey?: string
}

export interface TransformationTemplateApiV1TransformationTemplateOauthHubspotRequest {
    /**
     * 
     * @type OAuthPayloadIn
     * @memberof TransformationTemplateApiv1TransformationTemplateOauthHubspot
     */
    oAuthPayloadIn: OAuthPayloadIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplateOauthHubspot
     */
    idempotencyKey?: string
}

export interface TransformationTemplateApiV1TransformationTemplateOauthSlackRequest {
    /**
     * 
     * @type OAuthPayloadIn
     * @memberof TransformationTemplateApiv1TransformationTemplateOauthSlack
     */
    oAuthPayloadIn: OAuthPayloadIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplateOauthSlack
     */
    idempotencyKey?: string
}

export interface TransformationTemplateApiV1TransformationTemplatePatchRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplatePatch
     */
    transformationTemplateId: string
    /**
     * 
     * @type TemplatePatch
     * @memberof TransformationTemplateApiv1TransformationTemplatePatch
     */
    templatePatch: TemplatePatch
}

export interface TransformationTemplateApiV1TransformationTemplateSimulateRequest {
    /**
     * 
     * @type TransformationSimulateIn
     * @memberof TransformationTemplateApiv1TransformationTemplateSimulate
     */
    transformationSimulateIn: TransformationSimulateIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplateSimulate
     */
    idempotencyKey?: string
}

export interface TransformationTemplateApiV1TransformationTemplateUpdateRequest {
    /**
     * 
     * Defaults to: undefined
     * @type string
     * @memberof TransformationTemplateApiv1TransformationTemplateUpdate
     */
    transformationTemplateId: string
    /**
     * 
     * @type TemplateUpdate
     * @memberof TransformationTemplateApiv1TransformationTemplateUpdate
     */
    templateUpdate: TemplateUpdate
}

export class ObjectTransformationTemplateApi {
    private api: ObservableTransformationTemplateApi

    public constructor(configuration: Configuration, requestFactory?: TransformationTemplateApiRequestFactory, responseProcessor?: TransformationTemplateApiResponseProcessor) {
        this.api = new ObservableTransformationTemplateApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Create/update endpoint Hubsport OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.
     * Update Hubspot Oauth Config
     * @param param the request object
     */
    public v1EndpointUpdateHubspotOauthConfigWithHttpInfo(param: TransformationTemplateApiV1EndpointUpdateHubspotOauthConfigRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1EndpointUpdateHubspotOauthConfigWithHttpInfo(param.appId, param.endpointId, param.hubspotOauthConfigIn,  options).toPromise();
    }

    /**
     * Create/update endpoint Hubsport OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.
     * Update Hubspot Oauth Config
     * @param param the request object
     */
    public v1EndpointUpdateHubspotOauthConfig(param: TransformationTemplateApiV1EndpointUpdateHubspotOauthConfigRequest, options?: Configuration): Promise<void> {
        return this.api.v1EndpointUpdateHubspotOauthConfig(param.appId, param.endpointId, param.hubspotOauthConfigIn,  options).toPromise();
    }

    /**
     * Create a new transformation template
     * Create Transformation Template
     * @param param the request object
     */
    public v1TransformationTemplateCreateWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateCreateRequest, options?: Configuration): Promise<HttpInfo<TemplateOut>> {
        return this.api.v1TransformationTemplateCreateWithHttpInfo(param.templateIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Create a new transformation template
     * Create Transformation Template
     * @param param the request object
     */
    public v1TransformationTemplateCreate(param: TransformationTemplateApiV1TransformationTemplateCreateRequest, options?: Configuration): Promise<TemplateOut> {
        return this.api.v1TransformationTemplateCreate(param.templateIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Delete a transformation template
     * Delete Transformation Template
     * @param param the request object
     */
    public v1TransformationTemplateDeleteWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.v1TransformationTemplateDeleteWithHttpInfo(param.transformationTemplateId,  options).toPromise();
    }

    /**
     * Delete a transformation template
     * Delete Transformation Template
     * @param param the request object
     */
    public v1TransformationTemplateDelete(param: TransformationTemplateApiV1TransformationTemplateDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.v1TransformationTemplateDelete(param.transformationTemplateId,  options).toPromise();
    }

    /**
     * Use OpenAI\'s Completion API to generate code for a transformation template
     * Generate
     * @param param the request object
     */
    public v1TransformationTemplateGenerateWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateGenerateRequest, options?: Configuration): Promise<HttpInfo<GenerateOut>> {
        return this.api.v1TransformationTemplateGenerateWithHttpInfo(param.generateIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Use OpenAI\'s Completion API to generate code for a transformation template
     * Generate
     * @param param the request object
     */
    public v1TransformationTemplateGenerate(param: TransformationTemplateApiV1TransformationTemplateGenerateRequest, options?: Configuration): Promise<GenerateOut> {
        return this.api.v1TransformationTemplateGenerate(param.generateIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Get a transformation template
     * Get Transformation Template
     * @param param the request object
     */
    public v1TransformationTemplateGetWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateGetRequest, options?: Configuration): Promise<HttpInfo<TemplateOut>> {
        return this.api.v1TransformationTemplateGetWithHttpInfo(param.transformationTemplateId,  options).toPromise();
    }

    /**
     * Get a transformation template
     * Get Transformation Template
     * @param param the request object
     */
    public v1TransformationTemplateGet(param: TransformationTemplateApiV1TransformationTemplateGetRequest, options?: Configuration): Promise<TemplateOut> {
        return this.api.v1TransformationTemplateGet(param.transformationTemplateId,  options).toPromise();
    }

    /**
     * List all transformation templates for an application
     * List Transformation Templates
     * @param param the request object
     */
    public v1TransformationTemplateListWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateListRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseTemplateOut>> {
        return this.api.v1TransformationTemplateListWithHttpInfo(param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * List all transformation templates for an application
     * List Transformation Templates
     * @param param the request object
     */
    public v1TransformationTemplateList(param: TransformationTemplateApiV1TransformationTemplateListRequest = {}, options?: Configuration): Promise<ListResponseTemplateOut> {
        return this.api.v1TransformationTemplateList(param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * Get Discord Incoming webhook URL
     * Authorize Discord
     * @param param the request object
     */
    public v1TransformationTemplateOauthDiscordWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest, options?: Configuration): Promise<HttpInfo<IncomingWebhookPayloadOut>> {
        return this.api.v1TransformationTemplateOauthDiscordWithHttpInfo(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Get Discord Incoming webhook URL
     * Authorize Discord
     * @param param the request object
     */
    public v1TransformationTemplateOauthDiscord(param: TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest, options?: Configuration): Promise<IncomingWebhookPayloadOut> {
        return this.api.v1TransformationTemplateOauthDiscord(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Get Hubspot access token using authorization code
     * Authorize Hubspot
     * @param param the request object
     */
    public v1TransformationTemplateOauthHubspotWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateOauthHubspotRequest, options?: Configuration): Promise<HttpInfo<OAuthPayloadOut>> {
        return this.api.v1TransformationTemplateOauthHubspotWithHttpInfo(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Get Hubspot access token using authorization code
     * Authorize Hubspot
     * @param param the request object
     */
    public v1TransformationTemplateOauthHubspot(param: TransformationTemplateApiV1TransformationTemplateOauthHubspotRequest, options?: Configuration): Promise<OAuthPayloadOut> {
        return this.api.v1TransformationTemplateOauthHubspot(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Get Slack Incoming webhook URL
     * Authorize Slack
     * @param param the request object
     */
    public v1TransformationTemplateOauthSlackWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateOauthSlackRequest, options?: Configuration): Promise<HttpInfo<IncomingWebhookPayloadOut>> {
        return this.api.v1TransformationTemplateOauthSlackWithHttpInfo(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Get Slack Incoming webhook URL
     * Authorize Slack
     * @param param the request object
     */
    public v1TransformationTemplateOauthSlack(param: TransformationTemplateApiV1TransformationTemplateOauthSlackRequest, options?: Configuration): Promise<IncomingWebhookPayloadOut> {
        return this.api.v1TransformationTemplateOauthSlack(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Partially update a transformation template
     * Patch Transformation Template
     * @param param the request object
     */
    public v1TransformationTemplatePatchWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplatePatchRequest, options?: Configuration): Promise<HttpInfo<TemplateOut>> {
        return this.api.v1TransformationTemplatePatchWithHttpInfo(param.transformationTemplateId, param.templatePatch,  options).toPromise();
    }

    /**
     * Partially update a transformation template
     * Patch Transformation Template
     * @param param the request object
     */
    public v1TransformationTemplatePatch(param: TransformationTemplateApiV1TransformationTemplatePatchRequest, options?: Configuration): Promise<TemplateOut> {
        return this.api.v1TransformationTemplatePatch(param.transformationTemplateId, param.templatePatch,  options).toPromise();
    }

    /**
     * Simulate running the transformation on the payload and code
     * Simulate
     * @param param the request object
     */
    public v1TransformationTemplateSimulateWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateSimulateRequest, options?: Configuration): Promise<HttpInfo<TransformationSimulateOut>> {
        return this.api.v1TransformationTemplateSimulateWithHttpInfo(param.transformationSimulateIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Simulate running the transformation on the payload and code
     * Simulate
     * @param param the request object
     */
    public v1TransformationTemplateSimulate(param: TransformationTemplateApiV1TransformationTemplateSimulateRequest, options?: Configuration): Promise<TransformationSimulateOut> {
        return this.api.v1TransformationTemplateSimulate(param.transformationSimulateIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Update a transformation template
     * Update Transformation Template
     * @param param the request object
     */
    public v1TransformationTemplateUpdateWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateUpdateRequest, options?: Configuration): Promise<HttpInfo<TemplateOut>> {
        return this.api.v1TransformationTemplateUpdateWithHttpInfo(param.transformationTemplateId, param.templateUpdate,  options).toPromise();
    }

    /**
     * Update a transformation template
     * Update Transformation Template
     * @param param the request object
     */
    public v1TransformationTemplateUpdate(param: TransformationTemplateApiV1TransformationTemplateUpdateRequest, options?: Configuration): Promise<TemplateOut> {
        return this.api.v1TransformationTemplateUpdate(param.transformationTemplateId, param.templateUpdate,  options).toPromise();
    }

}

import { ObservableWebhookEndpointApi } from "./ObservableAPI";
import { WebhookEndpointApiRequestFactory, WebhookEndpointApiResponseProcessor} from "../apis/WebhookEndpointApi";

export interface WebhookEndpointApiCreateOperationalWebhookEndpointRequest {
    /**
     * 
     * @type OperationalWebhookEndpointIn
     * @memberof WebhookEndpointApicreateOperationalWebhookEndpoint
     */
    operationalWebhookEndpointIn: OperationalWebhookEndpointIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof WebhookEndpointApicreateOperationalWebhookEndpoint
     */
    idempotencyKey?: string
}

export interface WebhookEndpointApiDeleteOperationalWebhookEndpointRequest {
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof WebhookEndpointApideleteOperationalWebhookEndpoint
     */
    endpointId: string
}

export interface WebhookEndpointApiGetOperationalWebhookEndpointRequest {
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof WebhookEndpointApigetOperationalWebhookEndpoint
     */
    endpointId: string
}

export interface WebhookEndpointApiGetOperationalWebhookEndpointSecretRequest {
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof WebhookEndpointApigetOperationalWebhookEndpointSecret
     */
    endpointId: string
}

export interface WebhookEndpointApiListOperationalWebhookEndpointsRequest {
    /**
     * Limit the number of returned items
     * Minimum: 1
     * Maximum: 250
     * Defaults to: undefined
     * @type number
     * @memberof WebhookEndpointApilistOperationalWebhookEndpoints
     */
    limit?: number
    /**
     * The iterator returned from a prior invocation
     * Defaults to: undefined
     * @type string
     * @memberof WebhookEndpointApilistOperationalWebhookEndpoints
     */
    iterator?: string
    /**
     * The sorting order of the returned items
     * Defaults to: undefined
     * @type Ordering
     * @memberof WebhookEndpointApilistOperationalWebhookEndpoints
     */
    order?: Ordering
}

export interface WebhookEndpointApiRotateOperationalWebhookEndpointSecretRequest {
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof WebhookEndpointApirotateOperationalWebhookEndpointSecret
     */
    endpointId: string
    /**
     * 
     * @type OperationalWebhookEndpointSecretIn
     * @memberof WebhookEndpointApirotateOperationalWebhookEndpointSecret
     */
    operationalWebhookEndpointSecretIn: OperationalWebhookEndpointSecretIn
    /**
     * The request\&#39;s idempotency key
     * Defaults to: undefined
     * @type string
     * @memberof WebhookEndpointApirotateOperationalWebhookEndpointSecret
     */
    idempotencyKey?: string
}

export interface WebhookEndpointApiUpdateOperationalWebhookEndpointRequest {
    /**
     * The ep\&#39;s ID or UID
     * Defaults to: undefined
     * @type string
     * @memberof WebhookEndpointApiupdateOperationalWebhookEndpoint
     */
    endpointId: string
    /**
     * 
     * @type OperationalWebhookEndpointUpdate
     * @memberof WebhookEndpointApiupdateOperationalWebhookEndpoint
     */
    operationalWebhookEndpointUpdate: OperationalWebhookEndpointUpdate
}

export class ObjectWebhookEndpointApi {
    private api: ObservableWebhookEndpointApi

    public constructor(configuration: Configuration, requestFactory?: WebhookEndpointApiRequestFactory, responseProcessor?: WebhookEndpointApiResponseProcessor) {
        this.api = new ObservableWebhookEndpointApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Create an operational webhook endpoint.
     * Create Operational Webhook Endpoint
     * @param param the request object
     */
    public createOperationalWebhookEndpointWithHttpInfo(param: WebhookEndpointApiCreateOperationalWebhookEndpointRequest, options?: Configuration): Promise<HttpInfo<OperationalWebhookEndpointOut>> {
        return this.api.createOperationalWebhookEndpointWithHttpInfo(param.operationalWebhookEndpointIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Create an operational webhook endpoint.
     * Create Operational Webhook Endpoint
     * @param param the request object
     */
    public createOperationalWebhookEndpoint(param: WebhookEndpointApiCreateOperationalWebhookEndpointRequest, options?: Configuration): Promise<OperationalWebhookEndpointOut> {
        return this.api.createOperationalWebhookEndpoint(param.operationalWebhookEndpointIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Delete an operational webhook endpoint.
     * Delete Operational Webhook Endpoint
     * @param param the request object
     */
    public deleteOperationalWebhookEndpointWithHttpInfo(param: WebhookEndpointApiDeleteOperationalWebhookEndpointRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.deleteOperationalWebhookEndpointWithHttpInfo(param.endpointId,  options).toPromise();
    }

    /**
     * Delete an operational webhook endpoint.
     * Delete Operational Webhook Endpoint
     * @param param the request object
     */
    public deleteOperationalWebhookEndpoint(param: WebhookEndpointApiDeleteOperationalWebhookEndpointRequest, options?: Configuration): Promise<void> {
        return this.api.deleteOperationalWebhookEndpoint(param.endpointId,  options).toPromise();
    }

    /**
     * Get an operational webhook endpoint.
     * Get Operational Webhook Endpoint
     * @param param the request object
     */
    public getOperationalWebhookEndpointWithHttpInfo(param: WebhookEndpointApiGetOperationalWebhookEndpointRequest, options?: Configuration): Promise<HttpInfo<OperationalWebhookEndpointOut>> {
        return this.api.getOperationalWebhookEndpointWithHttpInfo(param.endpointId,  options).toPromise();
    }

    /**
     * Get an operational webhook endpoint.
     * Get Operational Webhook Endpoint
     * @param param the request object
     */
    public getOperationalWebhookEndpoint(param: WebhookEndpointApiGetOperationalWebhookEndpointRequest, options?: Configuration): Promise<OperationalWebhookEndpointOut> {
        return this.api.getOperationalWebhookEndpoint(param.endpointId,  options).toPromise();
    }

    /**
     * Get an operational webhook endpoint\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
     * Get Operational Webhook Endpoint Secret
     * @param param the request object
     */
    public getOperationalWebhookEndpointSecretWithHttpInfo(param: WebhookEndpointApiGetOperationalWebhookEndpointSecretRequest, options?: Configuration): Promise<HttpInfo<OperationalWebhookEndpointSecretOut>> {
        return this.api.getOperationalWebhookEndpointSecretWithHttpInfo(param.endpointId,  options).toPromise();
    }

    /**
     * Get an operational webhook endpoint\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
     * Get Operational Webhook Endpoint Secret
     * @param param the request object
     */
    public getOperationalWebhookEndpointSecret(param: WebhookEndpointApiGetOperationalWebhookEndpointSecretRequest, options?: Configuration): Promise<OperationalWebhookEndpointSecretOut> {
        return this.api.getOperationalWebhookEndpointSecret(param.endpointId,  options).toPromise();
    }

    /**
     * List operational webhook endpoints.
     * List Operational Webhook Endpoints
     * @param param the request object
     */
    public listOperationalWebhookEndpointsWithHttpInfo(param: WebhookEndpointApiListOperationalWebhookEndpointsRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseOperationalWebhookEndpointOut>> {
        return this.api.listOperationalWebhookEndpointsWithHttpInfo(param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * List operational webhook endpoints.
     * List Operational Webhook Endpoints
     * @param param the request object
     */
    public listOperationalWebhookEndpoints(param: WebhookEndpointApiListOperationalWebhookEndpointsRequest = {}, options?: Configuration): Promise<ListResponseOperationalWebhookEndpointOut> {
        return this.api.listOperationalWebhookEndpoints(param.limit, param.iterator, param.order,  options).toPromise();
    }

    /**
     * Rotates an operational webhook endpoint\'s signing secret.  The previous secret will remain valid for the next 24 hours.
     * Rotate Operational Webhook Endpoint Secret
     * @param param the request object
     */
    public rotateOperationalWebhookEndpointSecretWithHttpInfo(param: WebhookEndpointApiRotateOperationalWebhookEndpointSecretRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.rotateOperationalWebhookEndpointSecretWithHttpInfo(param.endpointId, param.operationalWebhookEndpointSecretIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Rotates an operational webhook endpoint\'s signing secret.  The previous secret will remain valid for the next 24 hours.
     * Rotate Operational Webhook Endpoint Secret
     * @param param the request object
     */
    public rotateOperationalWebhookEndpointSecret(param: WebhookEndpointApiRotateOperationalWebhookEndpointSecretRequest, options?: Configuration): Promise<void> {
        return this.api.rotateOperationalWebhookEndpointSecret(param.endpointId, param.operationalWebhookEndpointSecretIn, param.idempotencyKey,  options).toPromise();
    }

    /**
     * Update an operational webhook endpoint.
     * Update Operational Webhook Endpoint
     * @param param the request object
     */
    public updateOperationalWebhookEndpointWithHttpInfo(param: WebhookEndpointApiUpdateOperationalWebhookEndpointRequest, options?: Configuration): Promise<HttpInfo<OperationalWebhookEndpointOut>> {
        return this.api.updateOperationalWebhookEndpointWithHttpInfo(param.endpointId, param.operationalWebhookEndpointUpdate,  options).toPromise();
    }

    /**
     * Update an operational webhook endpoint.
     * Update Operational Webhook Endpoint
     * @param param the request object
     */
    public updateOperationalWebhookEndpoint(param: WebhookEndpointApiUpdateOperationalWebhookEndpointRequest, options?: Configuration): Promise<OperationalWebhookEndpointOut> {
        return this.api.updateOperationalWebhookEndpoint(param.endpointId, param.operationalWebhookEndpointUpdate,  options).toPromise();
    }

}

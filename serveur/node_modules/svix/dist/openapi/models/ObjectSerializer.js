"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("../models/AggregateEventTypesOut"), exports);
__exportStar(require("../models/AppPortalAccessIn"), exports);
__exportStar(require("../models/AppPortalAccessOut"), exports);
__exportStar(require("../models/AppUsageStatsIn"), exports);
__exportStar(require("../models/AppUsageStatsOut"), exports);
__exportStar(require("../models/ApplicationIn"), exports);
__exportStar(require("../models/ApplicationOut"), exports);
__exportStar(require("../models/ApplicationPatch"), exports);
__exportStar(require("../models/ApplicationStats"), exports);
__exportStar(require("../models/ApplicationTokenExpireIn"), exports);
__exportStar(require("../models/AttemptStatisticsData"), exports);
__exportStar(require("../models/AttemptStatisticsResponse"), exports);
__exportStar(require("../models/AuthTokenOut"), exports);
__exportStar(require("../models/AzureBlobStorageConfig"), exports);
__exportStar(require("../models/BackgroundTaskOut"), exports);
__exportStar(require("../models/BackgroundTaskStatus"), exports);
__exportStar(require("../models/BackgroundTaskType"), exports);
__exportStar(require("../models/BigQueryConfig"), exports);
__exportStar(require("../models/BorderRadiusConfig"), exports);
__exportStar(require("../models/BorderRadiusEnum"), exports);
__exportStar(require("../models/ClientSecretJwtParamsIn"), exports);
__exportStar(require("../models/CompletionChoice"), exports);
__exportStar(require("../models/CompletionMessage"), exports);
__exportStar(require("../models/CreateMessageTokenIn"), exports);
__exportStar(require("../models/CreateStreamIn"), exports);
__exportStar(require("../models/CustomColorPalette"), exports);
__exportStar(require("../models/CustomStringsOverride"), exports);
__exportStar(require("../models/CustomThemeOverride"), exports);
__exportStar(require("../models/DashboardAccessOut"), exports);
__exportStar(require("../models/Duration"), exports);
__exportStar(require("../models/EndpointCreatedEvent"), exports);
__exportStar(require("../models/EndpointCreatedEventData"), exports);
__exportStar(require("../models/EndpointDeletedEvent"), exports);
__exportStar(require("../models/EndpointDeletedEventData"), exports);
__exportStar(require("../models/EndpointDisabledEvent"), exports);
__exportStar(require("../models/EndpointDisabledEventData"), exports);
__exportStar(require("../models/EndpointHeadersIn"), exports);
__exportStar(require("../models/EndpointHeadersOut"), exports);
__exportStar(require("../models/EndpointHeadersPatchIn"), exports);
__exportStar(require("../models/EndpointIn"), exports);
__exportStar(require("../models/EndpointMessageOut"), exports);
__exportStar(require("../models/EndpointMtlsConfigIn"), exports);
__exportStar(require("../models/EndpointOauthConfigIn"), exports);
__exportStar(require("../models/EndpointOut"), exports);
__exportStar(require("../models/EndpointPatch"), exports);
__exportStar(require("../models/EndpointSecretOut"), exports);
__exportStar(require("../models/EndpointSecretRotateIn"), exports);
__exportStar(require("../models/EndpointStats"), exports);
__exportStar(require("../models/EndpointTransformationIn"), exports);
__exportStar(require("../models/EndpointTransformationOut"), exports);
__exportStar(require("../models/EndpointTransformationSimulateIn"), exports);
__exportStar(require("../models/EndpointTransformationSimulateOut"), exports);
__exportStar(require("../models/EndpointUpdate"), exports);
__exportStar(require("../models/EndpointUpdatedEvent"), exports);
__exportStar(require("../models/EndpointUpdatedEventData"), exports);
__exportStar(require("../models/EnvironmentIn"), exports);
__exportStar(require("../models/EnvironmentOut"), exports);
__exportStar(require("../models/EnvironmentSettingsOut"), exports);
__exportStar(require("../models/EventExampleIn"), exports);
__exportStar(require("../models/EventIn"), exports);
__exportStar(require("../models/EventOut"), exports);
__exportStar(require("../models/EventStreamOut"), exports);
__exportStar(require("../models/EventTypeExampleOut"), exports);
__exportStar(require("../models/EventTypeFromOpenApi"), exports);
__exportStar(require("../models/EventTypeImportOpenApiIn"), exports);
__exportStar(require("../models/EventTypeImportOpenApiOut"), exports);
__exportStar(require("../models/EventTypeImportOpenApiOutData"), exports);
__exportStar(require("../models/EventTypeIn"), exports);
__exportStar(require("../models/EventTypeOut"), exports);
__exportStar(require("../models/EventTypePatch"), exports);
__exportStar(require("../models/EventTypeSchemaIn"), exports);
__exportStar(require("../models/EventTypeUpdate"), exports);
__exportStar(require("../models/ExportEventTypeOut"), exports);
__exportStar(require("../models/FontSizeConfig"), exports);
__exportStar(require("../models/GenerateIn"), exports);
__exportStar(require("../models/GenerateOut"), exports);
__exportStar(require("../models/GoogleCloudStorageConfig"), exports);
__exportStar(require("../models/HTTPValidationError"), exports);
__exportStar(require("../models/HttpErrorOut"), exports);
__exportStar(require("../models/HubspotOauthConfigIn"), exports);
__exportStar(require("../models/InboundPathParams"), exports);
__exportStar(require("../models/IncomingWebhookPayloadOut"), exports);
__exportStar(require("../models/IntegrationIn"), exports);
__exportStar(require("../models/IntegrationKeyOut"), exports);
__exportStar(require("../models/IntegrationOut"), exports);
__exportStar(require("../models/IntegrationUpdate"), exports);
__exportStar(require("../models/KafkaSecurityProtocolType"), exports);
__exportStar(require("../models/ListResponseApplicationOut"), exports);
__exportStar(require("../models/ListResponseApplicationStats"), exports);
__exportStar(require("../models/ListResponseBackgroundTaskOut"), exports);
__exportStar(require("../models/ListResponseEndpointMessageOut"), exports);
__exportStar(require("../models/ListResponseEndpointOut"), exports);
__exportStar(require("../models/ListResponseEventTypeOut"), exports);
__exportStar(require("../models/ListResponseIntegrationOut"), exports);
__exportStar(require("../models/ListResponseMessageAttemptEndpointOut"), exports);
__exportStar(require("../models/ListResponseMessageAttemptOut"), exports);
__exportStar(require("../models/ListResponseMessageEndpointOut"), exports);
__exportStar(require("../models/ListResponseMessageOut"), exports);
__exportStar(require("../models/ListResponseOperationalWebhookEndpointOut"), exports);
__exportStar(require("../models/ListResponseSinkOut"), exports);
__exportStar(require("../models/ListResponseStreamEventTypeOut"), exports);
__exportStar(require("../models/ListResponseStreamOut"), exports);
__exportStar(require("../models/ListResponseStreamSinkOut"), exports);
__exportStar(require("../models/ListResponseTemplateOut"), exports);
__exportStar(require("../models/MessageAttemptEndpointOut"), exports);
__exportStar(require("../models/MessageAttemptExhaustedEvent"), exports);
__exportStar(require("../models/MessageAttemptExhaustedEventData"), exports);
__exportStar(require("../models/MessageAttemptFailedData"), exports);
__exportStar(require("../models/MessageAttemptFailingEvent"), exports);
__exportStar(require("../models/MessageAttemptFailingEventData"), exports);
__exportStar(require("../models/MessageAttemptHeadersOut"), exports);
__exportStar(require("../models/MessageAttemptOut"), exports);
__exportStar(require("../models/MessageAttemptRecoveredEvent"), exports);
__exportStar(require("../models/MessageAttemptRecoveredEventData"), exports);
__exportStar(require("../models/MessageAttemptTriggerType"), exports);
__exportStar(require("../models/MessageBroadcastIn"), exports);
__exportStar(require("../models/MessageBroadcastOut"), exports);
__exportStar(require("../models/MessageEndpointOut"), exports);
__exportStar(require("../models/MessageEventsOut"), exports);
__exportStar(require("../models/MessageIn"), exports);
__exportStar(require("../models/MessageOut"), exports);
__exportStar(require("../models/MessageRawPayloadOut"), exports);
__exportStar(require("../models/MessageStatus"), exports);
__exportStar(require("../models/MessageSubscriberAuthTokenOut"), exports);
__exportStar(require("../models/OAuthPayloadIn"), exports);
__exportStar(require("../models/OAuthPayloadOut"), exports);
__exportStar(require("../models/Oauth2AuthMethodIn"), exports);
__exportStar(require("../models/Oauth2GrantTypeIn"), exports);
__exportStar(require("../models/OauthJwsSigningAlgorithm"), exports);
__exportStar(require("../models/OneTimeTokenIn"), exports);
__exportStar(require("../models/OneTimeTokenOut"), exports);
__exportStar(require("../models/OperationalWebhookEndpointIn"), exports);
__exportStar(require("../models/OperationalWebhookEndpointOut"), exports);
__exportStar(require("../models/OperationalWebhookEndpointSecretIn"), exports);
__exportStar(require("../models/OperationalWebhookEndpointSecretOut"), exports);
__exportStar(require("../models/OperationalWebhookEndpointUpdate"), exports);
__exportStar(require("../models/Ordering"), exports);
__exportStar(require("../models/RecoverIn"), exports);
__exportStar(require("../models/RecoverOut"), exports);
__exportStar(require("../models/RedshiftConfig"), exports);
__exportStar(require("../models/ReplayIn"), exports);
__exportStar(require("../models/ReplayOut"), exports);
__exportStar(require("../models/RetryScheduleInOut"), exports);
__exportStar(require("../models/RotatedUrlOut"), exports);
__exportStar(require("../models/S3Config"), exports);
__exportStar(require("../models/SettingsIn"), exports);
__exportStar(require("../models/SettingsOut"), exports);
__exportStar(require("../models/SinkHttpConfig"), exports);
__exportStar(require("../models/SinkIn"), exports);
__exportStar(require("../models/SinkInOneOf"), exports);
__exportStar(require("../models/SinkInOneOf1"), exports);
__exportStar(require("../models/SinkInOneOf2"), exports);
__exportStar(require("../models/SinkInOneOf3"), exports);
__exportStar(require("../models/SinkOtelV1Config"), exports);
__exportStar(require("../models/SinkOut"), exports);
__exportStar(require("../models/SinkPayloadFormat"), exports);
__exportStar(require("../models/SinkStatus"), exports);
__exportStar(require("../models/SinkStatusIn"), exports);
__exportStar(require("../models/SinkTransformIn"), exports);
__exportStar(require("../models/SinkTransformationOut"), exports);
__exportStar(require("../models/SnowflakeConfig"), exports);
__exportStar(require("../models/StatisticsPeriod"), exports);
__exportStar(require("../models/StatusCodeClass"), exports);
__exportStar(require("../models/StreamEventTypeIn"), exports);
__exportStar(require("../models/StreamEventTypeOut"), exports);
__exportStar(require("../models/StreamEventTypePatch"), exports);
__exportStar(require("../models/StreamIn"), exports);
__exportStar(require("../models/StreamOut"), exports);
__exportStar(require("../models/StreamPatch"), exports);
__exportStar(require("../models/StreamSinkIn"), exports);
__exportStar(require("../models/StreamSinkInOneOf"), exports);
__exportStar(require("../models/StreamSinkInOneOf1"), exports);
__exportStar(require("../models/StreamSinkInOneOf2"), exports);
__exportStar(require("../models/StreamSinkInOneOf3"), exports);
__exportStar(require("../models/StreamSinkInOneOf4"), exports);
__exportStar(require("../models/StreamSinkInOneOf5"), exports);
__exportStar(require("../models/StreamSinkInOneOf6"), exports);
__exportStar(require("../models/StreamSinkInOneOf7"), exports);
__exportStar(require("../models/StreamSinkOut"), exports);
__exportStar(require("../models/StreamSinkPatch"), exports);
__exportStar(require("../models/TemplateIn"), exports);
__exportStar(require("../models/TemplateOut"), exports);
__exportStar(require("../models/TemplatePatch"), exports);
__exportStar(require("../models/TemplateUpdate"), exports);
__exportStar(require("../models/TransformationHttpMethod"), exports);
__exportStar(require("../models/TransformationSimulateIn"), exports);
__exportStar(require("../models/TransformationSimulateOut"), exports);
__exportStar(require("../models/TransformationTemplateKind"), exports);
__exportStar(require("../models/ValidationError"), exports);
const AggregateEventTypesOut_1 = require("../models/AggregateEventTypesOut");
const AppPortalAccessIn_1 = require("../models/AppPortalAccessIn");
const AppPortalAccessOut_1 = require("../models/AppPortalAccessOut");
const AppUsageStatsIn_1 = require("../models/AppUsageStatsIn");
const AppUsageStatsOut_1 = require("../models/AppUsageStatsOut");
const ApplicationIn_1 = require("../models/ApplicationIn");
const ApplicationOut_1 = require("../models/ApplicationOut");
const ApplicationPatch_1 = require("../models/ApplicationPatch");
const ApplicationStats_1 = require("../models/ApplicationStats");
const ApplicationTokenExpireIn_1 = require("../models/ApplicationTokenExpireIn");
const AttemptStatisticsData_1 = require("../models/AttemptStatisticsData");
const AttemptStatisticsResponse_1 = require("../models/AttemptStatisticsResponse");
const AuthTokenOut_1 = require("../models/AuthTokenOut");
const AzureBlobStorageConfig_1 = require("../models/AzureBlobStorageConfig");
const BackgroundTaskOut_1 = require("../models/BackgroundTaskOut");
const BigQueryConfig_1 = require("../models/BigQueryConfig");
const BorderRadiusConfig_1 = require("../models/BorderRadiusConfig");
const ClientSecretJwtParamsIn_1 = require("../models/ClientSecretJwtParamsIn");
const CompletionChoice_1 = require("../models/CompletionChoice");
const CompletionMessage_1 = require("../models/CompletionMessage");
const CreateMessageTokenIn_1 = require("../models/CreateMessageTokenIn");
const CreateStreamIn_1 = require("../models/CreateStreamIn");
const CustomColorPalette_1 = require("../models/CustomColorPalette");
const CustomStringsOverride_1 = require("../models/CustomStringsOverride");
const CustomThemeOverride_1 = require("../models/CustomThemeOverride");
const DashboardAccessOut_1 = require("../models/DashboardAccessOut");
const Duration_1 = require("../models/Duration");
const EndpointCreatedEvent_1 = require("../models/EndpointCreatedEvent");
const EndpointCreatedEventData_1 = require("../models/EndpointCreatedEventData");
const EndpointDeletedEvent_1 = require("../models/EndpointDeletedEvent");
const EndpointDeletedEventData_1 = require("../models/EndpointDeletedEventData");
const EndpointDisabledEvent_1 = require("../models/EndpointDisabledEvent");
const EndpointDisabledEventData_1 = require("../models/EndpointDisabledEventData");
const EndpointHeadersIn_1 = require("../models/EndpointHeadersIn");
const EndpointHeadersOut_1 = require("../models/EndpointHeadersOut");
const EndpointHeadersPatchIn_1 = require("../models/EndpointHeadersPatchIn");
const EndpointIn_1 = require("../models/EndpointIn");
const EndpointMessageOut_1 = require("../models/EndpointMessageOut");
const EndpointMtlsConfigIn_1 = require("../models/EndpointMtlsConfigIn");
const EndpointOauthConfigIn_1 = require("../models/EndpointOauthConfigIn");
const EndpointOut_1 = require("../models/EndpointOut");
const EndpointPatch_1 = require("../models/EndpointPatch");
const EndpointSecretOut_1 = require("../models/EndpointSecretOut");
const EndpointSecretRotateIn_1 = require("../models/EndpointSecretRotateIn");
const EndpointStats_1 = require("../models/EndpointStats");
const EndpointTransformationIn_1 = require("../models/EndpointTransformationIn");
const EndpointTransformationOut_1 = require("../models/EndpointTransformationOut");
const EndpointTransformationSimulateIn_1 = require("../models/EndpointTransformationSimulateIn");
const EndpointTransformationSimulateOut_1 = require("../models/EndpointTransformationSimulateOut");
const EndpointUpdate_1 = require("../models/EndpointUpdate");
const EndpointUpdatedEvent_1 = require("../models/EndpointUpdatedEvent");
const EndpointUpdatedEventData_1 = require("../models/EndpointUpdatedEventData");
const EnvironmentIn_1 = require("../models/EnvironmentIn");
const EnvironmentOut_1 = require("../models/EnvironmentOut");
const EnvironmentSettingsOut_1 = require("../models/EnvironmentSettingsOut");
const EventExampleIn_1 = require("../models/EventExampleIn");
const EventIn_1 = require("../models/EventIn");
const EventOut_1 = require("../models/EventOut");
const EventStreamOut_1 = require("../models/EventStreamOut");
const EventTypeExampleOut_1 = require("../models/EventTypeExampleOut");
const EventTypeFromOpenApi_1 = require("../models/EventTypeFromOpenApi");
const EventTypeImportOpenApiIn_1 = require("../models/EventTypeImportOpenApiIn");
const EventTypeImportOpenApiOut_1 = require("../models/EventTypeImportOpenApiOut");
const EventTypeImportOpenApiOutData_1 = require("../models/EventTypeImportOpenApiOutData");
const EventTypeIn_1 = require("../models/EventTypeIn");
const EventTypeOut_1 = require("../models/EventTypeOut");
const EventTypePatch_1 = require("../models/EventTypePatch");
const EventTypeSchemaIn_1 = require("../models/EventTypeSchemaIn");
const EventTypeUpdate_1 = require("../models/EventTypeUpdate");
const ExportEventTypeOut_1 = require("../models/ExportEventTypeOut");
const FontSizeConfig_1 = require("../models/FontSizeConfig");
const GenerateIn_1 = require("../models/GenerateIn");
const GenerateOut_1 = require("../models/GenerateOut");
const GoogleCloudStorageConfig_1 = require("../models/GoogleCloudStorageConfig");
const HTTPValidationError_1 = require("../models/HTTPValidationError");
const HttpErrorOut_1 = require("../models/HttpErrorOut");
const HubspotOauthConfigIn_1 = require("../models/HubspotOauthConfigIn");
const InboundPathParams_1 = require("../models/InboundPathParams");
const IncomingWebhookPayloadOut_1 = require("../models/IncomingWebhookPayloadOut");
const IntegrationIn_1 = require("../models/IntegrationIn");
const IntegrationKeyOut_1 = require("../models/IntegrationKeyOut");
const IntegrationOut_1 = require("../models/IntegrationOut");
const IntegrationUpdate_1 = require("../models/IntegrationUpdate");
const ListResponseApplicationOut_1 = require("../models/ListResponseApplicationOut");
const ListResponseApplicationStats_1 = require("../models/ListResponseApplicationStats");
const ListResponseBackgroundTaskOut_1 = require("../models/ListResponseBackgroundTaskOut");
const ListResponseEndpointMessageOut_1 = require("../models/ListResponseEndpointMessageOut");
const ListResponseEndpointOut_1 = require("../models/ListResponseEndpointOut");
const ListResponseEventTypeOut_1 = require("../models/ListResponseEventTypeOut");
const ListResponseIntegrationOut_1 = require("../models/ListResponseIntegrationOut");
const ListResponseMessageAttemptEndpointOut_1 = require("../models/ListResponseMessageAttemptEndpointOut");
const ListResponseMessageAttemptOut_1 = require("../models/ListResponseMessageAttemptOut");
const ListResponseMessageEndpointOut_1 = require("../models/ListResponseMessageEndpointOut");
const ListResponseMessageOut_1 = require("../models/ListResponseMessageOut");
const ListResponseOperationalWebhookEndpointOut_1 = require("../models/ListResponseOperationalWebhookEndpointOut");
const ListResponseSinkOut_1 = require("../models/ListResponseSinkOut");
const ListResponseStreamEventTypeOut_1 = require("../models/ListResponseStreamEventTypeOut");
const ListResponseStreamOut_1 = require("../models/ListResponseStreamOut");
const ListResponseStreamSinkOut_1 = require("../models/ListResponseStreamSinkOut");
const ListResponseTemplateOut_1 = require("../models/ListResponseTemplateOut");
const MessageAttemptEndpointOut_1 = require("../models/MessageAttemptEndpointOut");
const MessageAttemptExhaustedEvent_1 = require("../models/MessageAttemptExhaustedEvent");
const MessageAttemptExhaustedEventData_1 = require("../models/MessageAttemptExhaustedEventData");
const MessageAttemptFailedData_1 = require("../models/MessageAttemptFailedData");
const MessageAttemptFailingEvent_1 = require("../models/MessageAttemptFailingEvent");
const MessageAttemptFailingEventData_1 = require("../models/MessageAttemptFailingEventData");
const MessageAttemptHeadersOut_1 = require("../models/MessageAttemptHeadersOut");
const MessageAttemptOut_1 = require("../models/MessageAttemptOut");
const MessageAttemptRecoveredEvent_1 = require("../models/MessageAttemptRecoveredEvent");
const MessageAttemptRecoveredEventData_1 = require("../models/MessageAttemptRecoveredEventData");
const MessageBroadcastIn_1 = require("../models/MessageBroadcastIn");
const MessageBroadcastOut_1 = require("../models/MessageBroadcastOut");
const MessageEndpointOut_1 = require("../models/MessageEndpointOut");
const MessageEventsOut_1 = require("../models/MessageEventsOut");
const MessageIn_1 = require("../models/MessageIn");
const MessageOut_1 = require("../models/MessageOut");
const MessageRawPayloadOut_1 = require("../models/MessageRawPayloadOut");
const MessageSubscriberAuthTokenOut_1 = require("../models/MessageSubscriberAuthTokenOut");
const OAuthPayloadIn_1 = require("../models/OAuthPayloadIn");
const OAuthPayloadOut_1 = require("../models/OAuthPayloadOut");
const OneTimeTokenIn_1 = require("../models/OneTimeTokenIn");
const OneTimeTokenOut_1 = require("../models/OneTimeTokenOut");
const OperationalWebhookEndpointIn_1 = require("../models/OperationalWebhookEndpointIn");
const OperationalWebhookEndpointOut_1 = require("../models/OperationalWebhookEndpointOut");
const OperationalWebhookEndpointSecretIn_1 = require("../models/OperationalWebhookEndpointSecretIn");
const OperationalWebhookEndpointSecretOut_1 = require("../models/OperationalWebhookEndpointSecretOut");
const OperationalWebhookEndpointUpdate_1 = require("../models/OperationalWebhookEndpointUpdate");
const RecoverIn_1 = require("../models/RecoverIn");
const RecoverOut_1 = require("../models/RecoverOut");
const RedshiftConfig_1 = require("../models/RedshiftConfig");
const ReplayIn_1 = require("../models/ReplayIn");
const ReplayOut_1 = require("../models/ReplayOut");
const RetryScheduleInOut_1 = require("../models/RetryScheduleInOut");
const RotatedUrlOut_1 = require("../models/RotatedUrlOut");
const S3Config_1 = require("../models/S3Config");
const SettingsIn_1 = require("../models/SettingsIn");
const SettingsOut_1 = require("../models/SettingsOut");
const SinkHttpConfig_1 = require("../models/SinkHttpConfig");
const SinkIn_1 = require("../models/SinkIn");
const SinkInOneOf_1 = require("../models/SinkInOneOf");
const SinkInOneOf1_1 = require("../models/SinkInOneOf1");
const SinkInOneOf2_1 = require("../models/SinkInOneOf2");
const SinkInOneOf3_1 = require("../models/SinkInOneOf3");
const SinkOtelV1Config_1 = require("../models/SinkOtelV1Config");
const SinkOut_1 = require("../models/SinkOut");
const SinkTransformIn_1 = require("../models/SinkTransformIn");
const SinkTransformationOut_1 = require("../models/SinkTransformationOut");
const SnowflakeConfig_1 = require("../models/SnowflakeConfig");
const StreamEventTypeIn_1 = require("../models/StreamEventTypeIn");
const StreamEventTypeOut_1 = require("../models/StreamEventTypeOut");
const StreamEventTypePatch_1 = require("../models/StreamEventTypePatch");
const StreamIn_1 = require("../models/StreamIn");
const StreamOut_1 = require("../models/StreamOut");
const StreamPatch_1 = require("../models/StreamPatch");
const StreamSinkIn_1 = require("../models/StreamSinkIn");
const StreamSinkInOneOf_1 = require("../models/StreamSinkInOneOf");
const StreamSinkInOneOf1_1 = require("../models/StreamSinkInOneOf1");
const StreamSinkInOneOf2_1 = require("../models/StreamSinkInOneOf2");
const StreamSinkInOneOf3_1 = require("../models/StreamSinkInOneOf3");
const StreamSinkInOneOf4_1 = require("../models/StreamSinkInOneOf4");
const StreamSinkInOneOf5_1 = require("../models/StreamSinkInOneOf5");
const StreamSinkInOneOf6_1 = require("../models/StreamSinkInOneOf6");
const StreamSinkInOneOf7_1 = require("../models/StreamSinkInOneOf7");
const StreamSinkOut_1 = require("../models/StreamSinkOut");
const StreamSinkPatch_1 = require("../models/StreamSinkPatch");
const TemplateIn_1 = require("../models/TemplateIn");
const TemplateOut_1 = require("../models/TemplateOut");
const TemplatePatch_1 = require("../models/TemplatePatch");
const TemplateUpdate_1 = require("../models/TemplateUpdate");
const TransformationSimulateIn_1 = require("../models/TransformationSimulateIn");
const TransformationSimulateOut_1 = require("../models/TransformationSimulateOut");
const ValidationError_1 = require("../models/ValidationError");
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = new Set([
    "BackgroundTaskStatus",
    "BackgroundTaskType",
    "BorderRadiusEnum",
    "EndpointCreatedEventTypeEnum",
    "EndpointDeletedEventTypeEnum",
    "EndpointDisabledEventTypeEnum",
    "EndpointUpdatedEventTypeEnum",
    "KafkaSecurityProtocolType",
    "MessageAttemptExhaustedEventTypeEnum",
    "MessageAttemptFailingEventTypeEnum",
    "MessageAttemptRecoveredEventTypeEnum",
    "MessageAttemptTriggerType",
    "MessageStatus",
    "Oauth2AuthMethodIn",
    "Oauth2GrantTypeIn",
    "OauthJwsSigningAlgorithm",
    "Ordering",
    "SinkInTypeEnum",
    "SinkInOneOfTypeEnum",
    "SinkInOneOf1TypeEnum",
    "SinkInOneOf2TypeEnum",
    "SinkInOneOf3TypeEnum",
    "SinkOutTypeEnum",
    "SinkPayloadFormat",
    "SinkStatus",
    "SinkStatusIn",
    "StatisticsPeriod",
    "StatusCodeClass",
    "StreamSinkInTypeEnum",
    "StreamSinkInOneOfTypeEnum",
    "StreamSinkInOneOf1TypeEnum",
    "StreamSinkInOneOf2TypeEnum",
    "StreamSinkInOneOf3TypeEnum",
    "StreamSinkInOneOf4TypeEnum",
    "StreamSinkInOneOf5TypeEnum",
    "StreamSinkInOneOf6TypeEnum",
    "StreamSinkInOneOf7TypeEnum",
    "StreamSinkOutTypeEnum",
    "StreamSinkPatchTypeEnum",
    "TransformationHttpMethod",
    "TransformationTemplateKind",
]);
let typeMap = {
    "AggregateEventTypesOut": AggregateEventTypesOut_1.AggregateEventTypesOut,
    "AppPortalAccessIn": AppPortalAccessIn_1.AppPortalAccessIn,
    "AppPortalAccessOut": AppPortalAccessOut_1.AppPortalAccessOut,
    "AppUsageStatsIn": AppUsageStatsIn_1.AppUsageStatsIn,
    "AppUsageStatsOut": AppUsageStatsOut_1.AppUsageStatsOut,
    "ApplicationIn": ApplicationIn_1.ApplicationIn,
    "ApplicationOut": ApplicationOut_1.ApplicationOut,
    "ApplicationPatch": ApplicationPatch_1.ApplicationPatch,
    "ApplicationStats": ApplicationStats_1.ApplicationStats,
    "ApplicationTokenExpireIn": ApplicationTokenExpireIn_1.ApplicationTokenExpireIn,
    "AttemptStatisticsData": AttemptStatisticsData_1.AttemptStatisticsData,
    "AttemptStatisticsResponse": AttemptStatisticsResponse_1.AttemptStatisticsResponse,
    "AuthTokenOut": AuthTokenOut_1.AuthTokenOut,
    "AzureBlobStorageConfig": AzureBlobStorageConfig_1.AzureBlobStorageConfig,
    "BackgroundTaskOut": BackgroundTaskOut_1.BackgroundTaskOut,
    "BigQueryConfig": BigQueryConfig_1.BigQueryConfig,
    "BorderRadiusConfig": BorderRadiusConfig_1.BorderRadiusConfig,
    "ClientSecretJwtParamsIn": ClientSecretJwtParamsIn_1.ClientSecretJwtParamsIn,
    "CompletionChoice": CompletionChoice_1.CompletionChoice,
    "CompletionMessage": CompletionMessage_1.CompletionMessage,
    "CreateMessageTokenIn": CreateMessageTokenIn_1.CreateMessageTokenIn,
    "CreateStreamIn": CreateStreamIn_1.CreateStreamIn,
    "CustomColorPalette": CustomColorPalette_1.CustomColorPalette,
    "CustomStringsOverride": CustomStringsOverride_1.CustomStringsOverride,
    "CustomThemeOverride": CustomThemeOverride_1.CustomThemeOverride,
    "DashboardAccessOut": DashboardAccessOut_1.DashboardAccessOut,
    "Duration": Duration_1.Duration,
    "EndpointCreatedEvent": EndpointCreatedEvent_1.EndpointCreatedEvent,
    "EndpointCreatedEventData": EndpointCreatedEventData_1.EndpointCreatedEventData,
    "EndpointDeletedEvent": EndpointDeletedEvent_1.EndpointDeletedEvent,
    "EndpointDeletedEventData": EndpointDeletedEventData_1.EndpointDeletedEventData,
    "EndpointDisabledEvent": EndpointDisabledEvent_1.EndpointDisabledEvent,
    "EndpointDisabledEventData": EndpointDisabledEventData_1.EndpointDisabledEventData,
    "EndpointHeadersIn": EndpointHeadersIn_1.EndpointHeadersIn,
    "EndpointHeadersOut": EndpointHeadersOut_1.EndpointHeadersOut,
    "EndpointHeadersPatchIn": EndpointHeadersPatchIn_1.EndpointHeadersPatchIn,
    "EndpointIn": EndpointIn_1.EndpointIn,
    "EndpointMessageOut": EndpointMessageOut_1.EndpointMessageOut,
    "EndpointMtlsConfigIn": EndpointMtlsConfigIn_1.EndpointMtlsConfigIn,
    "EndpointOauthConfigIn": EndpointOauthConfigIn_1.EndpointOauthConfigIn,
    "EndpointOut": EndpointOut_1.EndpointOut,
    "EndpointPatch": EndpointPatch_1.EndpointPatch,
    "EndpointSecretOut": EndpointSecretOut_1.EndpointSecretOut,
    "EndpointSecretRotateIn": EndpointSecretRotateIn_1.EndpointSecretRotateIn,
    "EndpointStats": EndpointStats_1.EndpointStats,
    "EndpointTransformationIn": EndpointTransformationIn_1.EndpointTransformationIn,
    "EndpointTransformationOut": EndpointTransformationOut_1.EndpointTransformationOut,
    "EndpointTransformationSimulateIn": EndpointTransformationSimulateIn_1.EndpointTransformationSimulateIn,
    "EndpointTransformationSimulateOut": EndpointTransformationSimulateOut_1.EndpointTransformationSimulateOut,
    "EndpointUpdate": EndpointUpdate_1.EndpointUpdate,
    "EndpointUpdatedEvent": EndpointUpdatedEvent_1.EndpointUpdatedEvent,
    "EndpointUpdatedEventData": EndpointUpdatedEventData_1.EndpointUpdatedEventData,
    "EnvironmentIn": EnvironmentIn_1.EnvironmentIn,
    "EnvironmentOut": EnvironmentOut_1.EnvironmentOut,
    "EnvironmentSettingsOut": EnvironmentSettingsOut_1.EnvironmentSettingsOut,
    "EventExampleIn": EventExampleIn_1.EventExampleIn,
    "EventIn": EventIn_1.EventIn,
    "EventOut": EventOut_1.EventOut,
    "EventStreamOut": EventStreamOut_1.EventStreamOut,
    "EventTypeExampleOut": EventTypeExampleOut_1.EventTypeExampleOut,
    "EventTypeFromOpenApi": EventTypeFromOpenApi_1.EventTypeFromOpenApi,
    "EventTypeImportOpenApiIn": EventTypeImportOpenApiIn_1.EventTypeImportOpenApiIn,
    "EventTypeImportOpenApiOut": EventTypeImportOpenApiOut_1.EventTypeImportOpenApiOut,
    "EventTypeImportOpenApiOutData": EventTypeImportOpenApiOutData_1.EventTypeImportOpenApiOutData,
    "EventTypeIn": EventTypeIn_1.EventTypeIn,
    "EventTypeOut": EventTypeOut_1.EventTypeOut,
    "EventTypePatch": EventTypePatch_1.EventTypePatch,
    "EventTypeSchemaIn": EventTypeSchemaIn_1.EventTypeSchemaIn,
    "EventTypeUpdate": EventTypeUpdate_1.EventTypeUpdate,
    "ExportEventTypeOut": ExportEventTypeOut_1.ExportEventTypeOut,
    "FontSizeConfig": FontSizeConfig_1.FontSizeConfig,
    "GenerateIn": GenerateIn_1.GenerateIn,
    "GenerateOut": GenerateOut_1.GenerateOut,
    "GoogleCloudStorageConfig": GoogleCloudStorageConfig_1.GoogleCloudStorageConfig,
    "HTTPValidationError": HTTPValidationError_1.HTTPValidationError,
    "HttpErrorOut": HttpErrorOut_1.HttpErrorOut,
    "HubspotOauthConfigIn": HubspotOauthConfigIn_1.HubspotOauthConfigIn,
    "InboundPathParams": InboundPathParams_1.InboundPathParams,
    "IncomingWebhookPayloadOut": IncomingWebhookPayloadOut_1.IncomingWebhookPayloadOut,
    "IntegrationIn": IntegrationIn_1.IntegrationIn,
    "IntegrationKeyOut": IntegrationKeyOut_1.IntegrationKeyOut,
    "IntegrationOut": IntegrationOut_1.IntegrationOut,
    "IntegrationUpdate": IntegrationUpdate_1.IntegrationUpdate,
    "ListResponseApplicationOut": ListResponseApplicationOut_1.ListResponseApplicationOut,
    "ListResponseApplicationStats": ListResponseApplicationStats_1.ListResponseApplicationStats,
    "ListResponseBackgroundTaskOut": ListResponseBackgroundTaskOut_1.ListResponseBackgroundTaskOut,
    "ListResponseEndpointMessageOut": ListResponseEndpointMessageOut_1.ListResponseEndpointMessageOut,
    "ListResponseEndpointOut": ListResponseEndpointOut_1.ListResponseEndpointOut,
    "ListResponseEventTypeOut": ListResponseEventTypeOut_1.ListResponseEventTypeOut,
    "ListResponseIntegrationOut": ListResponseIntegrationOut_1.ListResponseIntegrationOut,
    "ListResponseMessageAttemptEndpointOut": ListResponseMessageAttemptEndpointOut_1.ListResponseMessageAttemptEndpointOut,
    "ListResponseMessageAttemptOut": ListResponseMessageAttemptOut_1.ListResponseMessageAttemptOut,
    "ListResponseMessageEndpointOut": ListResponseMessageEndpointOut_1.ListResponseMessageEndpointOut,
    "ListResponseMessageOut": ListResponseMessageOut_1.ListResponseMessageOut,
    "ListResponseOperationalWebhookEndpointOut": ListResponseOperationalWebhookEndpointOut_1.ListResponseOperationalWebhookEndpointOut,
    "ListResponseSinkOut": ListResponseSinkOut_1.ListResponseSinkOut,
    "ListResponseStreamEventTypeOut": ListResponseStreamEventTypeOut_1.ListResponseStreamEventTypeOut,
    "ListResponseStreamOut": ListResponseStreamOut_1.ListResponseStreamOut,
    "ListResponseStreamSinkOut": ListResponseStreamSinkOut_1.ListResponseStreamSinkOut,
    "ListResponseTemplateOut": ListResponseTemplateOut_1.ListResponseTemplateOut,
    "MessageAttemptEndpointOut": MessageAttemptEndpointOut_1.MessageAttemptEndpointOut,
    "MessageAttemptExhaustedEvent": MessageAttemptExhaustedEvent_1.MessageAttemptExhaustedEvent,
    "MessageAttemptExhaustedEventData": MessageAttemptExhaustedEventData_1.MessageAttemptExhaustedEventData,
    "MessageAttemptFailedData": MessageAttemptFailedData_1.MessageAttemptFailedData,
    "MessageAttemptFailingEvent": MessageAttemptFailingEvent_1.MessageAttemptFailingEvent,
    "MessageAttemptFailingEventData": MessageAttemptFailingEventData_1.MessageAttemptFailingEventData,
    "MessageAttemptHeadersOut": MessageAttemptHeadersOut_1.MessageAttemptHeadersOut,
    "MessageAttemptOut": MessageAttemptOut_1.MessageAttemptOut,
    "MessageAttemptRecoveredEvent": MessageAttemptRecoveredEvent_1.MessageAttemptRecoveredEvent,
    "MessageAttemptRecoveredEventData": MessageAttemptRecoveredEventData_1.MessageAttemptRecoveredEventData,
    "MessageBroadcastIn": MessageBroadcastIn_1.MessageBroadcastIn,
    "MessageBroadcastOut": MessageBroadcastOut_1.MessageBroadcastOut,
    "MessageEndpointOut": MessageEndpointOut_1.MessageEndpointOut,
    "MessageEventsOut": MessageEventsOut_1.MessageEventsOut,
    "MessageIn": MessageIn_1.MessageIn,
    "MessageOut": MessageOut_1.MessageOut,
    "MessageRawPayloadOut": MessageRawPayloadOut_1.MessageRawPayloadOut,
    "MessageSubscriberAuthTokenOut": MessageSubscriberAuthTokenOut_1.MessageSubscriberAuthTokenOut,
    "OAuthPayloadIn": OAuthPayloadIn_1.OAuthPayloadIn,
    "OAuthPayloadOut": OAuthPayloadOut_1.OAuthPayloadOut,
    "OneTimeTokenIn": OneTimeTokenIn_1.OneTimeTokenIn,
    "OneTimeTokenOut": OneTimeTokenOut_1.OneTimeTokenOut,
    "OperationalWebhookEndpointIn": OperationalWebhookEndpointIn_1.OperationalWebhookEndpointIn,
    "OperationalWebhookEndpointOut": OperationalWebhookEndpointOut_1.OperationalWebhookEndpointOut,
    "OperationalWebhookEndpointSecretIn": OperationalWebhookEndpointSecretIn_1.OperationalWebhookEndpointSecretIn,
    "OperationalWebhookEndpointSecretOut": OperationalWebhookEndpointSecretOut_1.OperationalWebhookEndpointSecretOut,
    "OperationalWebhookEndpointUpdate": OperationalWebhookEndpointUpdate_1.OperationalWebhookEndpointUpdate,
    "RecoverIn": RecoverIn_1.RecoverIn,
    "RecoverOut": RecoverOut_1.RecoverOut,
    "RedshiftConfig": RedshiftConfig_1.RedshiftConfig,
    "ReplayIn": ReplayIn_1.ReplayIn,
    "ReplayOut": ReplayOut_1.ReplayOut,
    "RetryScheduleInOut": RetryScheduleInOut_1.RetryScheduleInOut,
    "RotatedUrlOut": RotatedUrlOut_1.RotatedUrlOut,
    "S3Config": S3Config_1.S3Config,
    "SettingsIn": SettingsIn_1.SettingsIn,
    "SettingsOut": SettingsOut_1.SettingsOut,
    "SinkHttpConfig": SinkHttpConfig_1.SinkHttpConfig,
    "SinkIn": SinkIn_1.SinkInClass,
    "SinkInOneOf": SinkInOneOf_1.SinkInOneOf,
    "SinkInOneOf1": SinkInOneOf1_1.SinkInOneOf1,
    "SinkInOneOf2": SinkInOneOf2_1.SinkInOneOf2,
    "SinkInOneOf3": SinkInOneOf3_1.SinkInOneOf3,
    "SinkOtelV1Config": SinkOtelV1Config_1.SinkOtelV1Config,
    "SinkOut": SinkOut_1.SinkOutClass,
    "SinkTransformIn": SinkTransformIn_1.SinkTransformIn,
    "SinkTransformationOut": SinkTransformationOut_1.SinkTransformationOut,
    "SnowflakeConfig": SnowflakeConfig_1.SnowflakeConfig,
    "StreamEventTypeIn": StreamEventTypeIn_1.StreamEventTypeIn,
    "StreamEventTypeOut": StreamEventTypeOut_1.StreamEventTypeOut,
    "StreamEventTypePatch": StreamEventTypePatch_1.StreamEventTypePatch,
    "StreamIn": StreamIn_1.StreamIn,
    "StreamOut": StreamOut_1.StreamOut,
    "StreamPatch": StreamPatch_1.StreamPatch,
    "StreamSinkIn": StreamSinkIn_1.StreamSinkInClass,
    "StreamSinkInOneOf": StreamSinkInOneOf_1.StreamSinkInOneOf,
    "StreamSinkInOneOf1": StreamSinkInOneOf1_1.StreamSinkInOneOf1,
    "StreamSinkInOneOf2": StreamSinkInOneOf2_1.StreamSinkInOneOf2,
    "StreamSinkInOneOf3": StreamSinkInOneOf3_1.StreamSinkInOneOf3,
    "StreamSinkInOneOf4": StreamSinkInOneOf4_1.StreamSinkInOneOf4,
    "StreamSinkInOneOf5": StreamSinkInOneOf5_1.StreamSinkInOneOf5,
    "StreamSinkInOneOf6": StreamSinkInOneOf6_1.StreamSinkInOneOf6,
    "StreamSinkInOneOf7": StreamSinkInOneOf7_1.StreamSinkInOneOf7,
    "StreamSinkOut": StreamSinkOut_1.StreamSinkOutClass,
    "StreamSinkPatch": StreamSinkPatch_1.StreamSinkPatchClass,
    "TemplateIn": TemplateIn_1.TemplateIn,
    "TemplateOut": TemplateOut_1.TemplateOut,
    "TemplatePatch": TemplatePatch_1.TemplatePatch,
    "TemplateUpdate": TemplateUpdate_1.TemplateUpdate,
    "TransformationSimulateIn": TransformationSimulateIn_1.TransformationSimulateIn,
    "TransformationSimulateOut": TransformationSimulateOut_1.TransformationSimulateOut,
    "ValidationError": ValidationError_1.ValidationError,
};
const parseMimeType = (mimeType) => {
    const [type, subtype] = mimeType.split('/');
    return {
        type,
        subtype,
        subtypeTokens: subtype.split('+'),
    };
};
const mimeTypePredicateFactory = (predicate) => (mimeType) => predicate(parseMimeType(mimeType));
const mimeTypeSimplePredicateFactory = (type, subtype) => mimeTypePredicateFactory((descriptor) => {
    if (descriptor.type !== type)
        return false;
    if (subtype != null && descriptor.subtype !== subtype)
        return false;
    return true;
});
const isTextLikeMimeType = mimeTypeSimplePredicateFactory('text');
const isJsonMimeType = mimeTypeSimplePredicateFactory('application', 'json');
const isJsonLikeMimeType = mimeTypePredicateFactory((descriptor) => descriptor.type === 'application' && descriptor.subtypeTokens.some((item) => item === 'json'));
const isOctetStreamMimeType = mimeTypeSimplePredicateFactory('application', 'octet-stream');
const isFormUrlencodedMimeType = mimeTypeSimplePredicateFactory('application', 'x-www-form-urlencoded');
const supportedMimeTypePredicatesWithPriority = [
    isJsonMimeType,
    isJsonLikeMimeType,
    isTextLikeMimeType,
    isOctetStreamMimeType,
    isFormUrlencodedMimeType,
];
const nullableSuffix = " | null";
const optionalSuffix = " | undefined";
const arrayPrefix = "Array<";
const arraySuffix = ">";
const mapPrefix = "{ [key: string]: ";
const mapSuffix = "; }";
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap.has(expectedType)) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType;
            }
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType;
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    let mapping = typeMap[expectedType].mapping;
                    if (mapping != undefined && mapping[discriminatorType]) {
                        return mapping[discriminatorType];
                    }
                    else if (typeMap[discriminatorType]) {
                        return discriminatorType;
                    }
                    else {
                        return expectedType;
                    }
                }
                else {
                    return expectedType;
                }
            }
        }
    }
    static serialize(data, type, format) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.endsWith(nullableSuffix)) {
            let subType = type.slice(0, -nullableSuffix.length);
            return ObjectSerializer.serialize(data, subType, format);
        }
        else if (type.endsWith(optionalSuffix)) {
            let subType = type.slice(0, -optionalSuffix.length);
            return ObjectSerializer.serialize(data, subType, format);
        }
        else if (type.startsWith(arrayPrefix)) {
            let subType = type.slice(arrayPrefix.length, -arraySuffix.length);
            let transformedData = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.serialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(mapPrefix)) {
            let subType = type.slice(mapPrefix.length, -mapSuffix.length);
            let transformedData = {};
            for (let key in data) {
                transformedData[key] = ObjectSerializer.serialize(data[key], subType, format);
            }
            return transformedData;
        }
        else if (type === "Date") {
            if (format == "date") {
                let month = data.getMonth() + 1;
                month = month < 10 ? "0" + month.toString() : month.toString();
                let day = data.getDate();
                day = day < 10 ? "0" + day.toString() : day.toString();
                return data.getFullYear() + "-" + month + "-" + day;
            }
            else {
                return data.toISOString();
            }
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            type = this.findCorrectType(data, type);
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let attributeType of attributeTypes) {
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
            }
            return instance;
        }
    }
    static deserialize(data, type, format) {
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.endsWith(nullableSuffix)) {
            let subType = type.slice(0, -nullableSuffix.length);
            return ObjectSerializer.deserialize(data, subType, format);
        }
        else if (type.endsWith(optionalSuffix)) {
            let subType = type.slice(0, -optionalSuffix.length);
            return ObjectSerializer.deserialize(data, subType, format);
        }
        else if (type.startsWith(arrayPrefix)) {
            let subType = type.slice(arrayPrefix.length, -arraySuffix.length);
            let transformedData = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.deserialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(mapPrefix)) {
            let subType = type.slice(mapPrefix.length, -mapSuffix.length);
            let transformedData = {};
            for (let key in data) {
                transformedData[key] = ObjectSerializer.deserialize(data[key], subType, format);
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let attributeType of attributeTypes) {
                let value = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
                if (value !== undefined) {
                    instance[attributeType.name] = value;
                }
            }
            return instance;
        }
    }
    static normalizeMediaType(mediaType) {
        if (mediaType === undefined) {
            return undefined;
        }
        return mediaType.split(";")[0].trim().toLowerCase();
    }
    static getPreferredMediaType(mediaTypes) {
        if (mediaTypes.length === 0) {
            return "application/json";
        }
        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
        for (const predicate of supportedMimeTypePredicatesWithPriority) {
            for (const mediaType of normalMediaTypes) {
                if (mediaType != null && predicate(mediaType)) {
                    return mediaType;
                }
            }
        }
        throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
    }
    static stringify(data, mediaType) {
        if (isTextLikeMimeType(mediaType)) {
            return String(data);
        }
        if (isJsonLikeMimeType(mediaType)) {
            return JSON.stringify(data);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
    }
    static parse(rawData, mediaType) {
        if (mediaType === undefined) {
            throw new Error("Cannot parse content. No Content-Type defined.");
        }
        if (isTextLikeMimeType(mediaType)) {
            return rawData;
        }
        if (isJsonLikeMimeType(mediaType)) {
            return JSON.parse(rawData);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=ObjectSerializer.js.map
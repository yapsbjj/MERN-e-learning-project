"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableWebhookEndpointApi = exports.ObservableTransformationTemplateApi = exports.ObservableStreamEventTypesApi = exports.ObservableStreamApi = exports.ObservableStatisticsApi = exports.ObservableMessageAttemptApi = exports.ObservableMessageApi = exports.ObservableIntegrationApi = exports.ObservableInboundApi = exports.ObservableHealthApi = exports.ObservableEventsApi = exports.ObservableEventTypeApi = exports.ObservableEnvironmentSettingsApi = exports.ObservableEnvironmentApi = exports.ObservableEndpointApi = exports.ObservableBroadcastApi = exports.ObservableBackgroundTasksApi = exports.ObservableAuthenticationApi = exports.ObservableApplicationApi = void 0;
const rxjsStub_1 = require("../rxjsStub");
const rxjsStub_2 = require("../rxjsStub");
const ApplicationApi_1 = require("../apis/ApplicationApi");
class ObservableApplicationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ApplicationApi_1.ApplicationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ApplicationApi_1.ApplicationApiResponseProcessor();
    }
    getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(since, until, limit, iterator, _options) {
        const requestContextPromise = this.requestFactory.getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(rsp)));
        }));
    }
    getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options) {
        return this.getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(since, until, limit, iterator, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1ApplicationCreateWithHttpInfo(applicationIn, getIfExists, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1ApplicationCreateWithHttpInfo(rsp)));
        }));
    }
    v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options) {
        return this.v1ApplicationCreateWithHttpInfo(applicationIn, getIfExists, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1ApplicationDeleteWithHttpInfo(appId, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationDelete(appId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1ApplicationDeleteWithHttpInfo(rsp)));
        }));
    }
    v1ApplicationDelete(appId, _options) {
        return this.v1ApplicationDeleteWithHttpInfo(appId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1ApplicationGetWithHttpInfo(appId, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationGet(appId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1ApplicationGetWithHttpInfo(rsp)));
        }));
    }
    v1ApplicationGet(appId, _options) {
        return this.v1ApplicationGetWithHttpInfo(appId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1ApplicationGetStatsWithHttpInfo(since, until, appId, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationGetStats(since, until, appId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1ApplicationGetStatsWithHttpInfo(rsp)));
        }));
    }
    v1ApplicationGetStats(since, until, appId, _options) {
        return this.v1ApplicationGetStatsWithHttpInfo(since, until, appId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1ApplicationListWithHttpInfo(limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationList(limit, iterator, order, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1ApplicationListWithHttpInfo(rsp)));
        }));
    }
    v1ApplicationList(limit, iterator, order, _options) {
        return this.v1ApplicationListWithHttpInfo(limit, iterator, order, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1ApplicationPatchWithHttpInfo(appId, applicationPatch, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationPatch(appId, applicationPatch, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1ApplicationPatchWithHttpInfo(rsp)));
        }));
    }
    v1ApplicationPatch(appId, applicationPatch, _options) {
        return this.v1ApplicationPatchWithHttpInfo(appId, applicationPatch, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1ApplicationUpdateWithHttpInfo(appId, applicationIn, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationUpdate(appId, applicationIn, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1ApplicationUpdateWithHttpInfo(rsp)));
        }));
    }
    v1ApplicationUpdate(appId, applicationIn, _options) {
        return this.v1ApplicationUpdateWithHttpInfo(appId, applicationIn, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableApplicationApi = ObservableApplicationApi;
const AuthenticationApi_1 = require("../apis/AuthenticationApi");
class ObservableAuthenticationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new AuthenticationApi_1.AuthenticationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new AuthenticationApi_1.AuthenticationApiResponseProcessor();
    }
    v1AuthenticationAppPortalAccessWithHttpInfo(appId, appPortalAccessIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1AuthenticationAppPortalAccessWithHttpInfo(rsp)));
        }));
    }
    v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options) {
        return this.v1AuthenticationAppPortalAccessWithHttpInfo(appId, appPortalAccessIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1AuthenticationCreateMessageTokenWithHttpInfo(appId, createMessageTokenIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationCreateMessageToken(appId, createMessageTokenIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1AuthenticationCreateMessageTokenWithHttpInfo(rsp)));
        }));
    }
    v1AuthenticationCreateMessageToken(appId, createMessageTokenIn, idempotencyKey, _options) {
        return this.v1AuthenticationCreateMessageTokenWithHttpInfo(appId, createMessageTokenIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1AuthenticationDashboardAccessWithHttpInfo(appId, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationDashboardAccess(appId, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1AuthenticationDashboardAccessWithHttpInfo(rsp)));
        }));
    }
    v1AuthenticationDashboardAccess(appId, idempotencyKey, _options) {
        return this.v1AuthenticationDashboardAccessWithHttpInfo(appId, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1AuthenticationExchangeOneTimeTokenWithHttpInfo(oneTimeTokenIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1AuthenticationExchangeOneTimeTokenWithHttpInfo(rsp)));
        }));
    }
    v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options) {
        return this.v1AuthenticationExchangeOneTimeTokenWithHttpInfo(oneTimeTokenIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1AuthenticationExpireAllWithHttpInfo(appId, applicationTokenExpireIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1AuthenticationExpireAllWithHttpInfo(rsp)));
        }));
    }
    v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options) {
        return this.v1AuthenticationExpireAllWithHttpInfo(appId, applicationTokenExpireIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1AuthenticationLogoutWithHttpInfo(idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationLogout(idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1AuthenticationLogoutWithHttpInfo(rsp)));
        }));
    }
    v1AuthenticationLogout(idempotencyKey, _options) {
        return this.v1AuthenticationLogoutWithHttpInfo(idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableAuthenticationApi = ObservableAuthenticationApi;
const BackgroundTasksApi_1 = require("../apis/BackgroundTasksApi");
class ObservableBackgroundTasksApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new BackgroundTasksApi_1.BackgroundTasksApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new BackgroundTasksApi_1.BackgroundTasksApiResponseProcessor();
    }
    getBackgroundTaskWithHttpInfo(taskId, _options) {
        const requestContextPromise = this.requestFactory.getBackgroundTask(taskId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getBackgroundTaskWithHttpInfo(rsp)));
        }));
    }
    getBackgroundTask(taskId, _options) {
        return this.getBackgroundTaskWithHttpInfo(taskId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    listBackgroundTasksWithHttpInfo(status, task, limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.listBackgroundTasks(status, task, limit, iterator, order, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.listBackgroundTasksWithHttpInfo(rsp)));
        }));
    }
    listBackgroundTasks(status, task, limit, iterator, order, _options) {
        return this.listBackgroundTasksWithHttpInfo(status, task, limit, iterator, order, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableBackgroundTasksApi = ObservableBackgroundTasksApi;
const BroadcastApi_1 = require("../apis/BroadcastApi");
class ObservableBroadcastApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new BroadcastApi_1.BroadcastApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new BroadcastApi_1.BroadcastApiResponseProcessor();
    }
    createBroadcastMessageWithHttpInfo(messageBroadcastIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.createBroadcastMessage(messageBroadcastIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.createBroadcastMessageWithHttpInfo(rsp)));
        }));
    }
    createBroadcastMessage(messageBroadcastIn, idempotencyKey, _options) {
        return this.createBroadcastMessageWithHttpInfo(messageBroadcastIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableBroadcastApi = ObservableBroadcastApi;
const EndpointApi_1 = require("../apis/EndpointApi");
class ObservableEndpointApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EndpointApi_1.EndpointApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EndpointApi_1.EndpointApiResponseProcessor();
    }
    v1EndpointCreateWithHttpInfo(appId, endpointIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointCreate(appId, endpointIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointCreateWithHttpInfo(rsp)));
        }));
    }
    v1EndpointCreate(appId, endpointIn, idempotencyKey, _options) {
        return this.v1EndpointCreateWithHttpInfo(appId, endpointIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointDeleteWithHttpInfo(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointDelete(appId, endpointId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointDeleteWithHttpInfo(rsp)));
        }));
    }
    v1EndpointDelete(appId, endpointId, _options) {
        return this.v1EndpointDeleteWithHttpInfo(appId, endpointId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointDeleteMtlsConfigWithHttpInfo(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointDeleteMtlsConfig(appId, endpointId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointDeleteMtlsConfigWithHttpInfo(rsp)));
        }));
    }
    v1EndpointDeleteMtlsConfig(appId, endpointId, _options) {
        return this.v1EndpointDeleteMtlsConfigWithHttpInfo(appId, endpointId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointDeleteOauthConfigWithHttpInfo(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointDeleteOauthConfig(appId, endpointId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointDeleteOauthConfigWithHttpInfo(rsp)));
        }));
    }
    v1EndpointDeleteOauthConfig(appId, endpointId, _options) {
        return this.v1EndpointDeleteOauthConfigWithHttpInfo(appId, endpointId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointGetWithHttpInfo(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointGet(appId, endpointId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointGetWithHttpInfo(rsp)));
        }));
    }
    v1EndpointGet(appId, endpointId, _options) {
        return this.v1EndpointGetWithHttpInfo(appId, endpointId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointGetHeadersWithHttpInfo(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointGetHeaders(appId, endpointId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointGetHeadersWithHttpInfo(rsp)));
        }));
    }
    v1EndpointGetHeaders(appId, endpointId, _options) {
        return this.v1EndpointGetHeadersWithHttpInfo(appId, endpointId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointGetSecretWithHttpInfo(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointGetSecret(appId, endpointId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointGetSecretWithHttpInfo(rsp)));
        }));
    }
    v1EndpointGetSecret(appId, endpointId, _options) {
        return this.v1EndpointGetSecretWithHttpInfo(appId, endpointId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointGetStatsWithHttpInfo(appId, endpointId, since, until, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointGetStats(appId, endpointId, since, until, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointGetStatsWithHttpInfo(rsp)));
        }));
    }
    v1EndpointGetStats(appId, endpointId, since, until, _options) {
        return this.v1EndpointGetStatsWithHttpInfo(appId, endpointId, since, until, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointListWithHttpInfo(appId, limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointList(appId, limit, iterator, order, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointListWithHttpInfo(rsp)));
        }));
    }
    v1EndpointList(appId, limit, iterator, order, _options) {
        return this.v1EndpointListWithHttpInfo(appId, limit, iterator, order, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointPatchWithHttpInfo(appId, endpointId, endpointPatch, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointPatch(appId, endpointId, endpointPatch, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointPatchWithHttpInfo(rsp)));
        }));
    }
    v1EndpointPatch(appId, endpointId, endpointPatch, _options) {
        return this.v1EndpointPatchWithHttpInfo(appId, endpointId, endpointPatch, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointPatchHeadersWithHttpInfo(appId, endpointId, endpointHeadersPatchIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointPatchHeadersWithHttpInfo(rsp)));
        }));
    }
    v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn, _options) {
        return this.v1EndpointPatchHeadersWithHttpInfo(appId, endpointId, endpointHeadersPatchIn, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointRecoverWithHttpInfo(appId, endpointId, recoverIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointRecoverWithHttpInfo(rsp)));
        }));
    }
    v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey, _options) {
        return this.v1EndpointRecoverWithHttpInfo(appId, endpointId, recoverIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointReplayWithHttpInfo(appId, endpointId, replayIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointReplay(appId, endpointId, replayIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointReplayWithHttpInfo(rsp)));
        }));
    }
    v1EndpointReplay(appId, endpointId, replayIn, idempotencyKey, _options) {
        return this.v1EndpointReplayWithHttpInfo(appId, endpointId, replayIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointRotateSecretWithHttpInfo(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointRotateSecretWithHttpInfo(rsp)));
        }));
    }
    v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options) {
        return this.v1EndpointRotateSecretWithHttpInfo(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointSendExampleWithHttpInfo(appId, endpointId, eventExampleIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointSendExampleWithHttpInfo(rsp)));
        }));
    }
    v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey, _options) {
        return this.v1EndpointSendExampleWithHttpInfo(appId, endpointId, eventExampleIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointTransformationGetWithHttpInfo(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointTransformationGet(appId, endpointId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointTransformationGetWithHttpInfo(rsp)));
        }));
    }
    v1EndpointTransformationGet(appId, endpointId, _options) {
        return this.v1EndpointTransformationGetWithHttpInfo(appId, endpointId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointTransformationPartialUpdateWithHttpInfo(appId, endpointId, endpointTransformationIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointTransformationPartialUpdateWithHttpInfo(rsp)));
        }));
    }
    v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn, _options) {
        return this.v1EndpointTransformationPartialUpdateWithHttpInfo(appId, endpointId, endpointTransformationIn, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointTransformationSimulateWithHttpInfo(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointTransformationSimulateWithHttpInfo(rsp)));
        }));
    }
    v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options) {
        return this.v1EndpointTransformationSimulateWithHttpInfo(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointUpdateWithHttpInfo(appId, endpointId, endpointUpdate, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointUpdate(appId, endpointId, endpointUpdate, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointUpdateWithHttpInfo(rsp)));
        }));
    }
    v1EndpointUpdate(appId, endpointId, endpointUpdate, _options) {
        return this.v1EndpointUpdateWithHttpInfo(appId, endpointId, endpointUpdate, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointUpdateHeadersWithHttpInfo(appId, endpointId, endpointHeadersIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointUpdateHeadersWithHttpInfo(rsp)));
        }));
    }
    v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn, _options) {
        return this.v1EndpointUpdateHeadersWithHttpInfo(appId, endpointId, endpointHeadersIn, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointUpdateMtlsConfigWithHttpInfo(appId, endpointId, endpointMtlsConfigIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointUpdateMtlsConfig(appId, endpointId, endpointMtlsConfigIn, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointUpdateMtlsConfigWithHttpInfo(rsp)));
        }));
    }
    v1EndpointUpdateMtlsConfig(appId, endpointId, endpointMtlsConfigIn, _options) {
        return this.v1EndpointUpdateMtlsConfigWithHttpInfo(appId, endpointId, endpointMtlsConfigIn, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EndpointUpdateOauthConfigWithHttpInfo(appId, endpointId, endpointOauthConfigIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointUpdateOauthConfig(appId, endpointId, endpointOauthConfigIn, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointUpdateOauthConfigWithHttpInfo(rsp)));
        }));
    }
    v1EndpointUpdateOauthConfig(appId, endpointId, endpointOauthConfigIn, _options) {
        return this.v1EndpointUpdateOauthConfigWithHttpInfo(appId, endpointId, endpointOauthConfigIn, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1SinkCreateWithHttpInfo(appId, sinkIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1SinkCreate(appId, sinkIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1SinkCreateWithHttpInfo(rsp)));
        }));
    }
    v1SinkCreate(appId, sinkIn, idempotencyKey, _options) {
        return this.v1SinkCreateWithHttpInfo(appId, sinkIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1SinkGetWithHttpInfo(appId, sinkId, _options) {
        const requestContextPromise = this.requestFactory.v1SinkGet(appId, sinkId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1SinkGetWithHttpInfo(rsp)));
        }));
    }
    v1SinkGet(appId, sinkId, _options) {
        return this.v1SinkGetWithHttpInfo(appId, sinkId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1SinkListWithHttpInfo(appId, limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1SinkList(appId, limit, iterator, order, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1SinkListWithHttpInfo(rsp)));
        }));
    }
    v1SinkList(appId, limit, iterator, order, _options) {
        return this.v1SinkListWithHttpInfo(appId, limit, iterator, order, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableEndpointApi = ObservableEndpointApi;
const EnvironmentApi_1 = require("../apis/EnvironmentApi");
class ObservableEnvironmentApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EnvironmentApi_1.EnvironmentApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EnvironmentApi_1.EnvironmentApiResponseProcessor();
    }
    v1EnvironmentExportWithHttpInfo(idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EnvironmentExport(idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EnvironmentExportWithHttpInfo(rsp)));
        }));
    }
    v1EnvironmentExport(idempotencyKey, _options) {
        return this.v1EnvironmentExportWithHttpInfo(idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EnvironmentExportGetWithHttpInfo(_options) {
        const requestContextPromise = this.requestFactory.v1EnvironmentExportGet(_options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EnvironmentExportGetWithHttpInfo(rsp)));
        }));
    }
    v1EnvironmentExportGet(_options) {
        return this.v1EnvironmentExportGetWithHttpInfo(_options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EnvironmentImportWithHttpInfo(environmentIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EnvironmentImport(environmentIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EnvironmentImportWithHttpInfo(rsp)));
        }));
    }
    v1EnvironmentImport(environmentIn, idempotencyKey, _options) {
        return this.v1EnvironmentImportWithHttpInfo(environmentIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableEnvironmentApi = ObservableEnvironmentApi;
const EnvironmentSettingsApi_1 = require("../apis/EnvironmentSettingsApi");
class ObservableEnvironmentSettingsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EnvironmentSettingsApi_1.EnvironmentSettingsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EnvironmentSettingsApi_1.EnvironmentSettingsApiResponseProcessor();
    }
    v1EnvironmentGetSettingsWithHttpInfo(_options) {
        const requestContextPromise = this.requestFactory.v1EnvironmentGetSettings(_options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EnvironmentGetSettingsWithHttpInfo(rsp)));
        }));
    }
    v1EnvironmentGetSettings(_options) {
        return this.v1EnvironmentGetSettingsWithHttpInfo(_options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableEnvironmentSettingsApi = ObservableEnvironmentSettingsApi;
const EventTypeApi_1 = require("../apis/EventTypeApi");
class ObservableEventTypeApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EventTypeApi_1.EventTypeApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EventTypeApi_1.EventTypeApiResponseProcessor();
    }
    v1EventTypeCreateWithHttpInfo(eventTypeIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeCreate(eventTypeIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypeCreateWithHttpInfo(rsp)));
        }));
    }
    v1EventTypeCreate(eventTypeIn, idempotencyKey, _options) {
        return this.v1EventTypeCreateWithHttpInfo(eventTypeIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EventTypeDeleteWithHttpInfo(eventTypeName, expunge, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeDelete(eventTypeName, expunge, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypeDeleteWithHttpInfo(rsp)));
        }));
    }
    v1EventTypeDelete(eventTypeName, expunge, _options) {
        return this.v1EventTypeDeleteWithHttpInfo(eventTypeName, expunge, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EventTypeExportOpenapiWithHttpInfo(idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeExportOpenapi(idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypeExportOpenapiWithHttpInfo(rsp)));
        }));
    }
    v1EventTypeExportOpenapi(idempotencyKey, _options) {
        return this.v1EventTypeExportOpenapiWithHttpInfo(idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EventTypeGenerateExampleWithHttpInfo(eventTypeSchemaIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypeGenerateExampleWithHttpInfo(rsp)));
        }));
    }
    v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options) {
        return this.v1EventTypeGenerateExampleWithHttpInfo(eventTypeSchemaIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EventTypeGetWithHttpInfo(eventTypeName, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeGet(eventTypeName, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypeGetWithHttpInfo(rsp)));
        }));
    }
    v1EventTypeGet(eventTypeName, _options) {
        return this.v1EventTypeGetWithHttpInfo(eventTypeName, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EventTypeGetRetryScheduleWithHttpInfo(eventTypeName, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeGetRetrySchedule(eventTypeName, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypeGetRetryScheduleWithHttpInfo(rsp)));
        }));
    }
    v1EventTypeGetRetrySchedule(eventTypeName, _options) {
        return this.v1EventTypeGetRetryScheduleWithHttpInfo(eventTypeName, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EventTypeImportOpenapiWithHttpInfo(eventTypeImportOpenApiIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypeImportOpenapiWithHttpInfo(rsp)));
        }));
    }
    v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options) {
        return this.v1EventTypeImportOpenapiWithHttpInfo(eventTypeImportOpenApiIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EventTypeListWithHttpInfo(limit, iterator, order, includeArchived, withContent, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypeListWithHttpInfo(rsp)));
        }));
    }
    v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options) {
        return this.v1EventTypeListWithHttpInfo(limit, iterator, order, includeArchived, withContent, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EventTypePatchWithHttpInfo(eventTypeName, eventTypePatch, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypePatch(eventTypeName, eventTypePatch, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypePatchWithHttpInfo(rsp)));
        }));
    }
    v1EventTypePatch(eventTypeName, eventTypePatch, _options) {
        return this.v1EventTypePatchWithHttpInfo(eventTypeName, eventTypePatch, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EventTypeUpdateWithHttpInfo(eventTypeName, eventTypeUpdate, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypeUpdateWithHttpInfo(rsp)));
        }));
    }
    v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options) {
        return this.v1EventTypeUpdateWithHttpInfo(eventTypeName, eventTypeUpdate, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1EventTypeUpdateRetryScheduleWithHttpInfo(eventTypeName, retryScheduleInOut, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventTypeUpdateRetryScheduleWithHttpInfo(rsp)));
        }));
    }
    v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options) {
        return this.v1EventTypeUpdateRetryScheduleWithHttpInfo(eventTypeName, retryScheduleInOut, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableEventTypeApi = ObservableEventTypeApi;
const EventsApi_1 = require("../apis/EventsApi");
class ObservableEventsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EventsApi_1.EventsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EventsApi_1.EventsApiResponseProcessor();
    }
    v1EventsWithHttpInfo(limit, iterator, eventTypes, channels, after, _options) {
        const requestContextPromise = this.requestFactory.v1Events(limit, iterator, eventTypes, channels, after, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EventsWithHttpInfo(rsp)));
        }));
    }
    v1Events(limit, iterator, eventTypes, channels, after, _options) {
        return this.v1EventsWithHttpInfo(limit, iterator, eventTypes, channels, after, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableEventsApi = ObservableEventsApi;
const HealthApi_1 = require("../apis/HealthApi");
class ObservableHealthApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new HealthApi_1.HealthApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new HealthApi_1.HealthApiResponseProcessor();
    }
    v1HealthGetWithHttpInfo(_options) {
        const requestContextPromise = this.requestFactory.v1HealthGet(_options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1HealthGetWithHttpInfo(rsp)));
        }));
    }
    v1HealthGet(_options) {
        return this.v1HealthGetWithHttpInfo(_options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableHealthApi = ObservableHealthApi;
const InboundApi_1 = require("../apis/InboundApi");
class ObservableInboundApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new InboundApi_1.InboundApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new InboundApi_1.InboundApiResponseProcessor();
    }
    v1InboundMsgWithHttpInfo(appId, inboundToken, body, eventType, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1InboundMsg(appId, inboundToken, body, eventType, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1InboundMsgWithHttpInfo(rsp)));
        }));
    }
    v1InboundMsg(appId, inboundToken, body, eventType, idempotencyKey, _options) {
        return this.v1InboundMsgWithHttpInfo(appId, inboundToken, body, eventType, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1InboundRotateUrlWithHttpInfo(appId, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1InboundRotateUrl(appId, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1InboundRotateUrlWithHttpInfo(rsp)));
        }));
    }
    v1InboundRotateUrl(appId, idempotencyKey, _options) {
        return this.v1InboundRotateUrlWithHttpInfo(appId, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableInboundApi = ObservableInboundApi;
const IntegrationApi_1 = require("../apis/IntegrationApi");
class ObservableIntegrationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new IntegrationApi_1.IntegrationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new IntegrationApi_1.IntegrationApiResponseProcessor();
    }
    v1IntegrationCreateWithHttpInfo(appId, integrationIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationCreate(appId, integrationIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1IntegrationCreateWithHttpInfo(rsp)));
        }));
    }
    v1IntegrationCreate(appId, integrationIn, idempotencyKey, _options) {
        return this.v1IntegrationCreateWithHttpInfo(appId, integrationIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1IntegrationDeleteWithHttpInfo(appId, integId, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationDelete(appId, integId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1IntegrationDeleteWithHttpInfo(rsp)));
        }));
    }
    v1IntegrationDelete(appId, integId, _options) {
        return this.v1IntegrationDeleteWithHttpInfo(appId, integId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1IntegrationGetWithHttpInfo(appId, integId, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationGet(appId, integId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1IntegrationGetWithHttpInfo(rsp)));
        }));
    }
    v1IntegrationGet(appId, integId, _options) {
        return this.v1IntegrationGetWithHttpInfo(appId, integId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1IntegrationGetKeyWithHttpInfo(appId, integId, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationGetKey(appId, integId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1IntegrationGetKeyWithHttpInfo(rsp)));
        }));
    }
    v1IntegrationGetKey(appId, integId, _options) {
        return this.v1IntegrationGetKeyWithHttpInfo(appId, integId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1IntegrationListWithHttpInfo(appId, limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationList(appId, limit, iterator, order, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1IntegrationListWithHttpInfo(rsp)));
        }));
    }
    v1IntegrationList(appId, limit, iterator, order, _options) {
        return this.v1IntegrationListWithHttpInfo(appId, limit, iterator, order, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1IntegrationRotateKeyWithHttpInfo(appId, integId, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationRotateKey(appId, integId, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1IntegrationRotateKeyWithHttpInfo(rsp)));
        }));
    }
    v1IntegrationRotateKey(appId, integId, idempotencyKey, _options) {
        return this.v1IntegrationRotateKeyWithHttpInfo(appId, integId, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1IntegrationUpdateWithHttpInfo(appId, integId, integrationUpdate, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationUpdate(appId, integId, integrationUpdate, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1IntegrationUpdateWithHttpInfo(rsp)));
        }));
    }
    v1IntegrationUpdate(appId, integId, integrationUpdate, _options) {
        return this.v1IntegrationUpdateWithHttpInfo(appId, integId, integrationUpdate, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableIntegrationApi = ObservableIntegrationApi;
const MessageApi_1 = require("../apis/MessageApi");
class ObservableMessageApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new MessageApi_1.MessageApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new MessageApi_1.MessageApiResponseProcessor();
    }
    createMessageAttemptForEndpointWithHttpInfo(appId, endpointId, messageIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.createMessageAttemptForEndpoint(appId, endpointId, messageIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.createMessageAttemptForEndpointWithHttpInfo(rsp)));
        }));
    }
    createMessageAttemptForEndpoint(appId, endpointId, messageIn, idempotencyKey, _options) {
        return this.createMessageAttemptForEndpointWithHttpInfo(appId, endpointId, messageIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageCreateWithHttpInfo(appId, messageIn, withContent, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1MessageCreate(appId, messageIn, withContent, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageCreateWithHttpInfo(rsp)));
        }));
    }
    v1MessageCreate(appId, messageIn, withContent, idempotencyKey, _options) {
        return this.v1MessageCreateWithHttpInfo(appId, messageIn, withContent, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageEventsWithHttpInfo(appId, limit, iterator, eventTypes, channels, after, _options) {
        const requestContextPromise = this.requestFactory.v1MessageEvents(appId, limit, iterator, eventTypes, channels, after, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageEventsWithHttpInfo(rsp)));
        }));
    }
    v1MessageEvents(appId, limit, iterator, eventTypes, channels, after, _options) {
        return this.v1MessageEventsWithHttpInfo(appId, limit, iterator, eventTypes, channels, after, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageEventsSubscriptionWithHttpInfo(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options) {
        const requestContextPromise = this.requestFactory.v1MessageEventsSubscription(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageEventsSubscriptionWithHttpInfo(rsp)));
        }));
    }
    v1MessageEventsSubscription(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options) {
        return this.v1MessageEventsSubscriptionWithHttpInfo(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageEventsSubscriptionCreateTokenWithHttpInfo(appId, subscriptionId, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1MessageEventsSubscriptionCreateToken(appId, subscriptionId, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageEventsSubscriptionCreateTokenWithHttpInfo(rsp)));
        }));
    }
    v1MessageEventsSubscriptionCreateToken(appId, subscriptionId, idempotencyKey, _options) {
        return this.v1MessageEventsSubscriptionCreateTokenWithHttpInfo(appId, subscriptionId, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageExpungeContentWithHttpInfo(appId, msgId, _options) {
        const requestContextPromise = this.requestFactory.v1MessageExpungeContent(appId, msgId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageExpungeContentWithHttpInfo(rsp)));
        }));
    }
    v1MessageExpungeContent(appId, msgId, _options) {
        return this.v1MessageExpungeContentWithHttpInfo(appId, msgId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageGetWithHttpInfo(appId, msgId, withContent, _options) {
        const requestContextPromise = this.requestFactory.v1MessageGet(appId, msgId, withContent, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageGetWithHttpInfo(rsp)));
        }));
    }
    v1MessageGet(appId, msgId, withContent, _options) {
        return this.v1MessageGetWithHttpInfo(appId, msgId, withContent, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageGetRawPayloadWithHttpInfo(appId, msgId, _options) {
        const requestContextPromise = this.requestFactory.v1MessageGetRawPayload(appId, msgId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageGetRawPayloadWithHttpInfo(rsp)));
        }));
    }
    v1MessageGetRawPayload(appId, msgId, _options) {
        return this.v1MessageGetRawPayloadWithHttpInfo(appId, msgId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageListWithHttpInfo(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageList(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageListWithHttpInfo(rsp)));
        }));
    }
    v1MessageList(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options) {
        return this.v1MessageListWithHttpInfo(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableMessageApi = ObservableMessageApi;
const MessageAttemptApi_1 = require("../apis/MessageAttemptApi");
class ObservableMessageAttemptApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new MessageAttemptApi_1.MessageAttemptApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new MessageAttemptApi_1.MessageAttemptApiResponseProcessor();
    }
    v1MessageAttemptExpungeContentWithHttpInfo(appId, msgId, attemptId, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptExpungeContent(appId, msgId, attemptId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageAttemptExpungeContentWithHttpInfo(rsp)));
        }));
    }
    v1MessageAttemptExpungeContent(appId, msgId, attemptId, _options) {
        return this.v1MessageAttemptExpungeContentWithHttpInfo(appId, msgId, attemptId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageAttemptGetWithHttpInfo(appId, msgId, attemptId, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptGet(appId, msgId, attemptId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageAttemptGetWithHttpInfo(rsp)));
        }));
    }
    v1MessageAttemptGet(appId, msgId, attemptId, _options) {
        return this.v1MessageAttemptGetWithHttpInfo(appId, msgId, attemptId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageAttemptGetHeadersWithHttpInfo(appId, msgId, attemptId, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptGetHeaders(appId, msgId, attemptId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageAttemptGetHeadersWithHttpInfo(rsp)));
        }));
    }
    v1MessageAttemptGetHeaders(appId, msgId, attemptId, _options) {
        return this.v1MessageAttemptGetHeadersWithHttpInfo(appId, msgId, attemptId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageAttemptListAttemptedDestinationsWithHttpInfo(appId, msgId, limit, iterator, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListAttemptedDestinations(appId, msgId, limit, iterator, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageAttemptListAttemptedDestinationsWithHttpInfo(rsp)));
        }));
    }
    v1MessageAttemptListAttemptedDestinations(appId, msgId, limit, iterator, _options) {
        return this.v1MessageAttemptListAttemptedDestinationsWithHttpInfo(appId, msgId, limit, iterator, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageAttemptListAttemptedMessagesWithHttpInfo(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListAttemptedMessages(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageAttemptListAttemptedMessagesWithHttpInfo(rsp)));
        }));
    }
    v1MessageAttemptListAttemptedMessages(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options) {
        return this.v1MessageAttemptListAttemptedMessagesWithHttpInfo(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageAttemptListByEndpointWithHttpInfo(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListByEndpoint(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageAttemptListByEndpointWithHttpInfo(rsp)));
        }));
    }
    v1MessageAttemptListByEndpoint(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options) {
        return this.v1MessageAttemptListByEndpointWithHttpInfo(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListByEndpointDeprecated(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(rsp)));
        }));
    }
    v1MessageAttemptListByEndpointDeprecated(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options) {
        return this.v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageAttemptListByMsgWithHttpInfo(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListByMsg(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageAttemptListByMsgWithHttpInfo(rsp)));
        }));
    }
    v1MessageAttemptListByMsg(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options) {
        return this.v1MessageAttemptListByMsgWithHttpInfo(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageAttemptListByMsgDeprecatedWithHttpInfo(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListByMsgDeprecated(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageAttemptListByMsgDeprecatedWithHttpInfo(rsp)));
        }));
    }
    v1MessageAttemptListByMsgDeprecated(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options) {
        return this.v1MessageAttemptListByMsgDeprecatedWithHttpInfo(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1MessageAttemptResendWithHttpInfo(appId, msgId, endpointId, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptResend(appId, msgId, endpointId, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1MessageAttemptResendWithHttpInfo(rsp)));
        }));
    }
    v1MessageAttemptResend(appId, msgId, endpointId, idempotencyKey, _options) {
        return this.v1MessageAttemptResendWithHttpInfo(appId, msgId, endpointId, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableMessageAttemptApi = ObservableMessageAttemptApi;
const StatisticsApi_1 = require("../apis/StatisticsApi");
class ObservableStatisticsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new StatisticsApi_1.StatisticsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new StatisticsApi_1.StatisticsApiResponseProcessor();
    }
    v1StatisticsAggregateAppStatsWithHttpInfo(appUsageStatsIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StatisticsAggregateAppStatsWithHttpInfo(rsp)));
        }));
    }
    v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options) {
        return this.v1StatisticsAggregateAppStatsWithHttpInfo(appUsageStatsIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StatisticsAggregateEventTypesWithHttpInfo(_options) {
        const requestContextPromise = this.requestFactory.v1StatisticsAggregateEventTypes(_options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StatisticsAggregateEventTypesWithHttpInfo(rsp)));
        }));
    }
    v1StatisticsAggregateEventTypes(_options) {
        return this.v1StatisticsAggregateEventTypesWithHttpInfo(_options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StatsAppAttemptsWithHttpInfo(appId, startDate, endDate, _options) {
        const requestContextPromise = this.requestFactory.v1StatsAppAttempts(appId, startDate, endDate, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StatsAppAttemptsWithHttpInfo(rsp)));
        }));
    }
    v1StatsAppAttempts(appId, startDate, endDate, _options) {
        return this.v1StatsAppAttemptsWithHttpInfo(appId, startDate, endDate, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StatsEndpointAttemptsWithHttpInfo(appId, endpointId, startDate, endDate, _options) {
        const requestContextPromise = this.requestFactory.v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StatsEndpointAttemptsWithHttpInfo(rsp)));
        }));
    }
    v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options) {
        return this.v1StatsEndpointAttemptsWithHttpInfo(appId, endpointId, startDate, endDate, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableStatisticsApi = ObservableStatisticsApi;
const StreamApi_1 = require("../apis/StreamApi");
class ObservableStreamApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new StreamApi_1.StreamApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new StreamApi_1.StreamApiResponseProcessor();
    }
    v1StreamCreateWithHttpInfo(streamIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1StreamCreate(streamIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamCreateWithHttpInfo(rsp)));
        }));
    }
    v1StreamCreate(streamIn, idempotencyKey, _options) {
        return this.v1StreamCreateWithHttpInfo(streamIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamCreateEventsWithHttpInfo(streamId, createStreamIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1StreamCreateEvents(streamId, createStreamIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamCreateEventsWithHttpInfo(rsp)));
        }));
    }
    v1StreamCreateEvents(streamId, createStreamIn, idempotencyKey, _options) {
        return this.v1StreamCreateEventsWithHttpInfo(streamId, createStreamIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamDeleteWithHttpInfo(streamId, _options) {
        const requestContextPromise = this.requestFactory.v1StreamDelete(streamId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamDeleteWithHttpInfo(rsp)));
        }));
    }
    v1StreamDelete(streamId, _options) {
        return this.v1StreamDeleteWithHttpInfo(streamId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamEventsGetWithHttpInfo(streamId, limit, iterator, after, _options) {
        const requestContextPromise = this.requestFactory.v1StreamEventsGet(streamId, limit, iterator, after, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamEventsGetWithHttpInfo(rsp)));
        }));
    }
    v1StreamEventsGet(streamId, limit, iterator, after, _options) {
        return this.v1StreamEventsGetWithHttpInfo(streamId, limit, iterator, after, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamGetWithHttpInfo(streamId, _options) {
        const requestContextPromise = this.requestFactory.v1StreamGet(streamId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamGetWithHttpInfo(rsp)));
        }));
    }
    v1StreamGet(streamId, _options) {
        return this.v1StreamGetWithHttpInfo(streamId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamListWithHttpInfo(limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1StreamList(limit, iterator, order, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamListWithHttpInfo(rsp)));
        }));
    }
    v1StreamList(limit, iterator, order, _options) {
        return this.v1StreamListWithHttpInfo(limit, iterator, order, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamPatchWithHttpInfo(streamId, streamPatch, _options) {
        const requestContextPromise = this.requestFactory.v1StreamPatch(streamId, streamPatch, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamPatchWithHttpInfo(rsp)));
        }));
    }
    v1StreamPatch(streamId, streamPatch, _options) {
        return this.v1StreamPatchWithHttpInfo(streamId, streamPatch, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamUpdateWithHttpInfo(streamId, streamIn, _options) {
        const requestContextPromise = this.requestFactory.v1StreamUpdate(streamId, streamIn, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamUpdateWithHttpInfo(rsp)));
        }));
    }
    v1StreamUpdate(streamId, streamIn, _options) {
        return this.v1StreamUpdateWithHttpInfo(streamId, streamIn, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableStreamApi = ObservableStreamApi;
const StreamEventTypesApi_1 = require("../apis/StreamEventTypesApi");
class ObservableStreamEventTypesApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new StreamEventTypesApi_1.StreamEventTypesApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new StreamEventTypesApi_1.StreamEventTypesApiResponseProcessor();
    }
    v1StreamEventTypeCreateWithHttpInfo(streamEventTypeIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1StreamEventTypeCreate(streamEventTypeIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamEventTypeCreateWithHttpInfo(rsp)));
        }));
    }
    v1StreamEventTypeCreate(streamEventTypeIn, idempotencyKey, _options) {
        return this.v1StreamEventTypeCreateWithHttpInfo(streamEventTypeIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamEventTypeDeleteWithHttpInfo(name, _options) {
        const requestContextPromise = this.requestFactory.v1StreamEventTypeDelete(name, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamEventTypeDeleteWithHttpInfo(rsp)));
        }));
    }
    v1StreamEventTypeDelete(name, _options) {
        return this.v1StreamEventTypeDeleteWithHttpInfo(name, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamEventTypeGetWithHttpInfo(name, _options) {
        const requestContextPromise = this.requestFactory.v1StreamEventTypeGet(name, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamEventTypeGetWithHttpInfo(rsp)));
        }));
    }
    v1StreamEventTypeGet(name, _options) {
        return this.v1StreamEventTypeGetWithHttpInfo(name, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamEventTypeListWithHttpInfo(limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1StreamEventTypeList(limit, iterator, order, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamEventTypeListWithHttpInfo(rsp)));
        }));
    }
    v1StreamEventTypeList(limit, iterator, order, _options) {
        return this.v1StreamEventTypeListWithHttpInfo(limit, iterator, order, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamEventTypePatchWithHttpInfo(name, streamEventTypePatch, _options) {
        const requestContextPromise = this.requestFactory.v1StreamEventTypePatch(name, streamEventTypePatch, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamEventTypePatchWithHttpInfo(rsp)));
        }));
    }
    v1StreamEventTypePatch(name, streamEventTypePatch, _options) {
        return this.v1StreamEventTypePatchWithHttpInfo(name, streamEventTypePatch, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1StreamEventTypeUpdateWithHttpInfo(name, streamEventTypeIn, _options) {
        const requestContextPromise = this.requestFactory.v1StreamEventTypeUpdate(name, streamEventTypeIn, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1StreamEventTypeUpdateWithHttpInfo(rsp)));
        }));
    }
    v1StreamEventTypeUpdate(name, streamEventTypeIn, _options) {
        return this.v1StreamEventTypeUpdateWithHttpInfo(name, streamEventTypeIn, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableStreamEventTypesApi = ObservableStreamEventTypesApi;
const TransformationTemplateApi_1 = require("../apis/TransformationTemplateApi");
class ObservableTransformationTemplateApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new TransformationTemplateApi_1.TransformationTemplateApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new TransformationTemplateApi_1.TransformationTemplateApiResponseProcessor();
    }
    v1EndpointUpdateHubspotOauthConfigWithHttpInfo(appId, endpointId, hubspotOauthConfigIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointUpdateHubspotOauthConfig(appId, endpointId, hubspotOauthConfigIn, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1EndpointUpdateHubspotOauthConfigWithHttpInfo(rsp)));
        }));
    }
    v1EndpointUpdateHubspotOauthConfig(appId, endpointId, hubspotOauthConfigIn, _options) {
        return this.v1EndpointUpdateHubspotOauthConfigWithHttpInfo(appId, endpointId, hubspotOauthConfigIn, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplateCreateWithHttpInfo(templateIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateCreate(templateIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplateCreateWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplateCreate(templateIn, idempotencyKey, _options) {
        return this.v1TransformationTemplateCreateWithHttpInfo(templateIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplateDeleteWithHttpInfo(transformationTemplateId, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateDelete(transformationTemplateId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplateDeleteWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplateDelete(transformationTemplateId, _options) {
        return this.v1TransformationTemplateDeleteWithHttpInfo(transformationTemplateId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplateGenerateWithHttpInfo(generateIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateGenerate(generateIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplateGenerateWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplateGenerate(generateIn, idempotencyKey, _options) {
        return this.v1TransformationTemplateGenerateWithHttpInfo(generateIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplateGetWithHttpInfo(transformationTemplateId, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateGet(transformationTemplateId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplateGetWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplateGet(transformationTemplateId, _options) {
        return this.v1TransformationTemplateGetWithHttpInfo(transformationTemplateId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplateListWithHttpInfo(limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateList(limit, iterator, order, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplateListWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplateList(limit, iterator, order, _options) {
        return this.v1TransformationTemplateListWithHttpInfo(limit, iterator, order, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplateOauthDiscordWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthDiscord(oAuthPayloadIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplateOauthDiscordWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplateOauthDiscord(oAuthPayloadIn, idempotencyKey, _options) {
        return this.v1TransformationTemplateOauthDiscordWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplateOauthHubspotWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthHubspot(oAuthPayloadIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplateOauthHubspotWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplateOauthHubspot(oAuthPayloadIn, idempotencyKey, _options) {
        return this.v1TransformationTemplateOauthHubspotWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplateOauthSlackWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthSlack(oAuthPayloadIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplateOauthSlackWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplateOauthSlack(oAuthPayloadIn, idempotencyKey, _options) {
        return this.v1TransformationTemplateOauthSlackWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplatePatchWithHttpInfo(transformationTemplateId, templatePatch, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplatePatch(transformationTemplateId, templatePatch, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplatePatchWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplatePatch(transformationTemplateId, templatePatch, _options) {
        return this.v1TransformationTemplatePatchWithHttpInfo(transformationTemplateId, templatePatch, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplateSimulateWithHttpInfo(transformationSimulateIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateSimulate(transformationSimulateIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplateSimulateWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplateSimulate(transformationSimulateIn, idempotencyKey, _options) {
        return this.v1TransformationTemplateSimulateWithHttpInfo(transformationSimulateIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    v1TransformationTemplateUpdateWithHttpInfo(transformationTemplateId, templateUpdate, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateUpdate(transformationTemplateId, templateUpdate, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.v1TransformationTemplateUpdateWithHttpInfo(rsp)));
        }));
    }
    v1TransformationTemplateUpdate(transformationTemplateId, templateUpdate, _options) {
        return this.v1TransformationTemplateUpdateWithHttpInfo(transformationTemplateId, templateUpdate, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableTransformationTemplateApi = ObservableTransformationTemplateApi;
const WebhookEndpointApi_1 = require("../apis/WebhookEndpointApi");
class ObservableWebhookEndpointApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new WebhookEndpointApi_1.WebhookEndpointApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new WebhookEndpointApi_1.WebhookEndpointApiResponseProcessor();
    }
    createOperationalWebhookEndpointWithHttpInfo(operationalWebhookEndpointIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.createOperationalWebhookEndpoint(operationalWebhookEndpointIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.createOperationalWebhookEndpointWithHttpInfo(rsp)));
        }));
    }
    createOperationalWebhookEndpoint(operationalWebhookEndpointIn, idempotencyKey, _options) {
        return this.createOperationalWebhookEndpointWithHttpInfo(operationalWebhookEndpointIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    deleteOperationalWebhookEndpointWithHttpInfo(endpointId, _options) {
        const requestContextPromise = this.requestFactory.deleteOperationalWebhookEndpoint(endpointId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.deleteOperationalWebhookEndpointWithHttpInfo(rsp)));
        }));
    }
    deleteOperationalWebhookEndpoint(endpointId, _options) {
        return this.deleteOperationalWebhookEndpointWithHttpInfo(endpointId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getOperationalWebhookEndpointWithHttpInfo(endpointId, _options) {
        const requestContextPromise = this.requestFactory.getOperationalWebhookEndpoint(endpointId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getOperationalWebhookEndpointWithHttpInfo(rsp)));
        }));
    }
    getOperationalWebhookEndpoint(endpointId, _options) {
        return this.getOperationalWebhookEndpointWithHttpInfo(endpointId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    getOperationalWebhookEndpointSecretWithHttpInfo(endpointId, _options) {
        const requestContextPromise = this.requestFactory.getOperationalWebhookEndpointSecret(endpointId, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.getOperationalWebhookEndpointSecretWithHttpInfo(rsp)));
        }));
    }
    getOperationalWebhookEndpointSecret(endpointId, _options) {
        return this.getOperationalWebhookEndpointSecretWithHttpInfo(endpointId, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    listOperationalWebhookEndpointsWithHttpInfo(limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.listOperationalWebhookEndpoints(limit, iterator, order, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.listOperationalWebhookEndpointsWithHttpInfo(rsp)));
        }));
    }
    listOperationalWebhookEndpoints(limit, iterator, order, _options) {
        return this.listOperationalWebhookEndpointsWithHttpInfo(limit, iterator, order, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    rotateOperationalWebhookEndpointSecretWithHttpInfo(endpointId, operationalWebhookEndpointSecretIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.rotateOperationalWebhookEndpointSecret(endpointId, operationalWebhookEndpointSecretIn, idempotencyKey, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.rotateOperationalWebhookEndpointSecretWithHttpInfo(rsp)));
        }));
    }
    rotateOperationalWebhookEndpointSecret(endpointId, operationalWebhookEndpointSecretIn, idempotencyKey, _options) {
        return this.rotateOperationalWebhookEndpointSecretWithHttpInfo(endpointId, operationalWebhookEndpointSecretIn, idempotencyKey, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
    updateOperationalWebhookEndpointWithHttpInfo(endpointId, operationalWebhookEndpointUpdate, _options) {
        const requestContextPromise = this.requestFactory.updateOperationalWebhookEndpoint(endpointId, operationalWebhookEndpointUpdate, _options);
        let middlewarePreObservable = (0, rxjsStub_1.from)(requestContextPromise);
        for (const middleware of this.configuration.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe((0, rxjsStub_2.mergeMap)((ctx) => this.configuration.httpApi.send(ctx))).
            pipe((0, rxjsStub_2.mergeMap)((response) => {
            let middlewarePostObservable = (0, rxjsStub_1.of)(response);
            for (const middleware of this.configuration.middleware) {
                middlewarePostObservable = middlewarePostObservable.pipe((0, rxjsStub_2.mergeMap)((rsp) => middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe((0, rxjsStub_2.map)((rsp) => this.responseProcessor.updateOperationalWebhookEndpointWithHttpInfo(rsp)));
        }));
    }
    updateOperationalWebhookEndpoint(endpointId, operationalWebhookEndpointUpdate, _options) {
        return this.updateOperationalWebhookEndpointWithHttpInfo(endpointId, operationalWebhookEndpointUpdate, _options).pipe((0, rxjsStub_2.map)((apiResponse) => apiResponse.data));
    }
}
exports.ObservableWebhookEndpointApi = ObservableWebhookEndpointApi;
//# sourceMappingURL=ObservableAPI.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseWebhookEndpointApi = exports.PromiseTransformationTemplateApi = exports.PromiseStreamEventTypesApi = exports.PromiseStreamApi = exports.PromiseStatisticsApi = exports.PromiseMessageAttemptApi = exports.PromiseMessageApi = exports.PromiseIntegrationApi = exports.PromiseInboundApi = exports.PromiseHealthApi = exports.PromiseEventsApi = exports.PromiseEventTypeApi = exports.PromiseEnvironmentSettingsApi = exports.PromiseEnvironmentApi = exports.PromiseEndpointApi = exports.PromiseBroadcastApi = exports.PromiseBackgroundTasksApi = exports.PromiseAuthenticationApi = exports.PromiseApplicationApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class PromiseApplicationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableApplicationApi(configuration, requestFactory, responseProcessor);
    }
    getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(since, until, limit, iterator, _options) {
        const result = this.api.getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(since, until, limit, iterator, _options);
        return result.toPromise();
    }
    getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options) {
        const result = this.api.getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options);
        return result.toPromise();
    }
    v1ApplicationCreateWithHttpInfo(applicationIn, getIfExists, idempotencyKey, _options) {
        const result = this.api.v1ApplicationCreateWithHttpInfo(applicationIn, getIfExists, idempotencyKey, _options);
        return result.toPromise();
    }
    v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options) {
        const result = this.api.v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options);
        return result.toPromise();
    }
    v1ApplicationDeleteWithHttpInfo(appId, _options) {
        const result = this.api.v1ApplicationDeleteWithHttpInfo(appId, _options);
        return result.toPromise();
    }
    v1ApplicationDelete(appId, _options) {
        const result = this.api.v1ApplicationDelete(appId, _options);
        return result.toPromise();
    }
    v1ApplicationGetWithHttpInfo(appId, _options) {
        const result = this.api.v1ApplicationGetWithHttpInfo(appId, _options);
        return result.toPromise();
    }
    v1ApplicationGet(appId, _options) {
        const result = this.api.v1ApplicationGet(appId, _options);
        return result.toPromise();
    }
    v1ApplicationGetStatsWithHttpInfo(since, until, appId, _options) {
        const result = this.api.v1ApplicationGetStatsWithHttpInfo(since, until, appId, _options);
        return result.toPromise();
    }
    v1ApplicationGetStats(since, until, appId, _options) {
        const result = this.api.v1ApplicationGetStats(since, until, appId, _options);
        return result.toPromise();
    }
    v1ApplicationListWithHttpInfo(limit, iterator, order, _options) {
        const result = this.api.v1ApplicationListWithHttpInfo(limit, iterator, order, _options);
        return result.toPromise();
    }
    v1ApplicationList(limit, iterator, order, _options) {
        const result = this.api.v1ApplicationList(limit, iterator, order, _options);
        return result.toPromise();
    }
    v1ApplicationPatchWithHttpInfo(appId, applicationPatch, _options) {
        const result = this.api.v1ApplicationPatchWithHttpInfo(appId, applicationPatch, _options);
        return result.toPromise();
    }
    v1ApplicationPatch(appId, applicationPatch, _options) {
        const result = this.api.v1ApplicationPatch(appId, applicationPatch, _options);
        return result.toPromise();
    }
    v1ApplicationUpdateWithHttpInfo(appId, applicationIn, _options) {
        const result = this.api.v1ApplicationUpdateWithHttpInfo(appId, applicationIn, _options);
        return result.toPromise();
    }
    v1ApplicationUpdate(appId, applicationIn, _options) {
        const result = this.api.v1ApplicationUpdate(appId, applicationIn, _options);
        return result.toPromise();
    }
}
exports.PromiseApplicationApi = PromiseApplicationApi;
const ObservableAPI_2 = require("./ObservableAPI");
class PromiseAuthenticationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);
    }
    v1AuthenticationAppPortalAccessWithHttpInfo(appId, appPortalAccessIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationAppPortalAccessWithHttpInfo(appId, appPortalAccessIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationCreateMessageTokenWithHttpInfo(appId, createMessageTokenIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationCreateMessageTokenWithHttpInfo(appId, createMessageTokenIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationCreateMessageToken(appId, createMessageTokenIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationCreateMessageToken(appId, createMessageTokenIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationDashboardAccessWithHttpInfo(appId, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationDashboardAccessWithHttpInfo(appId, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationDashboardAccess(appId, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationDashboardAccess(appId, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationExchangeOneTimeTokenWithHttpInfo(oneTimeTokenIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationExchangeOneTimeTokenWithHttpInfo(oneTimeTokenIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationExpireAllWithHttpInfo(appId, applicationTokenExpireIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationExpireAllWithHttpInfo(appId, applicationTokenExpireIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options) {
        const result = this.api.v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationLogoutWithHttpInfo(idempotencyKey, _options) {
        const result = this.api.v1AuthenticationLogoutWithHttpInfo(idempotencyKey, _options);
        return result.toPromise();
    }
    v1AuthenticationLogout(idempotencyKey, _options) {
        const result = this.api.v1AuthenticationLogout(idempotencyKey, _options);
        return result.toPromise();
    }
}
exports.PromiseAuthenticationApi = PromiseAuthenticationApi;
const ObservableAPI_3 = require("./ObservableAPI");
class PromiseBackgroundTasksApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_3.ObservableBackgroundTasksApi(configuration, requestFactory, responseProcessor);
    }
    getBackgroundTaskWithHttpInfo(taskId, _options) {
        const result = this.api.getBackgroundTaskWithHttpInfo(taskId, _options);
        return result.toPromise();
    }
    getBackgroundTask(taskId, _options) {
        const result = this.api.getBackgroundTask(taskId, _options);
        return result.toPromise();
    }
    listBackgroundTasksWithHttpInfo(status, task, limit, iterator, order, _options) {
        const result = this.api.listBackgroundTasksWithHttpInfo(status, task, limit, iterator, order, _options);
        return result.toPromise();
    }
    listBackgroundTasks(status, task, limit, iterator, order, _options) {
        const result = this.api.listBackgroundTasks(status, task, limit, iterator, order, _options);
        return result.toPromise();
    }
}
exports.PromiseBackgroundTasksApi = PromiseBackgroundTasksApi;
const ObservableAPI_4 = require("./ObservableAPI");
class PromiseBroadcastApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_4.ObservableBroadcastApi(configuration, requestFactory, responseProcessor);
    }
    createBroadcastMessageWithHttpInfo(messageBroadcastIn, idempotencyKey, _options) {
        const result = this.api.createBroadcastMessageWithHttpInfo(messageBroadcastIn, idempotencyKey, _options);
        return result.toPromise();
    }
    createBroadcastMessage(messageBroadcastIn, idempotencyKey, _options) {
        const result = this.api.createBroadcastMessage(messageBroadcastIn, idempotencyKey, _options);
        return result.toPromise();
    }
}
exports.PromiseBroadcastApi = PromiseBroadcastApi;
const ObservableAPI_5 = require("./ObservableAPI");
class PromiseEndpointApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_5.ObservableEndpointApi(configuration, requestFactory, responseProcessor);
    }
    v1EndpointCreateWithHttpInfo(appId, endpointIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointCreateWithHttpInfo(appId, endpointIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointCreate(appId, endpointIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointCreate(appId, endpointIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointDeleteWithHttpInfo(appId, endpointId, _options) {
        const result = this.api.v1EndpointDeleteWithHttpInfo(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointDelete(appId, endpointId, _options) {
        const result = this.api.v1EndpointDelete(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointDeleteMtlsConfigWithHttpInfo(appId, endpointId, _options) {
        const result = this.api.v1EndpointDeleteMtlsConfigWithHttpInfo(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointDeleteMtlsConfig(appId, endpointId, _options) {
        const result = this.api.v1EndpointDeleteMtlsConfig(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointDeleteOauthConfigWithHttpInfo(appId, endpointId, _options) {
        const result = this.api.v1EndpointDeleteOauthConfigWithHttpInfo(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointDeleteOauthConfig(appId, endpointId, _options) {
        const result = this.api.v1EndpointDeleteOauthConfig(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGetWithHttpInfo(appId, endpointId, _options) {
        const result = this.api.v1EndpointGetWithHttpInfo(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGet(appId, endpointId, _options) {
        const result = this.api.v1EndpointGet(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGetHeadersWithHttpInfo(appId, endpointId, _options) {
        const result = this.api.v1EndpointGetHeadersWithHttpInfo(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGetHeaders(appId, endpointId, _options) {
        const result = this.api.v1EndpointGetHeaders(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGetSecretWithHttpInfo(appId, endpointId, _options) {
        const result = this.api.v1EndpointGetSecretWithHttpInfo(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGetSecret(appId, endpointId, _options) {
        const result = this.api.v1EndpointGetSecret(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointGetStatsWithHttpInfo(appId, endpointId, since, until, _options) {
        const result = this.api.v1EndpointGetStatsWithHttpInfo(appId, endpointId, since, until, _options);
        return result.toPromise();
    }
    v1EndpointGetStats(appId, endpointId, since, until, _options) {
        const result = this.api.v1EndpointGetStats(appId, endpointId, since, until, _options);
        return result.toPromise();
    }
    v1EndpointListWithHttpInfo(appId, limit, iterator, order, _options) {
        const result = this.api.v1EndpointListWithHttpInfo(appId, limit, iterator, order, _options);
        return result.toPromise();
    }
    v1EndpointList(appId, limit, iterator, order, _options) {
        const result = this.api.v1EndpointList(appId, limit, iterator, order, _options);
        return result.toPromise();
    }
    v1EndpointPatchWithHttpInfo(appId, endpointId, endpointPatch, _options) {
        const result = this.api.v1EndpointPatchWithHttpInfo(appId, endpointId, endpointPatch, _options);
        return result.toPromise();
    }
    v1EndpointPatch(appId, endpointId, endpointPatch, _options) {
        const result = this.api.v1EndpointPatch(appId, endpointId, endpointPatch, _options);
        return result.toPromise();
    }
    v1EndpointPatchHeadersWithHttpInfo(appId, endpointId, endpointHeadersPatchIn, _options) {
        const result = this.api.v1EndpointPatchHeadersWithHttpInfo(appId, endpointId, endpointHeadersPatchIn, _options);
        return result.toPromise();
    }
    v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn, _options) {
        const result = this.api.v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn, _options);
        return result.toPromise();
    }
    v1EndpointRecoverWithHttpInfo(appId, endpointId, recoverIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointRecoverWithHttpInfo(appId, endpointId, recoverIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointReplayWithHttpInfo(appId, endpointId, replayIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointReplayWithHttpInfo(appId, endpointId, replayIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointReplay(appId, endpointId, replayIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointReplay(appId, endpointId, replayIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointRotateSecretWithHttpInfo(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointRotateSecretWithHttpInfo(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointSendExampleWithHttpInfo(appId, endpointId, eventExampleIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointSendExampleWithHttpInfo(appId, endpointId, eventExampleIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointTransformationGetWithHttpInfo(appId, endpointId, _options) {
        const result = this.api.v1EndpointTransformationGetWithHttpInfo(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointTransformationGet(appId, endpointId, _options) {
        const result = this.api.v1EndpointTransformationGet(appId, endpointId, _options);
        return result.toPromise();
    }
    v1EndpointTransformationPartialUpdateWithHttpInfo(appId, endpointId, endpointTransformationIn, _options) {
        const result = this.api.v1EndpointTransformationPartialUpdateWithHttpInfo(appId, endpointId, endpointTransformationIn, _options);
        return result.toPromise();
    }
    v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn, _options) {
        const result = this.api.v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn, _options);
        return result.toPromise();
    }
    v1EndpointTransformationSimulateWithHttpInfo(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointTransformationSimulateWithHttpInfo(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options) {
        const result = this.api.v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EndpointUpdateWithHttpInfo(appId, endpointId, endpointUpdate, _options) {
        const result = this.api.v1EndpointUpdateWithHttpInfo(appId, endpointId, endpointUpdate, _options);
        return result.toPromise();
    }
    v1EndpointUpdate(appId, endpointId, endpointUpdate, _options) {
        const result = this.api.v1EndpointUpdate(appId, endpointId, endpointUpdate, _options);
        return result.toPromise();
    }
    v1EndpointUpdateHeadersWithHttpInfo(appId, endpointId, endpointHeadersIn, _options) {
        const result = this.api.v1EndpointUpdateHeadersWithHttpInfo(appId, endpointId, endpointHeadersIn, _options);
        return result.toPromise();
    }
    v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn, _options) {
        const result = this.api.v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn, _options);
        return result.toPromise();
    }
    v1EndpointUpdateMtlsConfigWithHttpInfo(appId, endpointId, endpointMtlsConfigIn, _options) {
        const result = this.api.v1EndpointUpdateMtlsConfigWithHttpInfo(appId, endpointId, endpointMtlsConfigIn, _options);
        return result.toPromise();
    }
    v1EndpointUpdateMtlsConfig(appId, endpointId, endpointMtlsConfigIn, _options) {
        const result = this.api.v1EndpointUpdateMtlsConfig(appId, endpointId, endpointMtlsConfigIn, _options);
        return result.toPromise();
    }
    v1EndpointUpdateOauthConfigWithHttpInfo(appId, endpointId, endpointOauthConfigIn, _options) {
        const result = this.api.v1EndpointUpdateOauthConfigWithHttpInfo(appId, endpointId, endpointOauthConfigIn, _options);
        return result.toPromise();
    }
    v1EndpointUpdateOauthConfig(appId, endpointId, endpointOauthConfigIn, _options) {
        const result = this.api.v1EndpointUpdateOauthConfig(appId, endpointId, endpointOauthConfigIn, _options);
        return result.toPromise();
    }
    v1SinkCreateWithHttpInfo(appId, sinkIn, idempotencyKey, _options) {
        const result = this.api.v1SinkCreateWithHttpInfo(appId, sinkIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1SinkCreate(appId, sinkIn, idempotencyKey, _options) {
        const result = this.api.v1SinkCreate(appId, sinkIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1SinkGetWithHttpInfo(appId, sinkId, _options) {
        const result = this.api.v1SinkGetWithHttpInfo(appId, sinkId, _options);
        return result.toPromise();
    }
    v1SinkGet(appId, sinkId, _options) {
        const result = this.api.v1SinkGet(appId, sinkId, _options);
        return result.toPromise();
    }
    v1SinkListWithHttpInfo(appId, limit, iterator, order, _options) {
        const result = this.api.v1SinkListWithHttpInfo(appId, limit, iterator, order, _options);
        return result.toPromise();
    }
    v1SinkList(appId, limit, iterator, order, _options) {
        const result = this.api.v1SinkList(appId, limit, iterator, order, _options);
        return result.toPromise();
    }
}
exports.PromiseEndpointApi = PromiseEndpointApi;
const ObservableAPI_6 = require("./ObservableAPI");
class PromiseEnvironmentApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_6.ObservableEnvironmentApi(configuration, requestFactory, responseProcessor);
    }
    v1EnvironmentExportWithHttpInfo(idempotencyKey, _options) {
        const result = this.api.v1EnvironmentExportWithHttpInfo(idempotencyKey, _options);
        return result.toPromise();
    }
    v1EnvironmentExport(idempotencyKey, _options) {
        const result = this.api.v1EnvironmentExport(idempotencyKey, _options);
        return result.toPromise();
    }
    v1EnvironmentExportGetWithHttpInfo(_options) {
        const result = this.api.v1EnvironmentExportGetWithHttpInfo(_options);
        return result.toPromise();
    }
    v1EnvironmentExportGet(_options) {
        const result = this.api.v1EnvironmentExportGet(_options);
        return result.toPromise();
    }
    v1EnvironmentImportWithHttpInfo(environmentIn, idempotencyKey, _options) {
        const result = this.api.v1EnvironmentImportWithHttpInfo(environmentIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EnvironmentImport(environmentIn, idempotencyKey, _options) {
        const result = this.api.v1EnvironmentImport(environmentIn, idempotencyKey, _options);
        return result.toPromise();
    }
}
exports.PromiseEnvironmentApi = PromiseEnvironmentApi;
const ObservableAPI_7 = require("./ObservableAPI");
class PromiseEnvironmentSettingsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_7.ObservableEnvironmentSettingsApi(configuration, requestFactory, responseProcessor);
    }
    v1EnvironmentGetSettingsWithHttpInfo(_options) {
        const result = this.api.v1EnvironmentGetSettingsWithHttpInfo(_options);
        return result.toPromise();
    }
    v1EnvironmentGetSettings(_options) {
        const result = this.api.v1EnvironmentGetSettings(_options);
        return result.toPromise();
    }
}
exports.PromiseEnvironmentSettingsApi = PromiseEnvironmentSettingsApi;
const ObservableAPI_8 = require("./ObservableAPI");
class PromiseEventTypeApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_8.ObservableEventTypeApi(configuration, requestFactory, responseProcessor);
    }
    v1EventTypeCreateWithHttpInfo(eventTypeIn, idempotencyKey, _options) {
        const result = this.api.v1EventTypeCreateWithHttpInfo(eventTypeIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeCreate(eventTypeIn, idempotencyKey, _options) {
        const result = this.api.v1EventTypeCreate(eventTypeIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeDeleteWithHttpInfo(eventTypeName, expunge, _options) {
        const result = this.api.v1EventTypeDeleteWithHttpInfo(eventTypeName, expunge, _options);
        return result.toPromise();
    }
    v1EventTypeDelete(eventTypeName, expunge, _options) {
        const result = this.api.v1EventTypeDelete(eventTypeName, expunge, _options);
        return result.toPromise();
    }
    v1EventTypeExportOpenapiWithHttpInfo(idempotencyKey, _options) {
        const result = this.api.v1EventTypeExportOpenapiWithHttpInfo(idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeExportOpenapi(idempotencyKey, _options) {
        const result = this.api.v1EventTypeExportOpenapi(idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeGenerateExampleWithHttpInfo(eventTypeSchemaIn, idempotencyKey, _options) {
        const result = this.api.v1EventTypeGenerateExampleWithHttpInfo(eventTypeSchemaIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options) {
        const result = this.api.v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeGetWithHttpInfo(eventTypeName, _options) {
        const result = this.api.v1EventTypeGetWithHttpInfo(eventTypeName, _options);
        return result.toPromise();
    }
    v1EventTypeGet(eventTypeName, _options) {
        const result = this.api.v1EventTypeGet(eventTypeName, _options);
        return result.toPromise();
    }
    v1EventTypeGetRetryScheduleWithHttpInfo(eventTypeName, _options) {
        const result = this.api.v1EventTypeGetRetryScheduleWithHttpInfo(eventTypeName, _options);
        return result.toPromise();
    }
    v1EventTypeGetRetrySchedule(eventTypeName, _options) {
        const result = this.api.v1EventTypeGetRetrySchedule(eventTypeName, _options);
        return result.toPromise();
    }
    v1EventTypeImportOpenapiWithHttpInfo(eventTypeImportOpenApiIn, idempotencyKey, _options) {
        const result = this.api.v1EventTypeImportOpenapiWithHttpInfo(eventTypeImportOpenApiIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options) {
        const result = this.api.v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1EventTypeListWithHttpInfo(limit, iterator, order, includeArchived, withContent, _options) {
        const result = this.api.v1EventTypeListWithHttpInfo(limit, iterator, order, includeArchived, withContent, _options);
        return result.toPromise();
    }
    v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options) {
        const result = this.api.v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options);
        return result.toPromise();
    }
    v1EventTypePatchWithHttpInfo(eventTypeName, eventTypePatch, _options) {
        const result = this.api.v1EventTypePatchWithHttpInfo(eventTypeName, eventTypePatch, _options);
        return result.toPromise();
    }
    v1EventTypePatch(eventTypeName, eventTypePatch, _options) {
        const result = this.api.v1EventTypePatch(eventTypeName, eventTypePatch, _options);
        return result.toPromise();
    }
    v1EventTypeUpdateWithHttpInfo(eventTypeName, eventTypeUpdate, _options) {
        const result = this.api.v1EventTypeUpdateWithHttpInfo(eventTypeName, eventTypeUpdate, _options);
        return result.toPromise();
    }
    v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options) {
        const result = this.api.v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options);
        return result.toPromise();
    }
    v1EventTypeUpdateRetryScheduleWithHttpInfo(eventTypeName, retryScheduleInOut, _options) {
        const result = this.api.v1EventTypeUpdateRetryScheduleWithHttpInfo(eventTypeName, retryScheduleInOut, _options);
        return result.toPromise();
    }
    v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options) {
        const result = this.api.v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options);
        return result.toPromise();
    }
}
exports.PromiseEventTypeApi = PromiseEventTypeApi;
const ObservableAPI_9 = require("./ObservableAPI");
class PromiseEventsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_9.ObservableEventsApi(configuration, requestFactory, responseProcessor);
    }
    v1EventsWithHttpInfo(limit, iterator, eventTypes, channels, after, _options) {
        const result = this.api.v1EventsWithHttpInfo(limit, iterator, eventTypes, channels, after, _options);
        return result.toPromise();
    }
    v1Events(limit, iterator, eventTypes, channels, after, _options) {
        const result = this.api.v1Events(limit, iterator, eventTypes, channels, after, _options);
        return result.toPromise();
    }
}
exports.PromiseEventsApi = PromiseEventsApi;
const ObservableAPI_10 = require("./ObservableAPI");
class PromiseHealthApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_10.ObservableHealthApi(configuration, requestFactory, responseProcessor);
    }
    v1HealthGetWithHttpInfo(_options) {
        const result = this.api.v1HealthGetWithHttpInfo(_options);
        return result.toPromise();
    }
    v1HealthGet(_options) {
        const result = this.api.v1HealthGet(_options);
        return result.toPromise();
    }
}
exports.PromiseHealthApi = PromiseHealthApi;
const ObservableAPI_11 = require("./ObservableAPI");
class PromiseInboundApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_11.ObservableInboundApi(configuration, requestFactory, responseProcessor);
    }
    v1InboundMsgWithHttpInfo(appId, inboundToken, body, eventType, idempotencyKey, _options) {
        const result = this.api.v1InboundMsgWithHttpInfo(appId, inboundToken, body, eventType, idempotencyKey, _options);
        return result.toPromise();
    }
    v1InboundMsg(appId, inboundToken, body, eventType, idempotencyKey, _options) {
        const result = this.api.v1InboundMsg(appId, inboundToken, body, eventType, idempotencyKey, _options);
        return result.toPromise();
    }
    v1InboundRotateUrlWithHttpInfo(appId, idempotencyKey, _options) {
        const result = this.api.v1InboundRotateUrlWithHttpInfo(appId, idempotencyKey, _options);
        return result.toPromise();
    }
    v1InboundRotateUrl(appId, idempotencyKey, _options) {
        const result = this.api.v1InboundRotateUrl(appId, idempotencyKey, _options);
        return result.toPromise();
    }
}
exports.PromiseInboundApi = PromiseInboundApi;
const ObservableAPI_12 = require("./ObservableAPI");
class PromiseIntegrationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_12.ObservableIntegrationApi(configuration, requestFactory, responseProcessor);
    }
    v1IntegrationCreateWithHttpInfo(appId, integrationIn, idempotencyKey, _options) {
        const result = this.api.v1IntegrationCreateWithHttpInfo(appId, integrationIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1IntegrationCreate(appId, integrationIn, idempotencyKey, _options) {
        const result = this.api.v1IntegrationCreate(appId, integrationIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1IntegrationDeleteWithHttpInfo(appId, integId, _options) {
        const result = this.api.v1IntegrationDeleteWithHttpInfo(appId, integId, _options);
        return result.toPromise();
    }
    v1IntegrationDelete(appId, integId, _options) {
        const result = this.api.v1IntegrationDelete(appId, integId, _options);
        return result.toPromise();
    }
    v1IntegrationGetWithHttpInfo(appId, integId, _options) {
        const result = this.api.v1IntegrationGetWithHttpInfo(appId, integId, _options);
        return result.toPromise();
    }
    v1IntegrationGet(appId, integId, _options) {
        const result = this.api.v1IntegrationGet(appId, integId, _options);
        return result.toPromise();
    }
    v1IntegrationGetKeyWithHttpInfo(appId, integId, _options) {
        const result = this.api.v1IntegrationGetKeyWithHttpInfo(appId, integId, _options);
        return result.toPromise();
    }
    v1IntegrationGetKey(appId, integId, _options) {
        const result = this.api.v1IntegrationGetKey(appId, integId, _options);
        return result.toPromise();
    }
    v1IntegrationListWithHttpInfo(appId, limit, iterator, order, _options) {
        const result = this.api.v1IntegrationListWithHttpInfo(appId, limit, iterator, order, _options);
        return result.toPromise();
    }
    v1IntegrationList(appId, limit, iterator, order, _options) {
        const result = this.api.v1IntegrationList(appId, limit, iterator, order, _options);
        return result.toPromise();
    }
    v1IntegrationRotateKeyWithHttpInfo(appId, integId, idempotencyKey, _options) {
        const result = this.api.v1IntegrationRotateKeyWithHttpInfo(appId, integId, idempotencyKey, _options);
        return result.toPromise();
    }
    v1IntegrationRotateKey(appId, integId, idempotencyKey, _options) {
        const result = this.api.v1IntegrationRotateKey(appId, integId, idempotencyKey, _options);
        return result.toPromise();
    }
    v1IntegrationUpdateWithHttpInfo(appId, integId, integrationUpdate, _options) {
        const result = this.api.v1IntegrationUpdateWithHttpInfo(appId, integId, integrationUpdate, _options);
        return result.toPromise();
    }
    v1IntegrationUpdate(appId, integId, integrationUpdate, _options) {
        const result = this.api.v1IntegrationUpdate(appId, integId, integrationUpdate, _options);
        return result.toPromise();
    }
}
exports.PromiseIntegrationApi = PromiseIntegrationApi;
const ObservableAPI_13 = require("./ObservableAPI");
class PromiseMessageApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_13.ObservableMessageApi(configuration, requestFactory, responseProcessor);
    }
    createMessageAttemptForEndpointWithHttpInfo(appId, endpointId, messageIn, idempotencyKey, _options) {
        const result = this.api.createMessageAttemptForEndpointWithHttpInfo(appId, endpointId, messageIn, idempotencyKey, _options);
        return result.toPromise();
    }
    createMessageAttemptForEndpoint(appId, endpointId, messageIn, idempotencyKey, _options) {
        const result = this.api.createMessageAttemptForEndpoint(appId, endpointId, messageIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1MessageCreateWithHttpInfo(appId, messageIn, withContent, idempotencyKey, _options) {
        const result = this.api.v1MessageCreateWithHttpInfo(appId, messageIn, withContent, idempotencyKey, _options);
        return result.toPromise();
    }
    v1MessageCreate(appId, messageIn, withContent, idempotencyKey, _options) {
        const result = this.api.v1MessageCreate(appId, messageIn, withContent, idempotencyKey, _options);
        return result.toPromise();
    }
    v1MessageEventsWithHttpInfo(appId, limit, iterator, eventTypes, channels, after, _options) {
        const result = this.api.v1MessageEventsWithHttpInfo(appId, limit, iterator, eventTypes, channels, after, _options);
        return result.toPromise();
    }
    v1MessageEvents(appId, limit, iterator, eventTypes, channels, after, _options) {
        const result = this.api.v1MessageEvents(appId, limit, iterator, eventTypes, channels, after, _options);
        return result.toPromise();
    }
    v1MessageEventsSubscriptionWithHttpInfo(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options) {
        const result = this.api.v1MessageEventsSubscriptionWithHttpInfo(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options);
        return result.toPromise();
    }
    v1MessageEventsSubscription(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options) {
        const result = this.api.v1MessageEventsSubscription(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options);
        return result.toPromise();
    }
    v1MessageEventsSubscriptionCreateTokenWithHttpInfo(appId, subscriptionId, idempotencyKey, _options) {
        const result = this.api.v1MessageEventsSubscriptionCreateTokenWithHttpInfo(appId, subscriptionId, idempotencyKey, _options);
        return result.toPromise();
    }
    v1MessageEventsSubscriptionCreateToken(appId, subscriptionId, idempotencyKey, _options) {
        const result = this.api.v1MessageEventsSubscriptionCreateToken(appId, subscriptionId, idempotencyKey, _options);
        return result.toPromise();
    }
    v1MessageExpungeContentWithHttpInfo(appId, msgId, _options) {
        const result = this.api.v1MessageExpungeContentWithHttpInfo(appId, msgId, _options);
        return result.toPromise();
    }
    v1MessageExpungeContent(appId, msgId, _options) {
        const result = this.api.v1MessageExpungeContent(appId, msgId, _options);
        return result.toPromise();
    }
    v1MessageGetWithHttpInfo(appId, msgId, withContent, _options) {
        const result = this.api.v1MessageGetWithHttpInfo(appId, msgId, withContent, _options);
        return result.toPromise();
    }
    v1MessageGet(appId, msgId, withContent, _options) {
        const result = this.api.v1MessageGet(appId, msgId, withContent, _options);
        return result.toPromise();
    }
    v1MessageGetRawPayloadWithHttpInfo(appId, msgId, _options) {
        const result = this.api.v1MessageGetRawPayloadWithHttpInfo(appId, msgId, _options);
        return result.toPromise();
    }
    v1MessageGetRawPayload(appId, msgId, _options) {
        const result = this.api.v1MessageGetRawPayload(appId, msgId, _options);
        return result.toPromise();
    }
    v1MessageListWithHttpInfo(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options) {
        const result = this.api.v1MessageListWithHttpInfo(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageList(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options) {
        const result = this.api.v1MessageList(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options);
        return result.toPromise();
    }
}
exports.PromiseMessageApi = PromiseMessageApi;
const ObservableAPI_14 = require("./ObservableAPI");
class PromiseMessageAttemptApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_14.ObservableMessageAttemptApi(configuration, requestFactory, responseProcessor);
    }
    v1MessageAttemptExpungeContentWithHttpInfo(appId, msgId, attemptId, _options) {
        const result = this.api.v1MessageAttemptExpungeContentWithHttpInfo(appId, msgId, attemptId, _options);
        return result.toPromise();
    }
    v1MessageAttemptExpungeContent(appId, msgId, attemptId, _options) {
        const result = this.api.v1MessageAttemptExpungeContent(appId, msgId, attemptId, _options);
        return result.toPromise();
    }
    v1MessageAttemptGetWithHttpInfo(appId, msgId, attemptId, _options) {
        const result = this.api.v1MessageAttemptGetWithHttpInfo(appId, msgId, attemptId, _options);
        return result.toPromise();
    }
    v1MessageAttemptGet(appId, msgId, attemptId, _options) {
        const result = this.api.v1MessageAttemptGet(appId, msgId, attemptId, _options);
        return result.toPromise();
    }
    v1MessageAttemptGetHeadersWithHttpInfo(appId, msgId, attemptId, _options) {
        const result = this.api.v1MessageAttemptGetHeadersWithHttpInfo(appId, msgId, attemptId, _options);
        return result.toPromise();
    }
    v1MessageAttemptGetHeaders(appId, msgId, attemptId, _options) {
        const result = this.api.v1MessageAttemptGetHeaders(appId, msgId, attemptId, _options);
        return result.toPromise();
    }
    v1MessageAttemptListAttemptedDestinationsWithHttpInfo(appId, msgId, limit, iterator, _options) {
        const result = this.api.v1MessageAttemptListAttemptedDestinationsWithHttpInfo(appId, msgId, limit, iterator, _options);
        return result.toPromise();
    }
    v1MessageAttemptListAttemptedDestinations(appId, msgId, limit, iterator, _options) {
        const result = this.api.v1MessageAttemptListAttemptedDestinations(appId, msgId, limit, iterator, _options);
        return result.toPromise();
    }
    v1MessageAttemptListAttemptedMessagesWithHttpInfo(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListAttemptedMessagesWithHttpInfo(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListAttemptedMessages(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListAttemptedMessages(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByEndpointWithHttpInfo(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByEndpointWithHttpInfo(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByEndpoint(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByEndpoint(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByEndpointDeprecated(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByEndpointDeprecated(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByMsgWithHttpInfo(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByMsgWithHttpInfo(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByMsg(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByMsg(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByMsgDeprecatedWithHttpInfo(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByMsgDeprecatedWithHttpInfo(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptListByMsgDeprecated(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options) {
        const result = this.api.v1MessageAttemptListByMsgDeprecated(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options);
        return result.toPromise();
    }
    v1MessageAttemptResendWithHttpInfo(appId, msgId, endpointId, idempotencyKey, _options) {
        const result = this.api.v1MessageAttemptResendWithHttpInfo(appId, msgId, endpointId, idempotencyKey, _options);
        return result.toPromise();
    }
    v1MessageAttemptResend(appId, msgId, endpointId, idempotencyKey, _options) {
        const result = this.api.v1MessageAttemptResend(appId, msgId, endpointId, idempotencyKey, _options);
        return result.toPromise();
    }
}
exports.PromiseMessageAttemptApi = PromiseMessageAttemptApi;
const ObservableAPI_15 = require("./ObservableAPI");
class PromiseStatisticsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_15.ObservableStatisticsApi(configuration, requestFactory, responseProcessor);
    }
    v1StatisticsAggregateAppStatsWithHttpInfo(appUsageStatsIn, idempotencyKey, _options) {
        const result = this.api.v1StatisticsAggregateAppStatsWithHttpInfo(appUsageStatsIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options) {
        const result = this.api.v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1StatisticsAggregateEventTypesWithHttpInfo(_options) {
        const result = this.api.v1StatisticsAggregateEventTypesWithHttpInfo(_options);
        return result.toPromise();
    }
    v1StatisticsAggregateEventTypes(_options) {
        const result = this.api.v1StatisticsAggregateEventTypes(_options);
        return result.toPromise();
    }
    v1StatsAppAttemptsWithHttpInfo(appId, startDate, endDate, _options) {
        const result = this.api.v1StatsAppAttemptsWithHttpInfo(appId, startDate, endDate, _options);
        return result.toPromise();
    }
    v1StatsAppAttempts(appId, startDate, endDate, _options) {
        const result = this.api.v1StatsAppAttempts(appId, startDate, endDate, _options);
        return result.toPromise();
    }
    v1StatsEndpointAttemptsWithHttpInfo(appId, endpointId, startDate, endDate, _options) {
        const result = this.api.v1StatsEndpointAttemptsWithHttpInfo(appId, endpointId, startDate, endDate, _options);
        return result.toPromise();
    }
    v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options) {
        const result = this.api.v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options);
        return result.toPromise();
    }
}
exports.PromiseStatisticsApi = PromiseStatisticsApi;
const ObservableAPI_16 = require("./ObservableAPI");
class PromiseStreamApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_16.ObservableStreamApi(configuration, requestFactory, responseProcessor);
    }
    v1StreamCreateWithHttpInfo(streamIn, idempotencyKey, _options) {
        const result = this.api.v1StreamCreateWithHttpInfo(streamIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1StreamCreate(streamIn, idempotencyKey, _options) {
        const result = this.api.v1StreamCreate(streamIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1StreamCreateEventsWithHttpInfo(streamId, createStreamIn, idempotencyKey, _options) {
        const result = this.api.v1StreamCreateEventsWithHttpInfo(streamId, createStreamIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1StreamCreateEvents(streamId, createStreamIn, idempotencyKey, _options) {
        const result = this.api.v1StreamCreateEvents(streamId, createStreamIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1StreamDeleteWithHttpInfo(streamId, _options) {
        const result = this.api.v1StreamDeleteWithHttpInfo(streamId, _options);
        return result.toPromise();
    }
    v1StreamDelete(streamId, _options) {
        const result = this.api.v1StreamDelete(streamId, _options);
        return result.toPromise();
    }
    v1StreamEventsGetWithHttpInfo(streamId, limit, iterator, after, _options) {
        const result = this.api.v1StreamEventsGetWithHttpInfo(streamId, limit, iterator, after, _options);
        return result.toPromise();
    }
    v1StreamEventsGet(streamId, limit, iterator, after, _options) {
        const result = this.api.v1StreamEventsGet(streamId, limit, iterator, after, _options);
        return result.toPromise();
    }
    v1StreamGetWithHttpInfo(streamId, _options) {
        const result = this.api.v1StreamGetWithHttpInfo(streamId, _options);
        return result.toPromise();
    }
    v1StreamGet(streamId, _options) {
        const result = this.api.v1StreamGet(streamId, _options);
        return result.toPromise();
    }
    v1StreamListWithHttpInfo(limit, iterator, order, _options) {
        const result = this.api.v1StreamListWithHttpInfo(limit, iterator, order, _options);
        return result.toPromise();
    }
    v1StreamList(limit, iterator, order, _options) {
        const result = this.api.v1StreamList(limit, iterator, order, _options);
        return result.toPromise();
    }
    v1StreamPatchWithHttpInfo(streamId, streamPatch, _options) {
        const result = this.api.v1StreamPatchWithHttpInfo(streamId, streamPatch, _options);
        return result.toPromise();
    }
    v1StreamPatch(streamId, streamPatch, _options) {
        const result = this.api.v1StreamPatch(streamId, streamPatch, _options);
        return result.toPromise();
    }
    v1StreamUpdateWithHttpInfo(streamId, streamIn, _options) {
        const result = this.api.v1StreamUpdateWithHttpInfo(streamId, streamIn, _options);
        return result.toPromise();
    }
    v1StreamUpdate(streamId, streamIn, _options) {
        const result = this.api.v1StreamUpdate(streamId, streamIn, _options);
        return result.toPromise();
    }
}
exports.PromiseStreamApi = PromiseStreamApi;
const ObservableAPI_17 = require("./ObservableAPI");
class PromiseStreamEventTypesApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_17.ObservableStreamEventTypesApi(configuration, requestFactory, responseProcessor);
    }
    v1StreamEventTypeCreateWithHttpInfo(streamEventTypeIn, idempotencyKey, _options) {
        const result = this.api.v1StreamEventTypeCreateWithHttpInfo(streamEventTypeIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1StreamEventTypeCreate(streamEventTypeIn, idempotencyKey, _options) {
        const result = this.api.v1StreamEventTypeCreate(streamEventTypeIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1StreamEventTypeDeleteWithHttpInfo(name, _options) {
        const result = this.api.v1StreamEventTypeDeleteWithHttpInfo(name, _options);
        return result.toPromise();
    }
    v1StreamEventTypeDelete(name, _options) {
        const result = this.api.v1StreamEventTypeDelete(name, _options);
        return result.toPromise();
    }
    v1StreamEventTypeGetWithHttpInfo(name, _options) {
        const result = this.api.v1StreamEventTypeGetWithHttpInfo(name, _options);
        return result.toPromise();
    }
    v1StreamEventTypeGet(name, _options) {
        const result = this.api.v1StreamEventTypeGet(name, _options);
        return result.toPromise();
    }
    v1StreamEventTypeListWithHttpInfo(limit, iterator, order, _options) {
        const result = this.api.v1StreamEventTypeListWithHttpInfo(limit, iterator, order, _options);
        return result.toPromise();
    }
    v1StreamEventTypeList(limit, iterator, order, _options) {
        const result = this.api.v1StreamEventTypeList(limit, iterator, order, _options);
        return result.toPromise();
    }
    v1StreamEventTypePatchWithHttpInfo(name, streamEventTypePatch, _options) {
        const result = this.api.v1StreamEventTypePatchWithHttpInfo(name, streamEventTypePatch, _options);
        return result.toPromise();
    }
    v1StreamEventTypePatch(name, streamEventTypePatch, _options) {
        const result = this.api.v1StreamEventTypePatch(name, streamEventTypePatch, _options);
        return result.toPromise();
    }
    v1StreamEventTypeUpdateWithHttpInfo(name, streamEventTypeIn, _options) {
        const result = this.api.v1StreamEventTypeUpdateWithHttpInfo(name, streamEventTypeIn, _options);
        return result.toPromise();
    }
    v1StreamEventTypeUpdate(name, streamEventTypeIn, _options) {
        const result = this.api.v1StreamEventTypeUpdate(name, streamEventTypeIn, _options);
        return result.toPromise();
    }
}
exports.PromiseStreamEventTypesApi = PromiseStreamEventTypesApi;
const ObservableAPI_18 = require("./ObservableAPI");
class PromiseTransformationTemplateApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_18.ObservableTransformationTemplateApi(configuration, requestFactory, responseProcessor);
    }
    v1EndpointUpdateHubspotOauthConfigWithHttpInfo(appId, endpointId, hubspotOauthConfigIn, _options) {
        const result = this.api.v1EndpointUpdateHubspotOauthConfigWithHttpInfo(appId, endpointId, hubspotOauthConfigIn, _options);
        return result.toPromise();
    }
    v1EndpointUpdateHubspotOauthConfig(appId, endpointId, hubspotOauthConfigIn, _options) {
        const result = this.api.v1EndpointUpdateHubspotOauthConfig(appId, endpointId, hubspotOauthConfigIn, _options);
        return result.toPromise();
    }
    v1TransformationTemplateCreateWithHttpInfo(templateIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateCreateWithHttpInfo(templateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateCreate(templateIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateCreate(templateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateDeleteWithHttpInfo(transformationTemplateId, _options) {
        const result = this.api.v1TransformationTemplateDeleteWithHttpInfo(transformationTemplateId, _options);
        return result.toPromise();
    }
    v1TransformationTemplateDelete(transformationTemplateId, _options) {
        const result = this.api.v1TransformationTemplateDelete(transformationTemplateId, _options);
        return result.toPromise();
    }
    v1TransformationTemplateGenerateWithHttpInfo(generateIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateGenerateWithHttpInfo(generateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateGenerate(generateIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateGenerate(generateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateGetWithHttpInfo(transformationTemplateId, _options) {
        const result = this.api.v1TransformationTemplateGetWithHttpInfo(transformationTemplateId, _options);
        return result.toPromise();
    }
    v1TransformationTemplateGet(transformationTemplateId, _options) {
        const result = this.api.v1TransformationTemplateGet(transformationTemplateId, _options);
        return result.toPromise();
    }
    v1TransformationTemplateListWithHttpInfo(limit, iterator, order, _options) {
        const result = this.api.v1TransformationTemplateListWithHttpInfo(limit, iterator, order, _options);
        return result.toPromise();
    }
    v1TransformationTemplateList(limit, iterator, order, _options) {
        const result = this.api.v1TransformationTemplateList(limit, iterator, order, _options);
        return result.toPromise();
    }
    v1TransformationTemplateOauthDiscordWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateOauthDiscordWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateOauthDiscord(oAuthPayloadIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateOauthDiscord(oAuthPayloadIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateOauthHubspotWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateOauthHubspotWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateOauthHubspot(oAuthPayloadIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateOauthHubspot(oAuthPayloadIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateOauthSlackWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateOauthSlackWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateOauthSlack(oAuthPayloadIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateOauthSlack(oAuthPayloadIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplatePatchWithHttpInfo(transformationTemplateId, templatePatch, _options) {
        const result = this.api.v1TransformationTemplatePatchWithHttpInfo(transformationTemplateId, templatePatch, _options);
        return result.toPromise();
    }
    v1TransformationTemplatePatch(transformationTemplateId, templatePatch, _options) {
        const result = this.api.v1TransformationTemplatePatch(transformationTemplateId, templatePatch, _options);
        return result.toPromise();
    }
    v1TransformationTemplateSimulateWithHttpInfo(transformationSimulateIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateSimulateWithHttpInfo(transformationSimulateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateSimulate(transformationSimulateIn, idempotencyKey, _options) {
        const result = this.api.v1TransformationTemplateSimulate(transformationSimulateIn, idempotencyKey, _options);
        return result.toPromise();
    }
    v1TransformationTemplateUpdateWithHttpInfo(transformationTemplateId, templateUpdate, _options) {
        const result = this.api.v1TransformationTemplateUpdateWithHttpInfo(transformationTemplateId, templateUpdate, _options);
        return result.toPromise();
    }
    v1TransformationTemplateUpdate(transformationTemplateId, templateUpdate, _options) {
        const result = this.api.v1TransformationTemplateUpdate(transformationTemplateId, templateUpdate, _options);
        return result.toPromise();
    }
}
exports.PromiseTransformationTemplateApi = PromiseTransformationTemplateApi;
const ObservableAPI_19 = require("./ObservableAPI");
class PromiseWebhookEndpointApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_19.ObservableWebhookEndpointApi(configuration, requestFactory, responseProcessor);
    }
    createOperationalWebhookEndpointWithHttpInfo(operationalWebhookEndpointIn, idempotencyKey, _options) {
        const result = this.api.createOperationalWebhookEndpointWithHttpInfo(operationalWebhookEndpointIn, idempotencyKey, _options);
        return result.toPromise();
    }
    createOperationalWebhookEndpoint(operationalWebhookEndpointIn, idempotencyKey, _options) {
        const result = this.api.createOperationalWebhookEndpoint(operationalWebhookEndpointIn, idempotencyKey, _options);
        return result.toPromise();
    }
    deleteOperationalWebhookEndpointWithHttpInfo(endpointId, _options) {
        const result = this.api.deleteOperationalWebhookEndpointWithHttpInfo(endpointId, _options);
        return result.toPromise();
    }
    deleteOperationalWebhookEndpoint(endpointId, _options) {
        const result = this.api.deleteOperationalWebhookEndpoint(endpointId, _options);
        return result.toPromise();
    }
    getOperationalWebhookEndpointWithHttpInfo(endpointId, _options) {
        const result = this.api.getOperationalWebhookEndpointWithHttpInfo(endpointId, _options);
        return result.toPromise();
    }
    getOperationalWebhookEndpoint(endpointId, _options) {
        const result = this.api.getOperationalWebhookEndpoint(endpointId, _options);
        return result.toPromise();
    }
    getOperationalWebhookEndpointSecretWithHttpInfo(endpointId, _options) {
        const result = this.api.getOperationalWebhookEndpointSecretWithHttpInfo(endpointId, _options);
        return result.toPromise();
    }
    getOperationalWebhookEndpointSecret(endpointId, _options) {
        const result = this.api.getOperationalWebhookEndpointSecret(endpointId, _options);
        return result.toPromise();
    }
    listOperationalWebhookEndpointsWithHttpInfo(limit, iterator, order, _options) {
        const result = this.api.listOperationalWebhookEndpointsWithHttpInfo(limit, iterator, order, _options);
        return result.toPromise();
    }
    listOperationalWebhookEndpoints(limit, iterator, order, _options) {
        const result = this.api.listOperationalWebhookEndpoints(limit, iterator, order, _options);
        return result.toPromise();
    }
    rotateOperationalWebhookEndpointSecretWithHttpInfo(endpointId, operationalWebhookEndpointSecretIn, idempotencyKey, _options) {
        const result = this.api.rotateOperationalWebhookEndpointSecretWithHttpInfo(endpointId, operationalWebhookEndpointSecretIn, idempotencyKey, _options);
        return result.toPromise();
    }
    rotateOperationalWebhookEndpointSecret(endpointId, operationalWebhookEndpointSecretIn, idempotencyKey, _options) {
        const result = this.api.rotateOperationalWebhookEndpointSecret(endpointId, operationalWebhookEndpointSecretIn, idempotencyKey, _options);
        return result.toPromise();
    }
    updateOperationalWebhookEndpointWithHttpInfo(endpointId, operationalWebhookEndpointUpdate, _options) {
        const result = this.api.updateOperationalWebhookEndpointWithHttpInfo(endpointId, operationalWebhookEndpointUpdate, _options);
        return result.toPromise();
    }
    updateOperationalWebhookEndpoint(endpointId, operationalWebhookEndpointUpdate, _options) {
        const result = this.api.updateOperationalWebhookEndpoint(endpointId, operationalWebhookEndpointUpdate, _options);
        return result.toPromise();
    }
}
exports.PromiseWebhookEndpointApi = PromiseWebhookEndpointApi;
//# sourceMappingURL=PromiseAPI.js.map
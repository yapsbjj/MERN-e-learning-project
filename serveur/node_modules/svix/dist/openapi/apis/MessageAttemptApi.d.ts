import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';
import { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';
import { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';
import { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';
import { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';
import { MessageAttemptOut } from '../models/MessageAttemptOut';
import { MessageStatus } from '../models/MessageStatus';
import { StatusCodeClass } from '../models/StatusCodeClass';
export declare class MessageAttemptApiRequestFactory extends BaseAPIRequestFactory {
    v1MessageAttemptExpungeContent(appId: string, msgId: string, attemptId: string, _options?: Configuration): Promise<RequestContext>;
    v1MessageAttemptGet(appId: string, msgId: string, attemptId: string, _options?: Configuration): Promise<RequestContext>;
    v1MessageAttemptGetHeaders(appId: string, msgId: string, attemptId: string, _options?: Configuration): Promise<RequestContext>;
    v1MessageAttemptListAttemptedDestinations(appId: string, msgId: string, limit?: number, iterator?: string, _options?: Configuration): Promise<RequestContext>;
    v1MessageAttemptListAttemptedMessages(appId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext>;
    v1MessageAttemptListByEndpoint(appId: string, endpointId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: Date, after?: Date, withContent?: boolean, withMsg?: boolean, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext>;
    v1MessageAttemptListByEndpointDeprecated(appId: string, msgId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext>;
    v1MessageAttemptListByMsg(appId: string, msgId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, endpointId?: string, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext>;
    v1MessageAttemptListByMsgDeprecated(appId: string, msgId: string, limit?: number, iterator?: string, endpointId?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext>;
    v1MessageAttemptResend(appId: string, msgId: string, endpointId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class MessageAttemptApiResponseProcessor {
    v1MessageAttemptExpungeContentWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    v1MessageAttemptGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageAttemptOut>>;
    v1MessageAttemptGetHeadersWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageAttemptHeadersOut>>;
    v1MessageAttemptListAttemptedDestinationsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageEndpointOut>>;
    v1MessageAttemptListAttemptedMessagesWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseEndpointMessageOut>>;
    v1MessageAttemptListByEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageAttemptOut>>;
    v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageAttemptEndpointOut>>;
    v1MessageAttemptListByMsgWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageAttemptOut>>;
    v1MessageAttemptListByMsgDeprecatedWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageAttemptOut>>;
    v1MessageAttemptResendWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
}

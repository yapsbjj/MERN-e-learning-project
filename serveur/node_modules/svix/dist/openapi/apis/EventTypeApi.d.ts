import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { EventTypeExampleOut } from '../models/EventTypeExampleOut';
import { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';
import { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';
import { EventTypeIn } from '../models/EventTypeIn';
import { EventTypeOut } from '../models/EventTypeOut';
import { EventTypePatch } from '../models/EventTypePatch';
import { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';
import { EventTypeUpdate } from '../models/EventTypeUpdate';
import { ExportEventTypeOut } from '../models/ExportEventTypeOut';
import { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';
import { Ordering } from '../models/Ordering';
import { RetryScheduleInOut } from '../models/RetryScheduleInOut';
export declare class EventTypeApiRequestFactory extends BaseAPIRequestFactory {
    v1EventTypeCreate(eventTypeIn: EventTypeIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1EventTypeDelete(eventTypeName: string, expunge?: boolean, _options?: Configuration): Promise<RequestContext>;
    v1EventTypeExportOpenapi(idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1EventTypeGenerateExample(eventTypeSchemaIn: EventTypeSchemaIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1EventTypeGet(eventTypeName: string, _options?: Configuration): Promise<RequestContext>;
    v1EventTypeGetRetrySchedule(eventTypeName: string, _options?: Configuration): Promise<RequestContext>;
    v1EventTypeImportOpenapi(eventTypeImportOpenApiIn: EventTypeImportOpenApiIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1EventTypeList(limit?: number, iterator?: string, order?: Ordering, includeArchived?: boolean, withContent?: boolean, _options?: Configuration): Promise<RequestContext>;
    v1EventTypePatch(eventTypeName: string, eventTypePatch: EventTypePatch, _options?: Configuration): Promise<RequestContext>;
    v1EventTypeUpdate(eventTypeName: string, eventTypeUpdate: EventTypeUpdate, _options?: Configuration): Promise<RequestContext>;
    v1EventTypeUpdateRetrySchedule(eventTypeName: string, retryScheduleInOut: RetryScheduleInOut, _options?: Configuration): Promise<RequestContext>;
}
export declare class EventTypeApiResponseProcessor {
    v1EventTypeCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeOut>>;
    v1EventTypeDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    v1EventTypeExportOpenapiWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ExportEventTypeOut>>;
    v1EventTypeGenerateExampleWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeExampleOut>>;
    v1EventTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeOut>>;
    v1EventTypeGetRetryScheduleWithHttpInfo(response: ResponseContext): Promise<HttpInfo<RetryScheduleInOut>>;
    v1EventTypeImportOpenapiWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeImportOpenApiOut>>;
    v1EventTypeListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseEventTypeOut>>;
    v1EventTypePatchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeOut>>;
    v1EventTypeUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeOut>>;
    v1EventTypeUpdateRetryScheduleWithHttpInfo(response: ResponseContext): Promise<HttpInfo<RetryScheduleInOut>>;
}

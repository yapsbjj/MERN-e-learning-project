import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { AppPortalAccessIn } from '../models/AppPortalAccessIn';
import { AppPortalAccessOut } from '../models/AppPortalAccessOut';
import { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';
import { AuthTokenOut } from '../models/AuthTokenOut';
import { CreateMessageTokenIn } from '../models/CreateMessageTokenIn';
import { DashboardAccessOut } from '../models/DashboardAccessOut';
import { OneTimeTokenIn } from '../models/OneTimeTokenIn';
import { OneTimeTokenOut } from '../models/OneTimeTokenOut';
export declare class AuthenticationApiRequestFactory extends BaseAPIRequestFactory {
    v1AuthenticationAppPortalAccess(appId: string, appPortalAccessIn: AppPortalAccessIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1AuthenticationCreateMessageToken(appId: string, createMessageTokenIn: CreateMessageTokenIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1AuthenticationDashboardAccess(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn: OneTimeTokenIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1AuthenticationExpireAll(appId: string, applicationTokenExpireIn: ApplicationTokenExpireIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1AuthenticationLogout(idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class AuthenticationApiResponseProcessor {
    v1AuthenticationAppPortalAccessWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AppPortalAccessOut>>;
    v1AuthenticationCreateMessageTokenWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AuthTokenOut>>;
    v1AuthenticationDashboardAccessWithHttpInfo(response: ResponseContext): Promise<HttpInfo<DashboardAccessOut>>;
    v1AuthenticationExchangeOneTimeTokenWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OneTimeTokenOut>>;
    v1AuthenticationExpireAllWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    v1AuthenticationLogoutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
}

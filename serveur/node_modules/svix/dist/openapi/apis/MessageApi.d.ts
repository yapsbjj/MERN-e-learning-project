import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { ListResponseMessageOut } from '../models/ListResponseMessageOut';
import { MessageAttemptOut } from '../models/MessageAttemptOut';
import { MessageEventsOut } from '../models/MessageEventsOut';
import { MessageIn } from '../models/MessageIn';
import { MessageOut } from '../models/MessageOut';
import { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';
import { MessageSubscriberAuthTokenOut } from '../models/MessageSubscriberAuthTokenOut';
export declare class MessageApiRequestFactory extends BaseAPIRequestFactory {
    createMessageAttemptForEndpoint(appId: string, endpointId: string, messageIn: MessageIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1MessageCreate(appId: string, messageIn: MessageIn, withContent?: boolean, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1MessageEvents(appId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Promise<RequestContext>;
    v1MessageEventsSubscription(appId: string, subscriptionId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Promise<RequestContext>;
    v1MessageEventsSubscriptionCreateToken(appId: string, subscriptionId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1MessageExpungeContent(appId: string, msgId: string, _options?: Configuration): Promise<RequestContext>;
    v1MessageGet(appId: string, msgId: string, withContent?: boolean, _options?: Configuration): Promise<RequestContext>;
    v1MessageGetRawPayload(appId: string, msgId: string, _options?: Configuration): Promise<RequestContext>;
    v1MessageList(appId: string, limit?: number, iterator?: string, channel?: string, before?: Date, after?: Date, withContent?: boolean, tag?: string, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext>;
}
export declare class MessageApiResponseProcessor {
    createMessageAttemptForEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageAttemptOut>>;
    v1MessageCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageOut>>;
    v1MessageEventsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageEventsOut>>;
    v1MessageEventsSubscriptionWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageEventsOut>>;
    v1MessageEventsSubscriptionCreateTokenWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageSubscriberAuthTokenOut>>;
    v1MessageExpungeContentWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    v1MessageGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageOut>>;
    v1MessageGetRawPayloadWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageRawPayloadOut>>;
    v1MessageListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageOut>>;
}

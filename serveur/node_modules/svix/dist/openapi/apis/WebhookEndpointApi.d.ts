import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { ListResponseOperationalWebhookEndpointOut } from '../models/ListResponseOperationalWebhookEndpointOut';
import { OperationalWebhookEndpointIn } from '../models/OperationalWebhookEndpointIn';
import { OperationalWebhookEndpointOut } from '../models/OperationalWebhookEndpointOut';
import { OperationalWebhookEndpointSecretIn } from '../models/OperationalWebhookEndpointSecretIn';
import { OperationalWebhookEndpointSecretOut } from '../models/OperationalWebhookEndpointSecretOut';
import { OperationalWebhookEndpointUpdate } from '../models/OperationalWebhookEndpointUpdate';
import { Ordering } from '../models/Ordering';
export declare class WebhookEndpointApiRequestFactory extends BaseAPIRequestFactory {
    createOperationalWebhookEndpoint(operationalWebhookEndpointIn: OperationalWebhookEndpointIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    deleteOperationalWebhookEndpoint(endpointId: string, _options?: Configuration): Promise<RequestContext>;
    getOperationalWebhookEndpoint(endpointId: string, _options?: Configuration): Promise<RequestContext>;
    getOperationalWebhookEndpointSecret(endpointId: string, _options?: Configuration): Promise<RequestContext>;
    listOperationalWebhookEndpoints(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext>;
    rotateOperationalWebhookEndpointSecret(endpointId: string, operationalWebhookEndpointSecretIn: OperationalWebhookEndpointSecretIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    updateOperationalWebhookEndpoint(endpointId: string, operationalWebhookEndpointUpdate: OperationalWebhookEndpointUpdate, _options?: Configuration): Promise<RequestContext>;
}
export declare class WebhookEndpointApiResponseProcessor {
    createOperationalWebhookEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointOut>>;
    deleteOperationalWebhookEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    getOperationalWebhookEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointOut>>;
    getOperationalWebhookEndpointSecretWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointSecretOut>>;
    listOperationalWebhookEndpointsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseOperationalWebhookEndpointOut>>;
    rotateOperationalWebhookEndpointSecretWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    updateOperationalWebhookEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointOut>>;
}

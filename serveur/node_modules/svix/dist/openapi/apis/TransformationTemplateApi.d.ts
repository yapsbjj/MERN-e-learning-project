import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { GenerateIn } from '../models/GenerateIn';
import { GenerateOut } from '../models/GenerateOut';
import { HubspotOauthConfigIn } from '../models/HubspotOauthConfigIn';
import { IncomingWebhookPayloadOut } from '../models/IncomingWebhookPayloadOut';
import { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';
import { OAuthPayloadIn } from '../models/OAuthPayloadIn';
import { OAuthPayloadOut } from '../models/OAuthPayloadOut';
import { Ordering } from '../models/Ordering';
import { TemplateIn } from '../models/TemplateIn';
import { TemplateOut } from '../models/TemplateOut';
import { TemplatePatch } from '../models/TemplatePatch';
import { TemplateUpdate } from '../models/TemplateUpdate';
import { TransformationSimulateIn } from '../models/TransformationSimulateIn';
import { TransformationSimulateOut } from '../models/TransformationSimulateOut';
export declare class TransformationTemplateApiRequestFactory extends BaseAPIRequestFactory {
    v1EndpointUpdateHubspotOauthConfig(appId: string, endpointId: string, hubspotOauthConfigIn: HubspotOauthConfigIn, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateCreate(templateIn: TemplateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateDelete(transformationTemplateId: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateGenerate(generateIn: GenerateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateGet(transformationTemplateId: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateOauthDiscord(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateOauthHubspot(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateOauthSlack(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplatePatch(transformationTemplateId: string, templatePatch: TemplatePatch, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateSimulate(transformationSimulateIn: TransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1TransformationTemplateUpdate(transformationTemplateId: string, templateUpdate: TemplateUpdate, _options?: Configuration): Promise<RequestContext>;
}
export declare class TransformationTemplateApiResponseProcessor {
    v1EndpointUpdateHubspotOauthConfigWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    v1TransformationTemplateCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<TemplateOut>>;
    v1TransformationTemplateDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    v1TransformationTemplateGenerateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<GenerateOut>>;
    v1TransformationTemplateGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<TemplateOut>>;
    v1TransformationTemplateListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseTemplateOut>>;
    v1TransformationTemplateOauthDiscordWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IncomingWebhookPayloadOut>>;
    v1TransformationTemplateOauthHubspotWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OAuthPayloadOut>>;
    v1TransformationTemplateOauthSlackWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IncomingWebhookPayloadOut>>;
    v1TransformationTemplatePatchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<TemplateOut>>;
    v1TransformationTemplateSimulateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<TransformationSimulateOut>>;
    v1TransformationTemplateUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<TemplateOut>>;
}
